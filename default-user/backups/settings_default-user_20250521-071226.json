{
    "firstRun": false,
    "accountStorage": {
        "__migrated": "1",
        "NavOpened": "true",
        "LNavOpened": "true",
        "WelcomePage_RecentChatsHidden": "true",
        "WINavOpened": "true"
    },
    "currentVersion": "1.12.14",
    "username": "[Unnamed Persona]",
    "api_server": "http://127.0.0.1:5000/api",
    "preset_settings": "Ace of Spades",
    "user_avatar": "1743610426923-.png",
    "amount_gen": 350,
    "max_context": 8192,
    "main_api": "openai",
    "world_info_settings": {
        "world_info": {
            "globalSelect": []
        },
        "world_info_depth": 2,
        "world_info_min_activations": 0,
        "world_info_min_activations_depth_max": 0,
        "world_info_budget": 25,
        "world_info_include_names": true,
        "world_info_recursive": true,
        "world_info_overflow_alert": false,
        "world_info_case_sensitive": false,
        "world_info_match_whole_words": true,
        "world_info_character_strategy": 1,
        "world_info_budget_cap": 0,
        "world_info_use_group_scoring": false,
        "world_info_max_recursion_steps": 0
    },
    "textgenerationwebui_settings": {
        "temp": 0.5,
        "temperature_last": true,
        "top_p": 0.9,
        "top_k": 0,
        "top_a": 0,
        "tfs": 1,
        "epsilon_cutoff": 0,
        "eta_cutoff": 0,
        "typical_p": 1,
        "min_p": 0,
        "rep_pen": 1.1,
        "rep_pen_range": 0,
        "rep_pen_decay": 0,
        "rep_pen_slope": 1,
        "no_repeat_ngram_size": 0,
        "penalty_alpha": 0,
        "num_beams": 1,
        "length_penalty": 1,
        "min_length": 0,
        "encoder_rep_pen": 1,
        "freq_pen": 0,
        "presence_pen": 0,
        "skew": 0,
        "do_sample": true,
        "early_stopping": false,
        "dynatemp": false,
        "min_temp": 0,
        "max_temp": 2,
        "dynatemp_exponent": 1,
        "smoothing_factor": 0,
        "smoothing_curve": 1,
        "dry_allowed_length": 2,
        "dry_multiplier": 0,
        "dry_base": 1.75,
        "dry_sequence_breakers": "[\"\\n\", \":\", \"\\\"\", \"*\"]",
        "dry_penalty_last_n": 0,
        "max_tokens_second": 0,
        "seed": -1,
        "preset": "Default",
        "add_bos_token": true,
        "stopping_strings": [],
        "ban_eos_token": false,
        "skip_special_tokens": true,
        "include_reasoning": true,
        "streaming": false,
        "mirostat_mode": 0,
        "mirostat_tau": 5,
        "mirostat_eta": 0.1,
        "guidance_scale": 1,
        "negative_prompt": "",
        "grammar_string": "",
        "json_schema": {},
        "banned_tokens": "",
        "global_banned_tokens": "",
        "send_banned_tokens": true,
        "sampler_priority": [
            "repetition_penalty",
            "presence_penalty",
            "frequency_penalty",
            "dry",
            "temperature",
            "dynamic_temperature",
            "quadratic_sampling",
            "top_k",
            "top_p",
            "typical_p",
            "epsilon_cutoff",
            "eta_cutoff",
            "tfs",
            "top_a",
            "min_p",
            "mirostat",
            "xtc",
            "encoder_repetition_penalty",
            "no_repeat_ngram"
        ],
        "samplers": [
            "penalties",
            "dry",
            "top_n_sigma",
            "top_k",
            "typ_p",
            "tfs_z",
            "typical_p",
            "xtc",
            "top_p",
            "min_p",
            "temperature"
        ],
        "samplers_priorities": [
            "dry",
            "penalties",
            "no_repeat_ngram",
            "temperature",
            "top_nsigma",
            "top_p_top_k",
            "top_a",
            "min_p",
            "tfs",
            "eta_cutoff",
            "epsilon_cutoff",
            "typical_p",
            "quadratic",
            "xtc"
        ],
        "ignore_eos_token": false,
        "spaces_between_special_tokens": true,
        "speculative_ngram": false,
        "type": "ooba",
        "mancer_model": "mytholite",
        "togetherai_model": "Gryphe/MythoMax-L2-13b",
        "infermaticai_model": "",
        "ollama_model": "",
        "openrouter_model": "openrouter/auto",
        "openrouter_providers": [],
        "vllm_model": "",
        "aphrodite_model": "",
        "dreamgen_model": "opus-v1-xl/text",
        "tabby_model": "",
        "sampler_order": [
            6,
            0,
            1,
            3,
            4,
            2,
            5
        ],
        "logit_bias": [],
        "n": 1,
        "server_urls": {},
        "custom_model": "",
        "bypass_status_check": false,
        "openrouter_allow_fallbacks": true,
        "xtc_threshold": 0.1,
        "xtc_probability": 0,
        "nsigma": 0,
        "min_keep": 0,
        "featherless_model": "",
        "generic_model": "",
        "rep_pen_size": 0
    },
    "swipes": true,
    "horde_settings": {
        "models": [],
        "auto_adjust_response_length": true,
        "auto_adjust_context_length": false,
        "trusted_workers_only": false
    },
    "power_user": {
        "charListGrid": false,
        "tokenizer": 99,
        "token_padding": 64,
        "collapse_newlines": false,
        "pin_examples": false,
        "strip_examples": false,
        "trim_sentences": false,
        "always_force_name2": true,
        "user_prompt_bias": "",
        "show_user_prompt_bias": true,
        "auto_continue": {
            "enabled": false,
            "allow_chat_completions": false,
            "target_length": 400
        },
        "markdown_escape_strings": "",
        "chat_truncation": 100,
        "streaming_fps": 30,
        "smooth_streaming": false,
        "smooth_streaming_speed": 50,
        "fast_ui_mode": false,
        "avatar_style": 2,
        "chat_display": 1,
        "toastr_position": "toast-top-center",
        "chat_width": 50,
        "never_resize_avatars": false,
        "show_card_avatar_urls": false,
        "play_message_sound": false,
        "play_sound_unfocused": true,
        "auto_save_msg_edits": false,
        "confirm_message_delete": true,
        "sort_field": "name",
        "sort_order": "asc",
        "sort_rule": null,
        "font_scale": 0.9,
        "blur_strength": 0,
        "shadow_width": 0,
        "main_text_color": "rgba(45, 45, 45, 1)",
        "italics_text_color": "rgba(100, 100, 100, 1)",
        "underline_text_color": "rgba(221, 127, 206, 1)",
        "quote_text_color": "rgba(244, 144, 102, 1)",
        "blur_tint_color": "rgba(255, 255, 255, 1)",
        "chat_tint_color": "rgba(255, 255, 255, 0)",
        "user_mes_blur_tint_color": "rgba(255, 250, 248, 0.8)",
        "bot_mes_blur_tint_color": "rgba(255, 255, 255, 0.8)",
        "shadow_color": "rgba(78, 78, 78, 1)",
        "border_color": "rgba(235, 233, 232, 1)",
        "custom_css": "/*\n * 作者：KAKAA | Discord: @rech0_viixi\n * 发布社区：类脑ΟΔΥΣΣΕΙΑ（https://discord.com/channels/1134557553011998840/1340273995018141757）\n * 许可协议：CC BY-NC-SA 4.0\n * 二改分享需注明原作者\n * 禁止任何形式的商用及商用目的的引流！\n */\n\n/* ！！！---全局---！！！ */\n/* 字体引入，可注释或更改 */\n@import url(\"https://static.zeoseven.com/zsft/288/main/result.css\");\n\nbody,\ncode:not([class*=\"hljs\"]) {\n  font-family: \"Source Han Sans SC VF\";\n}\n\n@supports (-webkit-touch-callout: none) {\n  /* iOS 使用默认字体 */\n  body,\n  code:not([class*=\"hljs\"]) {\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto,\n      \"Helvetica Neue\", Arial, sans-serif;\n  }\n}\n\n/* 主题色配置 */\n:root {\n  --theme-color-1: var(--SmartThemeQuoteColor);\n  /* 对应引用文本 */\n  --theme-color-2: var(--SmartThemeUnderlineColor);\n  /* 对应下划线 */\n  --ui-color-main: var(--SmartThemeBlurTintColor);\n  /* 对应UI背景 */\n  --ui-color-sec: color-mix(\n    in srgb,\n    var(--ui-color-main) 88%,\n    var(--text-color-main)\n  );\n  /* 自适应UI次级颜色 */\n  --top-bar-color: var(--SmartThemeBorderColor);\n  /* 顶栏颜色 */\n  --top-bar-underline-color: var(--theme-color-1);\n  /* 顶栏下边缘颜色 */\n  --top-bar-icon-color: var(--text-color-main);\n  /* 顶栏图标颜色 */\n  --chat-background-color: var(--SmartThemeChatTintColor);\n  /* 对应聊天背景 */\n  --text-color-main: var(--SmartThemeBodyColor);\n  /* 对应主要文本 */\n  --text-color-sec: var(--SmartThemeEmColor);\n  /* 对应斜体文本 */\n  --user-color: var(--SmartThemeUserMesBlurTintColor);\n  /* 对应用户消息模糊色调 */\n  --char-color: var(--SmartThemeBotMesBlurTintColor);\n  /* 对应AI消息模糊色调 */\n  --code-color: var(--SmartThemeShadowColor);\n  /* 对应阴影颜色 */\n  --gradient-main: linear-gradient(\n    135deg,\n    var(--theme-color-1) 30%,\n    color-mix(in srgb, var(--theme-color-1) 50%, var(--theme-color-2) 50%) 50%,\n    var(--theme-color-2) 70%\n  );\n  /* 主题渐变 */\n}\n\n:root {\n  --mes-width: 100%;\n  /* 此百分比调整聊天气泡与整体聊天界面的距离 */\n  --mes-block-width: 98%;\n  /* 此百分比调整聊天记录文字与气泡左右边框的距离 */\n  --box-border-radius: 5px;\n  /* 所有盒子的圆角大小 */\n  --top-distance: 5px;\n  /* 顶栏与上边沿的距离 */\n  --bottom-distance: 5px;\n  /* 底栏与下边沿的距离 */\n  --chat-send-spacing: 5px;\n  /* 聊天界面与发送框的距离 */\n  --leftRight-chat-spacing: 10px;\n  /* 聊天界面与左右边沿的距离，电脑端专供 */\n  --scroll-width: 5px;\n  /* 滚动条宽度 */\n  --icon-size: var(--mainFontSize);\n  /* 图标大小 */\n  --border-radius-small: 5px;\n  --border-radius-medium: 10px;\n  --spacing-long: 10px;\n  --spacing-short: 5px;\n  --topBarIconSize: calc(var(--icon-size) * 2);\n}\n\n/* ---标题--- */\n\n/* 标题装饰 */\n.standoutHeader strong,\n#right-nav-panel h2,\n.drawer-content > h3,\n.drawer-content\n  .flex-container\n  h3:first-of-type:not(#Backgrounds .textAlignCenter),\n.drawer-content .flex-container .flex-container h3:first-of-type,\n.popup h3:not(dialog *) {\n  font-size: calc(var(--mainFontSize) * 1.2);\n  color: var(--text-color-main);\n  letter-spacing: 0.1em;\n  white-space: nowrap;\n  line-height: 2;\n}\n\n.standoutHeader strong::before,\n#right-nav-panel h2::before,\n.drawer-content > h3::before,\n.drawer-content\n  .flex-container\n  h3:first-of-type:not(#Backgrounds .textAlignCenter)::before,\n.drawer-content .flex-container .flex-container h3:first-of-type::before,\n.popup h3:not(dialog *)::before {\n  content: \"✦\";\n  position: relative;\n  background: var(--gradient-main);\n  -webkit-background-clip: text;\n  background-clip: text;\n  color: transparent;\n  font-size: calc(var(--mainFontSize) * 1.3);\n  text-shadow: none;\n  padding-bottom: 0.5px;\n}\n\n@supports (-webkit-touch-callout: none) {\n  .standoutHeader strong::before,\n  #right-nav-panel h2::before,\n  .drawer-content > h3::before,\n  .drawer-content\n    .flex-container\n    h3:first-of-type:not(#Backgrounds .textAlignCenter)::before,\n  .drawer-content .flex-container .flex-container h3:first-of-type::before,\n  .popup h3:not(dialog *)::before {\n    font-size: calc(var(--mainFontSize) * 1.7);\n  }\n}\n\n/* 增加标题下横线 */\n.standoutHeader:not(h4),\n#rm_PinAndTabs,\n#top-settings-holder\n  .drawer:not(:first-child):not(:last-child)\n  .drawer-content\n  .alignItemsBaseline.wide100p,\n#rm_api_block .flex-container.alignItemsBaseline,\n#title_api,\n#AdvancedFormatting .flex-container.alignItemsBaseline:not(h3),\n#WorldInfo .alignitemscenter:not(#world_popup *),\n#user-settings-block div[name=\"userSettingsRowOne\"],\n#rm_extensions_block\n  .alignitemscenter.flex-container.wide100p:not(.justifyCenter) {\n  background-image: none;\n  border-radius: 0;\n  border: none;\n  border-bottom: 1px solid var(--ui-color-sec);\n  margin-bottom: calc(var(--mainFontSize) * 0.4);\n  padding-bottom: calc(var(--mainFontSize) * 0.2);\n}\n\n/* 修正标题没对齐的问题 */\n.drawer-content .alignItemsBaseline {\n  align-items: center !important;\n}\n\n#title_api {\n  padding-bottom: 0;\n}\n\n#title_api::before,\n#Backgrounds h3.margin0.flex2::before,\n#rm_extensions_block .margin0.flex1::before,\n#rm_button_selected_ch h2::before {\n  margin-right: calc(var(--mainFontSize) * 0.4);\n}\n\n/* ---抽屉--- */\n/* 覆盖样式 */\n.inline-drawer-header,\n#extensions_settings .inline-drawer-toggle.inline-drawer-header,\n#extensions_settings2 .inline-drawer-toggle.inline-drawer-header,\n#top-settings-holder h4:not(#ai-config-button *):not(#rightNavHolder *) {\n  border-width: 0 0 0 3px !important;\n  border-color: transparent !important;\n  border-style: solid;\n  border-radius: 0;\n  background-image: none !important;\n  padding-left: 7px;\n  border-image: linear-gradient(\n      to bottom,\n      transparent 25%,\n      var(--theme-color-1) 25%,\n      var(--theme-color-1) 75%,\n      transparent 75%\n    )\n    1 100%;\n}\n\n/* 缩小箭头图标 */\n.inline-drawer-icon {\n  font-size: var(--icon-size);\n}\n\n/* ---滚动条--- */\n::-webkit-scrollbar {\n  width: var(--scroll-width);\n}\n\n::-webkit-scrollbar:horizontal {\n  height: var(--scroll-width);\n}\n\n::-webkit-scrollbar-track {\n  background: transparent;\n}\n\n::-webkit-scrollbar-thumb:vertical,\n::-webkit-scrollbar-thumb:horizontal {\n  background-color: color-mix(in srgb, var(--theme-color-1) 70%, transparent);\n  box-shadow: none;\n  border: 0;\n}\n\n/* ---输入框--- */\ninput[type=\"text\"],\ninput[type=\"number\"],\ninput[type=\"switch\"],\ninput:not([type]),\ntextarea:not([type=\"search\"]) {\n  background-color: var(--ui-color-sec) !important;\n  border: 1px solid var(--ui-color-sec) !important;\n}\n\ninput[type=\"text\"]:focus,\ninput[type=\"number\"]:focus,\ninput[type=\"switch\"]:focus,\ninput:not([type]):focus,\ntextarea:not([type=\"search\"]):focus {\n  border: 1px solid var(--theme-color-1) !important;\n}\n\ntextarea[type=\"search\"] {\n  background-color: transparent !important;\n  border: none !important;\n}\n\n.range-block {\n  margin: calc(var(--mainFontSize) * 0.6) 0;\n}\n\n.range-block-counter {\n  margin-left: 20px;\n}\n\n.text_pole:not(.objective-task) {\n  background-color: var(--ui-color-sec);\n  border: none;\n}\n\n/* ---按键--- */\n.menu_button:not(.mes_edit_buttons *) {\n  background-color: var(--ui-color-sec);\n  border-color: var(--ui-color-sec);\n  color: var(--text-color-main);\n}\n\n.menu_button_icon i {\n  font-size: calc(var(--icon-size) * 0.8);\n}\n\n#delete_button,\n#dialogue_del_mes_ok,\n#dialogue_popup_ok,\n#bulk_tag_popup_reset,\n#bulk_tag_popup_remove_mutual,\n.mes_edit_cancel.menu_button,\n.menu_button.popup-button-ok,\n.redWarningBG {\n  background-color: var(--crimson70a) !important;\n  color: var(--white100) !important;\n}\n\n/* 去除阴影 */\n.mes_button,\n.mes_edit_buttons,\n#completion_prompt_manager\n  #completion_prompt_manager_list\n  li.completion_prompt_manager_prompt\n  span\n  span\n  span {\n  filter: none !important;\n}\n\n.fa-solid:not(#load-spinner) {\n  font-size: var(--icon-size);\n  text-shadow: none !important;\n}\n\n/* ---下拉框--- */\nselect {\n  background-color: var(--ui-color-sec) !important;\n  color: var(--text-color-main);\n  border: none !important;\n  margin: calc(var(--mainFontSize) * 0.3) 0 !important;\n}\n\nselect option:not(:checked) {\n  color: var(--text-color-sec);\n}\n\nselect option:checked {\n  color: var(--ui-color-sec);\n  background-color: var(--text-color-main) !important;\n}\n\nselect option {\n  background-color: var(--ui-color-sec) !important;\n}\n\n.ui-widget-content .ui-state-active {\n  color: var(--theme-color-1) !important;\n}\n\n/* ---勾选框--- */\ninput[type=\"checkbox\"] {\n  width: calc(var(--mainFontSize) * 0.9);\n  height: calc(var(--mainFontSize) * 0.9);\n  border: none;\n  outline: none;\n  background-color: var(--ui-color-main);\n  filter: none;\n  box-shadow: 0 0 0 1px var(--text-color-sec);\n  transform: translateY(0);\n  margin-left: 1px;\n}\n\ninput[type=\"checkbox\"]::before {\n  box-shadow: inset 1em 1em var(--theme-color-1);\n}\n\ninput[type=\"checkbox\"].del_checkbox {\n  margin-right: 0;\n}\n\n/* ---滑动条--- */\ninput[type=\"range\"] {\n  box-shadow: none;\n  background-color: var(--ui-color-sec) !important;\n}\n\ninput[type=\"range\"]:hover {\n  background-color: color-mix(\n    in srgb,\n    var(--ui-color-sec) 70%,\n    black 30%\n  ) !important;\n}\n\ninput[type=\"range\"]::-webkit-slider-thumb {\n  box-shadow: 0 0 0 3px\n    color-mix(in srgb, var(--theme-color-1) 50%, transparent);\n  background-color: var(--theme-color-1);\n  width: 10px;\n  height: 10px;\n}\n\n.neo-range-slider {\n  box-shadow: inset 0 0 0 3px rgba(0, 0, 0, 0.2) !important;\n}\n\n/* ---盒子--- */\n/* 统一样式 */\n#left-nav-panel,\n#right-nav-panel,\n#character_popup,\n#dialogue_popup,\n#chat,\n.draggable,\n#select_chat_popup,\n.popup:not(.transparent_dialogue_popup),\n.drawer-content {\n  padding: var(--spacing-long);\n  background-color: var(--ui-color-main);\n  border-radius: var(--box-border-radius);\n  border: none;\n}\n\n#dialogue_popup_text {\n  padding: 0 var(--spacing-long) 0 0;\n}\n\n#left-nav-panel,\n#right-nav-panel {\n  top: var(--top-distance);\n  height: 100dvh !important;\n  max-height: calc(100dvh - var(--top-distance) - var(--bottom-distance) - 1px);\n}\n\n@media screen and (max-width: 1000px) {\n  #left-nav-panel,\n  #right-nav-panel,\n  .drawer-content {\n    margin-top: var(--top-distance);\n  }\n\n  #left-nav-panel,\n  #right-nav-panel {\n    height: calc(100dvh - 45px) !important;\n    max-height: calc(100dvh - var(--topBarBlockSize)) !important;\n    border-radius: 0 0 var(--border-radius-small) var(--border-radius-small);\n  }\n}\n\n/* ---列表--- */\n.list-group,\n.options-content {\n  border: none;\n  border-radius: var(--border-radius-small);\n  background-color: var(--ui-color-sec) !important;\n}\n\n#options {\n  background-color: transparent !important;\n  padding: 0;\n}\n\n/* ---图标--- */\n.fa-fw:not(#qr--modal-icon) {\n  width: auto;\n}\n\n/* 缩小锁定图标 */\n#rm_button_characters,\n#rm_button_panel_pin_div,\n#lm_button_panel_pin_div,\n#WI_button_panel_pin_div {\n  font-size: var(--icon-size);\n}\n\n/* ---头像--- */\n.avatar img,\nbody.big-avatars .avatar img {\n  box-shadow: none;\n  border: none;\n}\n\n/* ---代码块--- */\ncode {\n  margin: 0;\n  border: none;\n  background-color: var(--code-color);\n}\n\nbody[data-stscript-style] .hljs.language-stscript,\n.hljs {\n  background: var(--code-color);\n}\n\n.custom-mermaid {\n  background-color: var(--code-color);\n}\n\n/*\n * 作者：KAKAA | Discord: @rech0_viixi\n * 发布社区：类脑ΟΔΥΣΣΕΙΑ（https://discord.com/channels/1134557553011998840/1340273995018141757）\n * 许可协议：CC BY-NC-SA 4.0\n * 二改分享需注明原作者\n * 禁止任何形式的商用及商用目的的引流！\n */\n\n/* ！！！---局部---！！！ */\n\n/* ---顶栏与通用扩展界面--- */\nbody.no-blur #top-bar,\n#top-bar {\n  border-radius: var(--border-radius-small) var(--border-radius-small) 0 0;\n  box-shadow: none;\n  background-color: transparent !important;\n}\n\nbody.waifuMode #top-bar {\n  border: none;\n}\n\n#top-settings-holder {\n  top: var(--top-distance);\n  box-shadow: 0 2px 0 0 var(--top-bar-underline-color);\n}\n\n#top-settings-holder > :first-child {\n  border-radius: var(--box-border-radius) 0 0 0;\n}\n\n#top-settings-holder > :last-child {\n  border-radius: 0 var(--box-border-radius) 0 0;\n}\n\n.drawer {\n  color: var(--top-bar-icon-color);\n  background-color: var(--top-bar-color);\n}\n\n.drawer:focus-within {\n  background-color: var(--ui-color-main);\n}\n\n.drawer-content:not(#left-nav-panel):not(#right-nav-panel) {\n  border-radius: 0 0 var(--border-radius-small) var(--border-radius-small);\n}\n\n/* IOS 适配 */\n@supports (-webkit-touch-callout: none) {\n  .drawer-content:not(#left-nav-panel):not(#right-nav-panel) {\n    max-width: 100dvw;\n    top: var(--topBarBlockSize);\n  }\n}\n/* IPAD 适配 */\n@supports (-webkit-touch-callout: none) {\n  @media screen and (min-width: 1000px) {\n    #character_popup,\n    #world_popup,\n    .drawer-content {\n      margin-top: 0px;\n    }\n    #top-settings-holder .drawer .drawer-content {\n      right: 0;\n      left: 0;\n      width: var(--sheldWidth);\n    }\n    #left-nav-panel,\n    #right-nav-panel {\n      margin: 0 auto;\n      top: calc(var(--topBarBlockSize) + var(--top-distance));\n      max-height: calc(\n        100dvh - var(--topBarBlockSize) - var(--bottomFormBlockSize)\n      );\n      border-radius: 0 0 var(--border-radius-small) var(--border-radius-small);\n      border-bottom: 1px solid var(--top-bar-underline-color);\n    }\n  }\n}\n\n.drawer-icon {\n  opacity: 0.3;\n  font-size: calc(var(--icon-size) * 1.1);\n  text-shadow: none !important;\n}\n\n.drawer-icon:focus {\n  opacity: 1;\n  background: var(--gradient-main);\n  -webkit-background-clip: text;\n  background-clip: text;\n  color: transparent;\n}\n\n.drawer-content {\n  box-shadow: 0 4px 10px -5px rgba(0, 0, 0, 0.4);\n  border-radius: 0 0 var(--border-radius-small) var(--border-radius-small);\n  border-bottom: 1px solid var(--top-bar-underline-color);\n}\n\n#AdvancedFormatting h3.flex-container {\n  flex-wrap: nowrap;\n}\n\n/* 调整竖排间距 */\n#user-settings-block-content,\n#AdvancedFormatting .flex-container.spaceEvenly {\n  gap: 10px;\n}\n\n/* 反代警告 */\n.reverse_proxy_warning {\n  border: 1px solid var(--ui-color-sec) !important;\n  background-color: transparent !important;\n}\n\n/* ---聊天界面--- */\n#sheld {\n  top: calc(var(--topBarBlockSize) + var(--top-distance));\n  height: calc(100dvh - var(--topBarBlockSize) - var(--top-distance) - 1px);\n}\n\n#chat {\n  overflow-y: scroll;\n  align-items: center;\n  max-height: calc(100dvh - var(--topBarBlockSize) - 20px) !important;\n  padding: calc(var(--scroll-width) + 4px) 0 var(--scroll-width)\n    var(--scroll-width);\n  border-radius: 0 0 var(--box-border-radius) var(--box-border-radius);\n  background-color: var(--chat-background-color);\n}\n\n@supports (-webkit-touch-callout: none) {\n  #chat {\n    padding-right: var(--scroll-width);\n  }\n}\n\n.mesAvatarWrapper {\n  margin: 0 auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n.mesAvatarWrapper .avatar {\n  margin: calc(var(--mainFontSize)) 0 calc(var(--mainFontSize) * 0.4) 0;\n}\n\n.mesIDDisplay,\n.mes_timer,\n.tokenCounterDisplay {\n  display: contents;\n  color: var(--text-color-sec);\n}\n\n#chat .ch_name {\n  position: relative;\n  align-items: flex-end;\n  padding: calc(var(--mainFontSize) * 0.8) 0;\n}\n\n#chat .ch_name::after {\n  content: \"\";\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  height: 1px;\n  background-color: var(--text-color-sec);\n}\n\n.mes {\n  width: var(--mes-width);\n  flex-direction: column;\n  align-items: center;\n  border: none !important;\n  background-color: var(--ui-color-main) !important;\n  margin: 0;\n}\n\n.mes_text {\n  padding: calc(var(--mainFontSize) * 0.8) 0 0 0;\n}\n\n.mes_block {\n  width: var(--mes-block-width);\n  padding-left: 0;\n}\n\n.last_mes .mes_text {\n  padding-right: 0;\n}\n\n.last_mes .mesAvatarWrapper {\n  padding-bottom: 0;\n}\n\n/* 只对AI消息生效，因为用户消息不需要滑动箭头 */\ndiv[is_user=\"false\"].last_mes .mes_block {\n  padding-bottom: 50px;\n}\n\n.last_mes .swipeRightBlock {\n  margin: 0 var(--spacing-long) 0 0;\n}\n\ndiv[is_user=\"true\"] {\n  background-color: var(--user-color) !important;\n}\n\ndiv[is_user=\"true\"] .avatar img {\n  box-shadow: 0 0 0 2px\n      color-mix(in srgb, var(--theme-color-2) 60%, transparent),\n    0 0 10px 2px color-mix(in srgb, var(--theme-color-1) 60%, transparent);\n}\n\ndiv[is_user=\"false\"] {\n  background-color: var(--char-color) !important;\n}\n\ndiv[is_user=\"false\"] .avatar img {\n  box-shadow: 0 0 0 2px\n      color-mix(in srgb, var(--theme-color-1) 60%, transparent),\n    0 0 10px 2px color-mix(in srgb, var(--theme-color-2) 60%, transparent);\n}\n\n.swipe_left {\n  left: calc(var(--scroll-width) + var(--spacing-short));\n}\n\n.swipeRightBlock {\n  flex-direction: row-reverse;\n  bottom: calc(var(--swipeCounterHeight) + var(--swipeCounterMargin));\n}\n\n.swipes-counter {\n  margin-bottom: 4px;\n}\n\n#chat .mes.selected {\n  background-color: var(--crimson70a) !important;\n}\n\n/* 文档模式 */\n\nbody.documentstyle #chat .ch_name::after {\n  width: 0;\n}\n\nbody.documentstyle #chat .mes .mes_block {\n  margin-right: 0;\n  padding-bottom: 15px;\n}\n\nbody.documentstyle #chat .last_mes .mes_block {\n  padding-bottom: 50px;\n}\n\nbody.documentstyle #chat .last_mes {\n  padding-top: var(--border-radius-medium);\n}\n\nbody.documentstyle #chat .mes_text {\n  margin-left: 0 !important;\n}\n\nbody.documentstyle #chat .last_mes .swipe_left {\n  left: var(--scroll-width);\n}\n\n/* 视觉小说模式 */\nbody.waifuMode #chat {\n  border: none;\n  box-shadow: none;\n  border-radius: var(--border-radius-small);\n}\n\nbody.waifuMode .zoomed_avatar {\n  top: 70px;\n}\n\n/* 推理块 */\n.mes_reasoning_header {\n  margin: 1em 0;\n  padding: 7px calc(var(--mainFontSize) + 14px) 7px\n    calc(var(--mainFontSize) * 0.8);\n  background: color-mix(in srgb, var(--theme-color-1) 30%, transparent);\n  border: 1px solid var(--theme-color-1);\n  color: var(--text-color-main);\n}\n\n.mes_reasoning_header span::before {\n  content: \"✦\";\n  position: relative;\n  text-shadow: none;\n  font-size: var(--mainFontSize);\n  line-height: 1;\n  margin-right: 3px;\n}\n.mes_reasoning_details .mes_reasoning_arrow {\n  right: 10px;\n  font-size: calc(var(--mainFontSize) * 0.7) !important;\n}\n\n.mes_reasoning {\n  border-left: 2px solid var(--theme-color-1);\n}\n\n/* ---提示词管理器--- */\n#left-nav-panel {\n  width: calc((100vw - var(--sheldWidth)) / 2 - var(--leftRight-chat-spacing));\n  padding-right: 0;\n}\n\n@supports (-webkit-touch-callout: none) {\n  @media screen and (min-width: 1000px) {\n    #left-nav-panel {\n      padding-right: var(--spacing-long);\n    }\n    .fillLeft .scrollableInner {\n      padding-right: 0.5em;\n    }\n  }\n}\n\n#range_block_openai > .range-block .toggle-description {\n  margin-right: 0;\n}\n\n.range-block-title {\n  text-align: left;\n}\n\nlabel[for=\"openai_image_inlining\"] + div,\n#openai_settings .inline-drawer-header .flex-container {\n  gap: 0;\n  text-align: left;\n}\n\n#openai_settings .inline-drawer-header .flex-container b {\n  margin-right: 5px;\n}\n\n#completion_prompt_manager {\n  width: 100%;\n}\n\n#completion_prompt_manager_list .completion_prompt_manager_list_separator {\n  display: none !important;\n}\n\n#completion_prompt_manager .completion_prompt_manager_header {\n  color: var(--text-color-main);\n  padding: 0;\n}\n\n.completion_prompt_manager_footer {\n  padding: 0 !important;\n}\n\n#completion_prompt_manager .completion_prompt_manager_header_advanced span {\n  margin-left: 0;\n}\n\n#completion_prompt_manager\n  #completion_prompt_manager_list\n  li.completion_prompt_manager_prompt {\n  border-radius: var(--border-radius-medium);\n  border-color: var(--white20a);\n  background-color: var(--ui-color-main);\n}\n\n#completion_prompt_manager\n  #completion_prompt_manager_list\n  li.completion_prompt_manager_prompt:hover,\n#completion_prompt_manager\n  #completion_prompt_manager_list\n  li.completion_prompt_manager_prompt:focus {\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n  border-color: var(--theme-color-1);\n  background-color: color-mix(in srgb, var(--theme-color-1) 15%, transparent);\n  outline: none;\n}\n\n#completion_prompt_manager\n  #completion_prompt_manager_list\n  .completion_prompt_manager_prompt:not(\n    .completion_prompt_manager_prompt_disabled\n  )\n  .prompt-manager-toggle-action {\n  color: var(--theme-color-1);\n}\n\n#completion_prompt_manager\n  #completion_prompt_manager_list\n  .completion_prompt_manager_prompt_disabled\n  .completion_prompt_manager_prompt_name\n  .prompt-manager-inspect-action,\n#completion_prompt_manager\n  #completion_prompt_manager_list\n  .completion_prompt_manager_prompt\n  .completion_prompt_manager_prompt_name\n  .fa-solid {\n  color: color-mix(in srgb, var(--text-color-main) 30%, transparent);\n}\n\n#completion_prompt_manager > .range-block > .text_pole {\n  padding: 0 15px 10px 15px;\n}\n\n#completion_prompt_manager .completion_prompt_manager_header_advanced span {\n  filter: none;\n}\n\n/* ---世界书--- */\n#WorldInfo {\n  margin-top: var(--top-distance);\n}\n\n@supports (-webkit-touch-callout: none) {\n  #world_popup {\n    margin-top: 0;\n    width: 100%;\n  }\n}\n\n.world_entry {\n  margin-top: var(--spacing-short);\n}\n\n.wi-card-entry {\n  border: none;\n}\n\n.select2-container .select2-selection--multiple {\n  background-color: var(--ui-color-sec);\n  border: none;\n}\n\n.select2-container .select2-selection--multiple .select2-selection__choice,\n.select2-container .select2-selection--single .select2-selection__choice {\n  background-color: color-mix(in srgb, var(--theme-color-2) 30%, transparent);\n}\n\nspan.select2.select2-container .select2-selection__choice__remove,\n.select2_choice_clickable_buttonstyle\n  + span.select2-container\n  .select2-selection__choice__display {\n  color: var(--text-color-main);\n  line-height: 1.5;\n  background-color: transparent;\n  margin: 0px;\n}\n\n.select2-container\n  .select2-selection--multiple\n  .select2-selection__choice__remove {\n  padding: 0 5px;\n}\n\n@media screen and (max-width: 1000px) {\n  .world_entry_form .inline-drawer-header {\n    border-width: 0 0 0 3px !important;\n    border-color: var(--theme-color-1) !important;\n    border-style: solid;\n    border-image: none;\n  }\n}\n\n/* ---用户管理器--- */\n.avatar-container.selected {\n  border-color: var(--theme-color-2);\n}\n\n/* ---图库--- */\n#form_bg_download .bg_example.add_bg_but.interactable {\n  background-color: var(--text-color-sec);\n}\n\n.bg_example {\n  box-shadow: none;\n  border-color: var(--ui-color-sec);\n}\n\n.bg_example.selected {\n  border-color: var(--theme-color-2);\n}\n\n.bg_button {\n  color: var(--theme-color-1);\n  filter: drop-shadow(0px 0px 2px white);\n}\n\n.bg_button:hover {\n  background-color: var(--crimson70a);\n}\n\n/* ---用户设置--- */\n#movingUIPresets {\n  margin-bottom: 0 !important;\n}\n\n/* ---角色管理器--- */\n#right-nav-panel {\n  width: calc((100vw - var(--sheldWidth)) / 2 - var(--leftRight-chat-spacing));\n}\n\n#right-nav-panel hr:first-of-type {\n  display: none;\n}\n\n#CharListButtonAndHotSwaps {\n  margin-bottom: calc(var(--mainFontSize) * 0.8);\n}\n\nlabel[for=\"char-management-dropdown\"] {\n  width: 100%;\n}\n\n#avatar_div {\n  flex-direction: column;\n}\n\n#avatar_controls {\n  align-items: center;\n}\n\n.character_select {\n  margin-top: calc(var(--mainFontSize) * 0.8);\n}\n\n.character_select.is_fav .avatar {\n  outline: 2px solid var(--theme-color-1);\n}\n\n.character_select.is_fav .ch_name {\n  color: var(--theme-color-1);\n}\n\n.tag.excluded::after {\n  font-size: calc(var(--icon-size) * 2);\n}\n\n.tag.actionable {\n  font-size: calc(var(--icon-size) * 1);\n  min-height: calc(var(--icon-size) * 2);\n  min-width: calc(var(--icon-size) * 2);\n}\n\n/* 收藏区左右拖动 */\n#HotSwapWrapper {\n  overflow: hidden;\n}\n\n#HotSwapWrapper > div {\n  overflow: auto hidden;\n  flex-wrap: nowrap;\n  height: calc(var(--avatar-base-height) + var(--scroll-width) + 10px);\n  max-height: calc(var(--avatar-base-height) * 2);\n}\nbody.big-avatars #HotSwapWrapper > div {\n  height: calc(\n    var(--avatar-base-height) * var(--big-avatar-height-factor) +\n      var(--scroll-width) + 10px\n  );\n  max-height: calc(\n    var(--avatar-base-height) * var(--big-avatar-height-factor) * 2\n  );\n}\n\n#HotSwapWrapper > div::-webkit-scrollbar-thumb {\n  background-color: var(--ui-color-sec);\n}\n\n/* ---底栏--- */\n#form_sheld {\n  margin: var(--chat-send-spacing) auto var(--bottom-distance) auto;\n}\n\nbody.no-blur #send_form,\n#send_form {\n  background-color: color-mix(\n    in srgb,\n    var(--theme-color-1) 20%,\n    var(--ui-color-main) 60%\n  ) !important;\n  border: none;\n  border-radius: var(--box-border-radius);\n  backdrop-filter: none;\n  padding: 0 5px;\n}\n\n#send_form textarea {\n  background-color: transparent !important;\n  border: none !important;\n}\n\n#send_form textarea::placeholder {\n  color: color(var(--text-color-sec)) !important;\n}\n\n#send_form .fa-solid {\n  font-size: calc(var(--icon-size) * 1.2);\n}\n\n#leftSendForm > div:nth-child(2) {\n  width: auto;\n}\n\n/* QR */\n#qr--bar > .qr--buttons .qr--button,\n#qr--popout > .qr--body > .qr--buttons .qr--button {\n  background-color: color-mix(in srgb, var(--theme-color-1) 30%, transparent);\n  border-color: var(--theme-color-1) !important;\n  border-radius: var(--border-radius-small) !important;\n  border-width: 0 0 0px 0 !important;\n  font-size: calc(var(--mainFontSize) * 0.9);\n}\n\n#qr--bar > .qr--buttons .qr--button:hover,\n#qr--popout > .qr--body > .qr--buttons .qr--button:hover {\n  background-color: color-mix(\n    in srgb,\n    var(--theme-color-1) 50%,\n    transparent\n  ) !important;\n}\n\n#qr--popoutTrigger {\n  background-color: transparent;\n  border: none;\n}\n\n/* ---QR编辑器--- */\n.popup:has(#qr--modalEditor)\n  .popup-content\n  > #qr--modalEditor\n  > #qr--main\n  > .qr--modal-messageContainer\n  > #qr--modal-messageHolder\n  > #qr--modal-message {\n  color: var(--text-color-main) !important;\n}\n\n.popup:has(#qr--modalEditor) .popup-content #qr--modal-message::selection {\n  color: var(--text-color-main) !important;\n}\n\n@supports (color: rgb(from white r g b / 0.25)) {\n  .popup:has(#qr--modalEditor) .popup-content #qr--modal-message::selection {\n    background-color: rgb(from var(--theme-color-1) r g b / 0.25) !important;\n  }\n}\n\n/*\n * 作者：KAKAA | Discord: @rech0_viixi\n * 发布社区：类脑ΟΔΥΣΣΕΙΑ（https://discord.com/channels/1134557553011998840/1340273995018141757）\n * 许可协议：CC BY-NC-SA 4.0\n * 二改分享需注明原作者\n * 禁止任何形式的商用及商用目的的引流！\n */\n",
        "waifuMode": false,
        "movingUI": false,
        "movingUIState": {},
        "movingUIPreset": "Default",
        "noShadows": false,
        "theme": "双色盒子-浅色",
        "gestures": true,
        "auto_swipe": false,
        "auto_swipe_minimum_length": 0,
        "auto_swipe_blacklist": [],
        "auto_swipe_blacklist_threshold": 2,
        "auto_scroll_chat_to_bottom": true,
        "auto_fix_generated_markdown": false,
        "send_on_enter": 0,
        "console_log_prompts": false,
        "request_token_probabilities": false,
        "show_group_chat_queue": false,
        "allow_name1_display": false,
        "allow_name2_display": false,
        "hotswap_enabled": true,
        "timer_enabled": true,
        "timestamps_enabled": true,
        "timestamp_model_icon": true,
        "mesIDDisplay_enabled": true,
        "hideChatAvatars_enabled": false,
        "max_context_unlocked": false,
        "message_token_count_enabled": true,
        "expand_message_actions": false,
        "enableZenSliders": false,
        "enableLabMode": false,
        "prefer_character_prompt": true,
        "prefer_character_jailbreak": true,
        "quick_continue": false,
        "quick_impersonate": false,
        "continue_on_send": false,
        "trim_spaces": true,
        "relaxed_api_urls": false,
        "world_import_dialog": true,
        "enable_auto_select_input": false,
        "enable_md_hotkeys": false,
        "tag_import_setting": 1,
        "disable_group_trimming": false,
        "single_line": false,
        "instruct": {
            "enabled": false,
            "preset": "Alpaca",
            "input_sequence": "### Instruction:",
            "output_sequence": "### Response:",
            "last_output_sequence": "",
            "system_sequence": "### Input:",
            "stop_sequence": "",
            "wrap": true,
            "macro": true,
            "names_behavior": "force",
            "activation_regex": "",
            "system_sequence_prefix": "",
            "system_sequence_suffix": "",
            "first_output_sequence": "",
            "skip_examples": false,
            "output_suffix": "\n\n",
            "input_suffix": "\n\n",
            "system_suffix": "\n\n",
            "user_alignment_message": "",
            "system_same_as_user": false,
            "last_system_sequence": "",
            "first_input_sequence": "",
            "last_input_sequence": "",
            "names_force_groups": true
        },
        "context": {
            "preset": "Story",
            "story_string": "{{#if system}}{{system}}\n{{/if}}{{#if wiBefore}}{{wiBefore}}\n{{/if}}{{#if description}}{{description}}\n{{/if}}{{#if personality}}{{personality}}\n{{/if}}{{#if scenario}}{{scenario}}\n{{/if}}{{#if wiAfter}}{{wiAfter}}\n{{/if}}{{#if persona}}{{persona}}\n{{/if}}",
            "chat_start": "",
            "example_separator": "",
            "use_stop_strings": false,
            "names_as_stop_strings": true
        },
        "context_derived": false,
        "context_size_derived": false,
        "sysprompt": {
            "enabled": true,
            "name": "Neutral - Chat",
            "content": "Write {{char}}'s next reply in a fictional chat between {{char}} and {{user}}."
        },
        "reasoning": {
            "name": "DeepSeek",
            "auto_parse": false,
            "add_to_prompts": false,
            "auto_expand": false,
            "show_hidden": false,
            "prefix": "<think>\n",
            "suffix": "\n</think>",
            "separator": "\n\n",
            "max_additions": 1
        },
        "personas": {
            "user-default.png": "User",
            "1743610426923-.png": "[Unnamed Persona]",
            "1745143402868-mira.png": "[Unnamed Persona]",
            "1745594401579-MIRA.png": "[Unnamed Persona]",
            "1745729512058-test.png": "[Unnamed Persona]"
        },
        "default_persona": null,
        "persona_descriptions": {
            "user-default.png": {
                "description": "",
                "position": 0
            },
            "1743610426923-.png": {
                "description": "",
                "position": 0,
                "depth": 2,
                "role": 0,
                "lorebook": ""
            },
            "1745143402868-mira.png": {
                "description": "",
                "position": 0,
                "depth": 2,
                "role": 0,
                "lorebook": ""
            },
            "1745594401579-MIRA.png": {
                "description": "",
                "position": 0,
                "depth": 2,
                "role": 0,
                "lorebook": ""
            },
            "1745729512058-test.png": {
                "description": "",
                "position": 0,
                "depth": 2,
                "role": 0,
                "lorebook": ""
            }
        },
        "persona_description": "",
        "persona_description_position": 0,
        "persona_description_role": 0,
        "persona_description_depth": 2,
        "persona_description_lorebook": "",
        "persona_show_notifications": true,
        "persona_sort_order": "asc",
        "custom_stopping_strings": "",
        "custom_stopping_strings_macro": true,
        "fuzzy_search": true,
        "encode_tags": false,
        "servers": [],
        "bogus_folders": true,
        "zoomed_avatar_magnification": "",
        "show_tag_filters": false,
        "aux_field": "character_version",
        "stscript": {
            "parser": {
                "flags": {
                    "1": true,
                    "2": true
                }
            },
            "autocomplete": {
                "autoHide": false,
                "style": "theme",
                "font": {
                    "scale": 0.8
                },
                "width": {
                    "left": 1,
                    "right": 1
                },
                "select": 3
            }
        },
        "restore_user_input": true,
        "reduced_motion": false,
        "compact_input_area": true,
        "show_swipe_num_all_messages": false,
        "auto_connect": true,
        "auto_load_chat": false,
        "forbid_external_media": false,
        "external_media_allowed_overrides": [],
        "external_media_forbidden_overrides": [],
        "pin_styles": true,
        "click_to_edit": false,
        "ui_mode": 1,
        "auto_sort_tags": false,
        "selectSamplers": {
            "forceHidden": [],
            "forceShown": []
        },
        "table_selected_sheets": [
            "template_7qUy8MZy",
            "template_UcVuO2Vw",
            "template_nonwmDUc",
            "template_ylZwMIzb",
            "template_wptPEo9w",
            "template_VpZd3yDY"
        ],
        "table_database_templates": [
            {
                "uid": "template_7qUy8MZy",
                "name": "时空表格",
                "domain": "global",
                "type": "dynamic",
                "enable": true,
                "required": true,
                "hashSheet": [
                    [
                        "cell_undefined_tlUICorcfRZb7qFa",
                        "cell_undefined_T9azXgWe9FHBe9pa",
                        "cell_undefined_luwjKcPeyVz9vHqr",
                        "cell_undefined_UY6rMFzJqS0riNEK",
                        "cell_undefined_uvWNNz0vMZfnX5a9"
                    ]
                ],
                "cellHistory": [
                    {
                        "uid": "cell_undefined_tlUICorcfRZb7qFa",
                        "type": "sheet_origin",
                        "status": "",
                        "coordUid": "coo_X1f8H1ppM3VIiww",
                        "data": {
                            "note": "记录时空信息的表格，应保持在一行",
                            "initNode": "本轮需要记录当前时间、地点、人物信息，使用insertRow函数",
                            "deleteNode": "此表大于一行时应删除多余行",
                            "updateNode": "当描写的场景，时间，人物变更时"
                        },
                        "targetUid": ""
                    },
                    {
                        "uid": "cell_undefined_T9azXgWe9FHBe9pa",
                        "type": "column_header",
                        "status": "",
                        "coordUid": "coo_nqniP9O7IpdvSiZ",
                        "data": {
                            "value": "日期"
                        },
                        "targetUid": ""
                    },
                    {
                        "uid": "cell_undefined_luwjKcPeyVz9vHqr",
                        "type": "column_header",
                        "status": "",
                        "coordUid": "coo_tYC3j5ovahTMbZj",
                        "data": {
                            "value": "时间"
                        },
                        "targetUid": ""
                    },
                    {
                        "uid": "cell_undefined_UY6rMFzJqS0riNEK",
                        "type": "column_header",
                        "status": "",
                        "coordUid": "coo_r9lhzV0amynlei3",
                        "data": {
                            "value": "地点（当前描写）"
                        },
                        "targetUid": ""
                    },
                    {
                        "uid": "cell_undefined_uvWNNz0vMZfnX5a9",
                        "type": "column_header",
                        "status": "",
                        "coordUid": "coo_oT4dYCGLIj385hm",
                        "data": {
                            "value": "此地角色"
                        },
                        "targetUid": ""
                    }
                ],
                "config": {
                    "toChat": true,
                    "useCustomStyle": false,
                    "triggerSendToChat": false,
                    "alternateTable": false,
                    "insertTable": false,
                    "alternateLevel": 0,
                    "skipTop": false,
                    "selectedCustomStyleKey": "",
                    "customStyles": {
                        "自定义样式": {
                            "mode": "regex",
                            "basedOn": "html",
                            "regex": "/(^[\\s\\S]*$)/g",
                            "replace": "$1",
                            "replaceDivide": ""
                        }
                    }
                }
            },
            {
                "uid": "template_UcVuO2Vw",
                "name": "角色特征表格",
                "domain": "global",
                "type": "dynamic",
                "enable": true,
                "required": true,
                "hashSheet": [
                    [
                        "cell_undefined_qOG84AFsWEnL9CnH",
                        "cell_undefined_aG5Lt6MeUQ1t8kUW",
                        "cell_undefined_FAoj40VoQPHFCC1l",
                        "cell_undefined_kSqHxUYekM6f8OXF",
                        "cell_undefined_0V9kV2uLdlqmd2bB",
                        "cell_undefined_ynxxk7pm63G3q5kX",
                        "cell_undefined_q22dgXdE2XCG5iZt",
                        "cell_undefined_gHNiYu8FeoakcSTl",
                        "cell_undefined_6uhx53V25tK5H3zL"
                    ]
                ],
                "cellHistory": [
                    {
                        "uid": "cell_undefined_qOG84AFsWEnL9CnH",
                        "type": "sheet_origin",
                        "status": "",
                        "coordUid": "coo_q0gVTxlrwNS02Xv",
                        "data": {
                            "note": "角色天生或不易改变的特征csv表格，思考本轮有否有其中的角色，他应作出什么反应",
                            "initNode": "本轮必须从上文寻找已知的所有角色使用insertRow插入，角色名不能为空",
                            "deleteNode": "",
                            "updateNode": "当角色的身体出现持久性变化时，例如伤痕/当角色有新的爱好，职业，喜欢的事物时/当角色更换住所时/当角色提到重要信息时",
                            "insertNode": "当本轮出现表中没有的新角色时，应插入"
                        },
                        "targetUid": ""
                    },
                    {
                        "uid": "cell_undefined_aG5Lt6MeUQ1t8kUW",
                        "type": "column_header",
                        "status": "",
                        "coordUid": "coo_tzyXj2jVNq3MQUI",
                        "data": {
                            "value": "角色名"
                        },
                        "targetUid": ""
                    },
                    {
                        "uid": "cell_undefined_FAoj40VoQPHFCC1l",
                        "type": "column_header",
                        "status": "",
                        "coordUid": "coo_G297OU9b5lEF2eY",
                        "data": {
                            "value": "身体特征"
                        },
                        "targetUid": ""
                    },
                    {
                        "uid": "cell_undefined_kSqHxUYekM6f8OXF",
                        "type": "column_header",
                        "status": "",
                        "coordUid": "coo_HwgbBLVRPGFHC4J",
                        "data": {
                            "value": "性格"
                        },
                        "targetUid": ""
                    },
                    {
                        "uid": "cell_undefined_0V9kV2uLdlqmd2bB",
                        "type": "column_header",
                        "status": "",
                        "coordUid": "coo_Y4TmS5f5mVjzBVn",
                        "data": {
                            "value": "职业"
                        },
                        "targetUid": ""
                    },
                    {
                        "uid": "cell_undefined_ynxxk7pm63G3q5kX",
                        "type": "column_header",
                        "status": "",
                        "coordUid": "coo_DBPTd4FqIe5vJvr",
                        "data": {
                            "value": "爱好"
                        },
                        "targetUid": ""
                    },
                    {
                        "uid": "cell_undefined_q22dgXdE2XCG5iZt",
                        "type": "column_header",
                        "status": "",
                        "coordUid": "coo_SwO25g0gibBqePy",
                        "data": {
                            "value": "喜欢的事物（作品、虚拟人物、物品等）"
                        },
                        "targetUid": ""
                    },
                    {
                        "uid": "cell_undefined_gHNiYu8FeoakcSTl",
                        "type": "column_header",
                        "status": "",
                        "coordUid": "coo_WWr2IPxqHv5vis6",
                        "data": {
                            "value": "住所"
                        },
                        "targetUid": ""
                    },
                    {
                        "uid": "cell_undefined_6uhx53V25tK5H3zL",
                        "type": "column_header",
                        "status": "",
                        "coordUid": "coo_NbnDbjYv96JaLXp",
                        "data": {
                            "value": "其他重要信息"
                        },
                        "targetUid": ""
                    }
                ],
                "config": {
                    "toChat": true,
                    "useCustomStyle": false,
                    "triggerSendToChat": false,
                    "alternateTable": false,
                    "insertTable": false,
                    "alternateLevel": 0,
                    "skipTop": false,
                    "selectedCustomStyleKey": "",
                    "customStyles": {
                        "自定义样式": {
                            "mode": "regex",
                            "basedOn": "html",
                            "regex": "/(^[\\s\\S]*$)/g",
                            "replace": "$1",
                            "replaceDivide": ""
                        }
                    }
                }
            },
            {
                "uid": "template_nonwmDUc",
                "name": "角色与<user>社交表格",
                "domain": "global",
                "type": "dynamic",
                "enable": true,
                "required": true,
                "hashSheet": [
                    [
                        "cell_undefined_uA8nePkOBekFvdGY",
                        "cell_undefined_olcS5z0aXeIaFU3M",
                        "cell_undefined_pWDPdgehaN2pUOE9",
                        "cell_undefined_3dxE9qM9gRBAqAIT",
                        "cell_undefined_4pRK4Hf4CSTN1oyC"
                    ]
                ],
                "cellHistory": [
                    {
                        "uid": "cell_undefined_uA8nePkOBekFvdGY",
                        "type": "sheet_origin",
                        "status": "",
                        "coordUid": "coo_k5067AlOGZwSnx0",
                        "data": {
                            "note": "思考如果有角色和<user>互动，应什么态度",
                            "initNode": "本轮必须从上文寻找已知的所有角色使用insertRow插入，角色名不能为空",
                            "deleteNode": "",
                            "updateNode": "当角色和<user>的交互不再符合原有的记录时/当角色和<user>的关系改变时",
                            "insertNode": "当本轮出现表中没有的新角色时，应插入"
                        },
                        "targetUid": ""
                    },
                    {
                        "uid": "cell_undefined_olcS5z0aXeIaFU3M",
                        "type": "column_header",
                        "status": "",
                        "coordUid": "coo_4ODWk8dGHBvtXpN",
                        "data": {
                            "value": "角色名"
                        },
                        "targetUid": ""
                    },
                    {
                        "uid": "cell_undefined_pWDPdgehaN2pUOE9",
                        "type": "column_header",
                        "status": "",
                        "coordUid": "coo_Tc42MZ7qaSvIYXH",
                        "data": {
                            "value": "对<user>关系"
                        },
                        "targetUid": ""
                    },
                    {
                        "uid": "cell_undefined_3dxE9qM9gRBAqAIT",
                        "type": "column_header",
                        "status": "",
                        "coordUid": "coo_axh5tDVDLWN1lBd",
                        "data": {
                            "value": "对<user>态度"
                        },
                        "targetUid": ""
                    },
                    {
                        "uid": "cell_undefined_4pRK4Hf4CSTN1oyC",
                        "type": "column_header",
                        "status": "",
                        "coordUid": "coo_8Xg6RzTL4mF38ob",
                        "data": {
                            "value": "对<user>好感"
                        },
                        "targetUid": ""
                    }
                ],
                "config": {
                    "toChat": true,
                    "useCustomStyle": false,
                    "triggerSendToChat": false,
                    "alternateTable": false,
                    "insertTable": false,
                    "alternateLevel": 0,
                    "skipTop": false,
                    "selectedCustomStyleKey": "",
                    "customStyles": {
                        "自定义样式": {
                            "mode": "regex",
                            "basedOn": "html",
                            "regex": "/(^[\\s\\S]*$)/g",
                            "replace": "$1",
                            "replaceDivide": ""
                        }
                    }
                }
            },
            {
                "uid": "template_ylZwMIzb",
                "name": "任务、命令或者约定表格",
                "domain": "global",
                "type": "dynamic",
                "enable": true,
                "required": false,
                "hashSheet": [
                    [
                        "cell_undefined_OWLR6j8GgAeD2Cg1",
                        "cell_undefined_dpmc1b2rEJugjd7p",
                        "cell_undefined_rqliAPDDrhsJ1eQS",
                        "cell_undefined_sExZhc0g0ywvnIgs",
                        "cell_undefined_8DZtTnCOpxqv0UHu"
                    ]
                ],
                "cellHistory": [
                    {
                        "uid": "cell_undefined_OWLR6j8GgAeD2Cg1",
                        "type": "sheet_origin",
                        "status": "",
                        "coordUid": "coo_ealWpr2TXC7ZWrv",
                        "data": {
                            "note": "思考本轮是否应该执行任务/赴约",
                            "deleteNode": "当大家赴约时/任务或命令完成时/任务，命令或约定被取消时",
                            "updateNode": "",
                            "insertNode": "当特定时间约定一起去做某事时/某角色收到做某事的命令或任务时"
                        },
                        "targetUid": ""
                    },
                    {
                        "uid": "cell_undefined_dpmc1b2rEJugjd7p",
                        "type": "column_header",
                        "status": "",
                        "coordUid": "coo_CZsXkx50DmCAEwt",
                        "data": {
                            "value": "角色"
                        },
                        "targetUid": ""
                    },
                    {
                        "uid": "cell_undefined_rqliAPDDrhsJ1eQS",
                        "type": "column_header",
                        "status": "",
                        "coordUid": "coo_zWjDxHiXNRxWRpe",
                        "data": {
                            "value": "任务"
                        },
                        "targetUid": ""
                    },
                    {
                        "uid": "cell_undefined_sExZhc0g0ywvnIgs",
                        "type": "column_header",
                        "status": "",
                        "coordUid": "coo_T0bGfoIH1FdkkAT",
                        "data": {
                            "value": "地点"
                        },
                        "targetUid": ""
                    },
                    {
                        "uid": "cell_undefined_8DZtTnCOpxqv0UHu",
                        "type": "column_header",
                        "status": "",
                        "coordUid": "coo_14NkEGU1QYhWrYX",
                        "data": {
                            "value": "持续时间"
                        },
                        "targetUid": ""
                    }
                ],
                "config": {
                    "toChat": true,
                    "useCustomStyle": false,
                    "triggerSendToChat": false,
                    "alternateTable": false,
                    "insertTable": false,
                    "alternateLevel": 0,
                    "skipTop": false,
                    "selectedCustomStyleKey": "",
                    "customStyles": {
                        "自定义样式": {
                            "mode": "regex",
                            "basedOn": "html",
                            "regex": "/(^[\\s\\S]*$)/g",
                            "replace": "$1",
                            "replaceDivide": ""
                        }
                    }
                }
            },
            {
                "uid": "template_wptPEo9w",
                "name": "重要事件历史表格",
                "domain": "global",
                "type": "dynamic",
                "enable": true,
                "required": true,
                "hashSheet": [
                    [
                        "cell_undefined_Ezi7pk6WNCw3kl0M",
                        "cell_undefined_EvVI6X7qEf5Lcucc",
                        "cell_undefined_79pEkeSWqXTmS99P",
                        "cell_undefined_hUB9r3PiTpmnHgKr",
                        "cell_undefined_hyRNeViWfTvn6WRK",
                        "cell_undefined_2RrilxcTLK9kkEin"
                    ]
                ],
                "cellHistory": [
                    {
                        "uid": "cell_undefined_Ezi7pk6WNCw3kl0M",
                        "type": "sheet_origin",
                        "status": "",
                        "coordUid": "coo_UVZ5WPapZDFSNkR",
                        "data": {
                            "note": "记录<user>或角色经历的重要事件",
                            "initNode": "本轮必须从上文寻找可以插入的事件并使用insertRow插入",
                            "deleteNode": "",
                            "updateNode": "",
                            "insertNode": "当某个角色经历让自己印象深刻的事件时，比如表白、分手等"
                        },
                        "targetUid": ""
                    },
                    {
                        "uid": "cell_undefined_EvVI6X7qEf5Lcucc",
                        "type": "column_header",
                        "status": "",
                        "coordUid": "coo_gSA3HrfCh4MKC0z",
                        "data": {
                            "value": "角色"
                        },
                        "targetUid": ""
                    },
                    {
                        "uid": "cell_undefined_79pEkeSWqXTmS99P",
                        "type": "column_header",
                        "status": "",
                        "coordUid": "coo_pwUW94gHmVKsAAV",
                        "data": {
                            "value": "事件简述"
                        },
                        "targetUid": ""
                    },
                    {
                        "uid": "cell_undefined_hUB9r3PiTpmnHgKr",
                        "type": "column_header",
                        "status": "",
                        "coordUid": "coo_YBXTchrzAFWok2J",
                        "data": {
                            "value": "日期"
                        },
                        "targetUid": ""
                    },
                    {
                        "uid": "cell_undefined_hyRNeViWfTvn6WRK",
                        "type": "column_header",
                        "status": "",
                        "coordUid": "coo_IOHgYevE5eP4cgR",
                        "data": {
                            "value": "地点"
                        },
                        "targetUid": ""
                    },
                    {
                        "uid": "cell_undefined_2RrilxcTLK9kkEin",
                        "type": "column_header",
                        "status": "",
                        "coordUid": "coo_iFYIZwUb22r6gQ5",
                        "data": {
                            "value": "情绪"
                        },
                        "targetUid": ""
                    }
                ],
                "config": {
                    "toChat": true,
                    "useCustomStyle": false,
                    "triggerSendToChat": false,
                    "alternateTable": false,
                    "insertTable": false,
                    "alternateLevel": 0,
                    "skipTop": false,
                    "selectedCustomStyleKey": "",
                    "customStyles": {
                        "自定义样式": {
                            "mode": "regex",
                            "basedOn": "html",
                            "regex": "/(^[\\s\\S]*$)/g",
                            "replace": "$1",
                            "replaceDivide": ""
                        }
                    }
                }
            },
            {
                "uid": "template_VpZd3yDY",
                "name": "重要物品表格",
                "domain": "global",
                "type": "dynamic",
                "enable": true,
                "required": false,
                "hashSheet": [
                    [
                        "cell_undefined_xlpxlyDBHeTA12uG",
                        "cell_undefined_JzFOBAfkQaJp3cpv",
                        "cell_undefined_b23O9hAiE491oJh3",
                        "cell_undefined_crCt2VaSuj1wpwPU",
                        "cell_undefined_yY6DWB9Zzl8g4eiz"
                    ]
                ],
                "cellHistory": [
                    {
                        "uid": "cell_undefined_xlpxlyDBHeTA12uG",
                        "type": "sheet_origin",
                        "status": "",
                        "coordUid": "coo_I4fX9eu0IIYF1oj",
                        "data": {
                            "note": "对某人很贵重或有特殊纪念意义的物品",
                            "deleteNode": "",
                            "updateNode": "",
                            "insertNode": "当某人获得了贵重或有特殊意义的物品时/当某个已有物品有了特殊意义时"
                        },
                        "targetUid": ""
                    },
                    {
                        "uid": "cell_undefined_JzFOBAfkQaJp3cpv",
                        "type": "column_header",
                        "status": "",
                        "coordUid": "coo_p7xl5sIAoUX2Dj1",
                        "data": {
                            "value": "拥有人"
                        },
                        "targetUid": ""
                    },
                    {
                        "uid": "cell_undefined_b23O9hAiE491oJh3",
                        "type": "column_header",
                        "status": "",
                        "coordUid": "coo_RmMweeMWxO1nbdT",
                        "data": {
                            "value": "物品描述"
                        },
                        "targetUid": ""
                    },
                    {
                        "uid": "cell_undefined_crCt2VaSuj1wpwPU",
                        "type": "column_header",
                        "status": "",
                        "coordUid": "coo_kzJKClRq8dKhHzX",
                        "data": {
                            "value": "物品名"
                        },
                        "targetUid": ""
                    },
                    {
                        "uid": "cell_undefined_yY6DWB9Zzl8g4eiz",
                        "type": "column_header",
                        "status": "",
                        "coordUid": "coo_pA4VIS4wTpbwHQv",
                        "data": {
                            "value": "重要原因"
                        },
                        "targetUid": ""
                    }
                ],
                "config": {
                    "toChat": true,
                    "useCustomStyle": false,
                    "triggerSendToChat": false,
                    "alternateTable": false,
                    "insertTable": false,
                    "alternateLevel": 0,
                    "skipTop": false,
                    "selectedCustomStyleKey": "",
                    "customStyles": {
                        "自定义样式": {
                            "mode": "regex",
                            "basedOn": "html",
                            "regex": "/(^[\\s\\S]*$)/g",
                            "replace": "$1",
                            "replaceDivide": ""
                        }
                    }
                }
            }
        ],
        "muyoo_dataTable": {
            "updateIndex": 4
        },
        "wi_key_input_plaintext": true
    },
    "extension_settings": {
        "apiUrl": "http://localhost:5100",
        "apiKey": "",
        "autoConnect": false,
        "notifyUpdates": false,
        "disabledExtensions": [],
        "expressionOverrides": [],
        "memory": {
            "minLongMemory": 16,
            "maxLongMemory": 1024,
            "longMemoryLength": 128,
            "shortMemoryLength": 512,
            "minShortMemory": 128,
            "maxShortMemory": 1024,
            "shortMemoryStep": 16,
            "longMemoryStep": 8,
            "repetitionPenaltyStep": 0.05,
            "repetitionPenalty": 1.2,
            "maxRepetitionPenalty": 2,
            "minRepetitionPenalty": 1,
            "temperature": 1,
            "minTemperature": 0.1,
            "maxTemperature": 2,
            "temperatureStep": 0.05,
            "lengthPenalty": 1,
            "minLengthPenalty": -4,
            "maxLengthPenalty": 4,
            "lengthPenaltyStep": 0.1,
            "memoryFrozen": false,
            "source": "extras",
            "prompt": "Ignore previous instructions. Summarize the most important facts and events in the story so far. If a summary already exists in your memory, use that as a base and expand with new facts. Limit the summary to {{words}} words or less. Your response should include nothing but the summary.",
            "promptWords": 200,
            "promptMinWords": 25,
            "promptMaxWords": 1000,
            "promptWordsStep": 25,
            "promptInterval": 10,
            "promptMinInterval": 1,
            "promptMaxInterval": 100,
            "promptIntervalStep": 1,
            "template": "[Summary: {{summary}}]",
            "position": 0,
            "depth": 2,
            "promptForceWords": 0,
            "promptForceWordsStep": 100,
            "promptMinForceWords": 0,
            "promptMaxForceWords": 10000,
            "SkipWIAN": false,
            "role": 0,
            "scan": false,
            "overrideResponseLength": 0,
            "overrideResponseLengthMin": 0,
            "overrideResponseLengthMax": 4096,
            "overrideResponseLengthStep": 16,
            "maxMessagesPerRequest": 0,
            "maxMessagesPerRequestMin": 0,
            "maxMessagesPerRequestMax": 250,
            "maxMessagesPerRequestStep": 1,
            "prompt_builder": 0
        },
        "note": {
            "default": "",
            "chara": [],
            "wiAddition": [],
            "defaultPosition": 1,
            "defaultDepth": 4,
            "defaultInterval": 1,
            "defaultRole": 0
        },
        "caption": {
            "refine_mode": false,
            "source": "extras",
            "multimodal_api": "openai",
            "multimodal_model": "gpt-4-turbo",
            "prompt": "What's in this image?",
            "template": "[{{user}} sends {{char}} a picture that contains: {{caption}}]"
        },
        "expressions": {
            "showDefault": false,
            "api": 99,
            "llmPrompt": "Ignore previous instructions. Classify the emotion of the last message. Output just one word, e.g. \"joy\" or \"anger\". Choose only one of the following labels: {{labels}}",
            "allowMultiple": true,
            "custom": []
        },
        "connectionManager": {
            "selectedProfile": "",
            "profiles": []
        },
        "dice": {},
        "regex": [
            {
                "id": "7b24b9bd-cc6d-44c4-8e6c-4f84b76cd144",
                "scriptName": "【可更新手机】会自动更新的手机",
                "disabled": true,
                "runOnEdit": true,
                "findRegex": "MiPhone_start([\\s\\S]+?)MiPhone_end",
                "replaceString": "```\n\n<body>\n    <script type=\"module\">\n        const urls = [`https://sharkpan.xyz/f/1BEot2/index.html`]\n        function Http_Get(url) {\n            return new Promise((resolve, reject) => {\n                $.ajax({\n                    url: url,\n                    method: 'GET',\n                    timeout: 5000,\n                    success: function (data, status) {\n                        resolve(data); // 成功时返回数据\n                    },\n                    error: function (xhr, status, error) {\n                        if (status === 'timeout') {\n                            console.error('请求超时，请检查网络或重试');\n                        } else {\n                            console.error('请求失败，错误信息：', error);\n                        }\n                        resolve(null);\n                    }\n                });\n            });\n        }\n\n        async function Load() {\n            for (const url of urls) {\n                for (let i = 0; i < 3; i++) {\n                    try {\n                        const html = await Http_Get(url);\n                        if (html && html.indexOf(\"MiPhone\") > 0) {\n                            $(\"body\").html(html);\n                            return;\n                        }\n                    } catch (e) {\n\n                    }\n                }\n            }\n            triggerSlash(`/echo severity=error 界面加载失败,请检查网络问题`);\n        }\n        Load();\n    </script>\n</body>\n```",
                "trimStrings": [],
                "placement": [
                    2
                ],
                "substituteRegex": 0,
                "minDepth": null,
                "maxDepth": 0,
                "markdownOnly": true,
                "promptOnly": false
            },
            {
                "id": "d4827411-edbe-4ca2-95fc-1db77d62700f",
                "scriptName": "【文字特效】美化省token",
                "disabled": true,
                "runOnEdit": true,
                "findRegex": "/<[^>]*>/g",
                "replaceString": "",
                "trimStrings": [],
                "placement": [
                    2
                ],
                "substituteRegex": 0,
                "minDepth": null,
                "maxDepth": null,
                "markdownOnly": false,
                "promptOnly": true
            },
            {
                "id": "3dc1e72a-a8f5-4639-8359-c8db5555ad12",
                "scriptName": "【DepressIon】剧情推进1 v2.5",
                "disabled": true,
                "runOnEdit": true,
                "findRegex": "/<plot>([\\s\\S]*?)</plot>/g",
                "replaceString": "<details>\n<summary>剧情</summary>\n$1\n</details>",
                "trimStrings": [],
                "placement": [
                    2
                ],
                "substituteRegex": 0,
                "minDepth": null,
                "maxDepth": null,
                "markdownOnly": true,
                "promptOnly": false
            },
            {
                "id": "55454616-447b-4aae-96fc-278ddd79c5f7",
                "scriptName": "【DepressIon】剧情推进2 v2.5",
                "disabled": true,
                "runOnEdit": true,
                "findRegex": "/<plot>([\\s\\S]*?)</plot>/g",
                "replaceString": "",
                "trimStrings": [],
                "placement": [
                    2
                ],
                "substituteRegex": 0,
                "minDepth": 12,
                "maxDepth": null,
                "markdownOnly": false,
                "promptOnly": true
            },
            {
                "id": "81f71792-d818-40f0-9185-c653fb8dc28a",
                "scriptName": "【DepressIon】通用必备正则 v1.3",
                "disabled": true,
                "runOnEdit": true,
                "findRegex": "/((<(guifan|safety_check)>(?:(?!<(guifan|safety_check)>)[\\s\\S])*?<\\/(guifan|safety_check)>)|(<reminder>(?:[\\s\\S])*?<\\/reminder>)|([\\s\\S]*<\\/(analysis|thinking|think)>)|([\\s\\S]*(?=<game>)))/g",
                "replaceString": "",
                "trimStrings": [],
                "placement": [
                    2
                ],
                "substituteRegex": 0,
                "minDepth": null,
                "maxDepth": null,
                "markdownOnly": true,
                "promptOnly": true
            },
            {
                "id": "dacb7dc6-cc45-4c36-b148-872ed471614e",
                "scriptName": "【DepressIon】小总结1 v2.5",
                "disabled": true,
                "runOnEdit": true,
                "findRegex": "/[\\s\\S]*?(?<!<details>\\s*)<summary>([\\s\\S]*)<\\/summary>[\\s\\S]*/g",
                "replaceString": "<summary>\n$1\n</summary>",
                "trimStrings": [],
                "placement": [
                    2
                ],
                "substituteRegex": 0,
                "minDepth": 12,
                "maxDepth": null,
                "markdownOnly": false,
                "promptOnly": true
            },
            {
                "id": "73e0322a-640e-468c-90a6-2d08e70ac7da",
                "scriptName": "【DepressIon】小总结2 v2.5",
                "disabled": true,
                "runOnEdit": true,
                "findRegex": "/(?<!<details>\\s*)<summary>(((?!<summary>)[\\s\\S])*?)<\\/summary>/g",
                "replaceString": "<details>\n<summary>摘要</summary>\n$1\n</details>",
                "trimStrings": [],
                "placement": [
                    2
                ],
                "substituteRegex": 0,
                "minDepth": null,
                "maxDepth": null,
                "markdownOnly": true,
                "promptOnly": false
            },
            {
                "id": "714786d2-3e63-4e7a-9809-1332f2349c97",
                "scriptName": "【DepressIon】修改用户输入 1.2",
                "disabled": true,
                "runOnEdit": true,
                "findRegex": "/([\\s\\S]*)/",
                "replaceString": "// $1\n\ngame.loadAll(`",
                "trimStrings": [],
                "placement": [
                    1
                ],
                "substituteRegex": 0,
                "minDepth": null,
                "maxDepth": 1,
                "markdownOnly": false,
                "promptOnly": true
            },
            {
                "id": "99592534-a992-4ef7-99eb-5d760b54f418",
                "scriptName": "【DepressIon】修改AI回复 1.2",
                "disabled": true,
                "runOnEdit": true,
                "findRegex": "/([\\s\\S]*)/",
                "replaceString": "$1\n<system>\n存档加载完毕。\n</system>",
                "trimStrings": [],
                "placement": [
                    2
                ],
                "substituteRegex": 0,
                "minDepth": null,
                "maxDepth": 1,
                "markdownOnly": false,
                "promptOnly": true
            },
            {
                "id": "1d967525-179d-4cf1-8a44-4839a7f56069",
                "scriptName": "【K】去除<Main_Quest>1",
                "disabled": true,
                "runOnEdit": true,
                "findRegex": "/<Main_Quest>[\\s\\S]*?<\\/Main_Quest>/gm",
                "replaceString": "",
                "trimStrings": [],
                "placement": [
                    2
                ],
                "substituteRegex": 0,
                "minDepth": 2,
                "maxDepth": null,
                "markdownOnly": false,
                "promptOnly": true
            },
            {
                "id": "54d1a2fb-8639-4468-8b54-9e3a126fe466",
                "scriptName": "【K】去除<Main_Quest>2",
                "disabled": true,
                "runOnEdit": true,
                "findRegex": "/<Main_Quest>[\\s\\S]*?<\\/Main_Quest>/gm",
                "replaceString": "",
                "trimStrings": [],
                "placement": [
                    2
                ],
                "substituteRegex": 0,
                "minDepth": null,
                "maxDepth": null,
                "markdownOnly": true,
                "promptOnly": false
            },
            {
                "id": "bfdb2cfb-5e56-43d3-9a59-90ec31b0a0d8",
                "scriptName": "【K】去除摘要_不发送正文",
                "disabled": true,
                "runOnEdit": true,
                "findRegex": "/([\\s\\S]*?<details>\\s*<summary>\\s*摘要\\s*<\\/summary>|<\\/details>[\\s\\S]*?$)/gs",
                "replaceString": "",
                "trimStrings": [],
                "placement": [
                    2
                ],
                "substituteRegex": 0,
                "minDepth": 10,
                "maxDepth": null,
                "markdownOnly": false,
                "promptOnly": true
            },
            {
                "id": "db3e2b56-b154-424a-813b-4ff028a12be1",
                "scriptName": "【K】去除摘要_防AI抄袭",
                "disabled": true,
                "runOnEdit": true,
                "findRegex": "/<details>\\s*<summary>\\s*摘要\\s*<\\/summary>[\\s\\S]*?<\\/details>/gsi",
                "replaceString": "",
                "trimStrings": [],
                "placement": [
                    2
                ],
                "substituteRegex": 0,
                "minDepth": null,
                "maxDepth": 10,
                "markdownOnly": false,
                "promptOnly": true
            },
            {
                "id": "e51433ed-3bc6-4dc2-91d2-3a7f238f4afe",
                "scriptName": "【K】K去除所有用户消息",
                "disabled": true,
                "runOnEdit": true,
                "findRegex": "^([\\s\\S]*)$",
                "replaceString": "",
                "trimStrings": [],
                "placement": [
                    1
                ],
                "substituteRegex": 0,
                "minDepth": 1,
                "maxDepth": null,
                "markdownOnly": false,
                "promptOnly": true
            },
            {
                "id": "afcf5bde-e980-40b4-bd7c-1c69c4245251",
                "scriptName": "【K】K添加tag",
                "disabled": true,
                "runOnEdit": true,
                "findRegex": "^([\\s\\S]*)$",
                "replaceString": "<user_input>\n$1\n</user_input>",
                "trimStrings": [],
                "placement": [
                    1
                ],
                "substituteRegex": 0,
                "minDepth": null,
                "maxDepth": 1,
                "markdownOnly": true,
                "promptOnly": true
            },
            {
                "id": "0b23053e-a2a3-4d27-adb6-d41929de9743",
                "scriptName": "【K】Kemini通用去除多余内容",
                "disabled": true,
                "runOnEdit": true,
                "findRegex": "/(<disclaimer>.*?</disclaimer>)|(<guifan>.*?</guifan>)|```start|<content>|</content>|```end|<done>|`<done>`|(<!--\\s*consider\\s*:\\s*(.*?)\\s*-->)|(.*?</think(ing)?>(\\n)?)|(<think(ing)?>[\\s\\S]*<\\/think(ing)?>(\\n)?)/gs",
                "replaceString": "",
                "trimStrings": [],
                "placement": [
                    2
                ],
                "substituteRegex": 0,
                "minDepth": null,
                "maxDepth": null,
                "markdownOnly": true,
                "promptOnly": true
            }
        ],
        "character_allowed_regex": [],
        "tts": {
            "voiceMap": "",
            "ttsEnabled": false,
            "currentProvider": "System",
            "auto_generation": true,
            "ElevenLabs": {},
            "System": {},
            "narrate_user": false,
            "playback_rate": 1
        },
        "sd": {
            "scale_min": 1,
            "scale_max": 30,
            "scale_step": 0.5,
            "scale": 7,
            "steps_min": 1,
            "steps_max": 150,
            "steps_step": 1,
            "steps": 20,
            "dimension_min": 64,
            "dimension_max": 2048,
            "dimension_step": 64,
            "width": 512,
            "height": 512,
            "prompt_prefix": "best quality, absurdres, masterpiece,",
            "negative_prompt": "lowres, bad anatomy, bad hands, text, error, cropped, worst quality, low quality, normal quality, jpeg artifacts, signature, watermark, username, blurry",
            "sampler": "DDIM",
            "model": "",
            "restore_faces": false,
            "enable_hr": false,
            "horde": true,
            "horde_nsfw": false,
            "horde_karras": true,
            "refine_mode": false,
            "prompts": {
                "0": "In the next response I want you to provide only a detailed comma-delimited list of keywords and phrases which describe {{char}}. The list must include all of the following items in this order: name, species and race, gender, age, clothing, occupation, physical features and appearances. Do not include descriptions of non-visual qualities such as personality, movements, scents, mental traits, or anything which could not be seen in a still photograph. Do not write in full sentences. Prefix your description with the phrase 'full body portrait,'",
                "1": "Ignore previous instructions and provide a detailed description of {{user}}'s physical appearance from the perspective of {{char}} in the form of a comma-delimited list of keywords and phrases. The list must include all of the following items in this order: name, species and race, gender, age, clothing, occupation, physical features and appearances. Do not include descriptions of non-visual qualities such as personality, movements, scents, mental traits, or anything which could not be seen in a still photograph. Do not write in full sentences. Prefix your description with the phrase 'full body portrait,'. Ignore the rest of the story when crafting this description. Do not reply as {{char}} when writing this description, and do not attempt to continue the story.",
                "2": "Ignore previous instructions and provide a detailed description for all of the following: a brief recap of recent events in the story, {{char}}'s appearance, and {{char}}'s surroundings. Do not reply as {{char}} when writing this description, and do not attempt to continue the story.",
                "3": "Ignore previous instructions and provide ONLY the last chat message string back to me verbatim. Do not write anything after the string. Do not reply as {{char}} when writing this description, and do not attempt to continue the story.",
                "4": "Ignore previous instructions. Your next response must be formatted as a single comma-delimited list of concise keywords.  The list will describe of the visual details included in the last chat message.\n\n    Only mention characters by using pronouns ('he','his','she','her','it','its') or neutral nouns ('male', 'the man', 'female', 'the woman').\n\n    Ignore non-visible things such as feelings, personality traits, thoughts, and spoken dialog.\n\n    Add keywords in this precise order:\n    a keyword to describe the location of the scene,\n    a keyword to mention how many characters of each gender or type are present in the scene (minimum of two characters:\n    {{user}} and {{char}}, example: '2 men ' or '1 man 1 woman ', '1 man 3 robots'),\n\n    keywords to describe the relative physical positioning of the characters to each other (if a commonly known term for the positioning is known use it instead of describing the positioning in detail) + 'POV',\n\n    a single keyword or phrase to describe the primary act taking place in the last chat message,\n\n    keywords to describe {{char}}'s physical appearance and facial expression,\n    keywords to describe {{char}}'s actions,\n    keywords to describe {{user}}'s physical appearance and actions.\n\n    If character actions involve direct physical interaction with another character, mention specifically which body parts interacting and how.\n\n    A correctly formatted example response would be:\n    '(location),(character list by gender),(primary action), (relative character position) POV, (character 1's description and actions), (character 2's description and actions)'",
                "5": "In the next response I want you to provide only a detailed comma-delimited list of keywords and phrases which describe {{char}}. The list must include all of the following items in this order: name, species and race, gender, age, facial features and expressions, occupation, hair and hair accessories (if any), what they are wearing on their upper body (if anything). Do not describe anything below their neck. Do not include descriptions of non-visual qualities such as personality, movements, scents, mental traits, or anything which could not be seen in a still photograph. Do not write in full sentences. Prefix your description with the phrase 'close up facial portrait,'",
                "7": "Ignore previous instructions and provide a detailed description of {{char}}'s surroundings in the form of a comma-delimited list of keywords and phrases. The list must include all of the following items in this order: location, time of day, weather, lighting, and any other relevant details. Do not include descriptions of characters and non-visual qualities such as names, personality, movements, scents, mental traits, or anything which could not be seen in a still photograph. Do not write in full sentences. Prefix your description with the phrase 'background,'. Ignore the rest of the story when crafting this description. Do not reply as {{user}} when writing this description, and do not attempt to continue the story.",
                "8": "Provide an exhaustive comma-separated list of tags describing the appearance of the character on this image in great detail. Start with \"full body portrait\".",
                "9": "Provide an exhaustive comma-separated list of tags describing the appearance of the character on this image in great detail. Start with \"full body portrait\".",
                "10": "Provide an exhaustive comma-separated list of tags describing the appearance of the character on this image in great detail. Start with \"close-up portrait\".",
                "11": "Ignore previous instructions and provide an exhaustive comma-separated list of tags describing the appearance of \"{0}\" in great detail. Start with {{charPrefix}} (sic) if the subject is associated with {{char}}.",
                "-1": "[{{char}} sends a picture that contains: {{prompt}}].",
                "-2": "The text prompt used to generate the image. Must represent an exhaustive description of the desired image that will allow an artist or a photographer to perfectly recreate it."
            },
            "character_prompts": {},
            "source": "extras",
            "scheduler": "normal",
            "vae": "",
            "seed": -1,
            "adetailer_face": false,
            "horde_sanitize": true,
            "interactive_mode": false,
            "multimodal_captioning": false,
            "snap": false,
            "free_extend": false,
            "function_tool": false,
            "auto_url": "http://localhost:7860",
            "auto_auth": "",
            "vlad_url": "http://localhost:7860",
            "vlad_auth": "",
            "drawthings_url": "http://localhost:7860",
            "drawthings_auth": "",
            "hr_upscaler": "Latent",
            "hr_scale": 1,
            "hr_scale_min": 1,
            "hr_scale_max": 4,
            "hr_scale_step": 0.1,
            "denoising_strength": 0.7,
            "denoising_strength_min": 0,
            "denoising_strength_max": 1,
            "denoising_strength_step": 0.01,
            "hr_second_pass_steps": 0,
            "hr_second_pass_steps_min": 0,
            "hr_second_pass_steps_max": 150,
            "hr_second_pass_steps_step": 1,
            "clip_skip_min": 1,
            "clip_skip_max": 12,
            "clip_skip_step": 1,
            "clip_skip": 1,
            "novel_anlas_guard": false,
            "novel_sm": false,
            "novel_sm_dyn": false,
            "novel_decrisper": false,
            "openai_style": "vivid",
            "openai_quality": "standard",
            "style": "Default",
            "styles": [
                {
                    "name": "Default",
                    "negative": "lowres, bad anatomy, bad hands, text, error, cropped, worst quality, low quality, normal quality, jpeg artifacts, signature, watermark, username, blurry",
                    "prefix": "best quality, absurdres, aesthetic,"
                }
            ],
            "comfy_url": "http://127.0.0.1:8188",
            "comfy_workflow": "Default_Comfy_Workflow.json",
            "pollinations_enhance": false,
            "wand_visible": false,
            "command_visible": false,
            "interactive_visible": false,
            "tool_visible": false,
            "stability_style_preset": "anime",
            "bfl_upsampling": false,
            "character_negative_prompts": {}
        },
        "chromadb": {},
        "translate": {
            "target_language": "en",
            "internal_language": "en",
            "provider": "google",
            "auto_mode": "none",
            "deepl_endpoint": "free"
        },
        "objective": {
            "customPrompts": {
                "default": {
                    "createTask": "Ignore previous instructions and generate a list of tasks to complete an objective. Your next response must be formatted as a numbered list of plain text entries. Do not include anything but the numbered list. The list must be prioritized in the order that tasks must be completed.\n\nThe objective that you must make a numbered task list for is: [{{objective}}].\nThe tasks created should take into account the character traits of {{char}}. These tasks may or may not involve {{user}} directly. Be sure to include the objective as the final task.\n\nGiven an example objective of 'Make me a four course dinner', here is an example output:\n1. Determine what the courses will be\n2. Find recipes for each course\n3. Go shopping for supplies with {{user}}\n4. Cook the food\n5. Get {{user}} to set the table\n6. Serve the food\n7. Enjoy eating the meal with {{user}}\n    ",
                    "checkTaskCompleted": "Ignore previous instructions. Determine if this task is completed: [{{task}}].\nTo do this, examine the most recent messages. Your response must only contain either true or false, nothing other words.\nExample output:\ntrue\n    ",
                    "currentTask": "Your current task is [{{task}}]. Balance existing story with completing this task."
                }
            }
        },
        "quickReply": {
            "quickReplyEnabled": false,
            "numberOfSlots": 5,
            "quickReplySlots": [
                {
                    "mes": "",
                    "label": "",
                    "enabled": true
                },
                {
                    "mes": "",
                    "label": "",
                    "enabled": true
                },
                {
                    "mes": "",
                    "label": "",
                    "enabled": true
                },
                {
                    "mes": "",
                    "label": "",
                    "enabled": true
                },
                {
                    "mes": "",
                    "label": "",
                    "enabled": true
                }
            ]
        },
        "randomizer": {
            "controls": [],
            "fluctuation": 0.1,
            "enabled": false
        },
        "speech_recognition": {
            "currentProvider": "None",
            "messageMode": "append",
            "messageMappingText": "",
            "messageMapping": [],
            "messageMappingEnabled": false,
            "None": {}
        },
        "rvc": {
            "enabled": false,
            "model": "",
            "pitchOffset": 0,
            "pitchExtraction": "dio",
            "indexRate": 0.88,
            "filterRadius": 3,
            "rmsMixRate": 1,
            "protect": 0.33,
            "voicMapText": "",
            "voiceMap": {}
        },
        "hypebot": {},
        "vectors": {},
        "variables": {
            "global": {}
        },
        "attachments": [],
        "character_attachments": {},
        "disabled_attachments": [],
        "gallery": {
            "folders": {},
            "sort": "dateAsc"
        },
        "cfg": {
            "global": {
                "guidance_scale": 1,
                "negative_prompt": ""
            },
            "chara": []
        },
        "quickReplyV2": {
            "isEnabled": false,
            "isCombined": false,
            "isPopout": false,
            "config": {
                "setList": [
                    {
                        "set": "Default",
                        "isVisible": true
                    }
                ]
            }
        },
        "hide": {
            "enabled": true,
            "settings_by_entity": {
                "character-机动战士高达-SEED V1.2.png": {
                    "hideLastN": 10,
                    "lastProcessedLength": 3,
                    "userConfigured": true
                },
                "character-机动战士高达-SEED V1.2_1.png": {
                    "hideLastN": 10,
                    "lastProcessedLength": 15,
                    "userConfigured": true
                }
            },
            "migration_v1_complete": true,
            "useGlobalSettings": false,
            "globalHideSettings": {
                "hideLastN": 0,
                "lastProcessedLength": 0,
                "userConfigured": false
            }
        },
        "TavernHelper": {
            "enabled_extension": true,
            "render": {
                "render_enabled": true,
                "tampermonkey_compatibility": false,
                "render_depth": 0,
                "render_optimize": false
            },
            "script": {
                "global_script_enabled": true,
                "scriptsRepository": [
                    {
                        "id": "fb7e915b-8c42-4ebd-8b9e-4f79aae2595d",
                        "name": "通用状态栏脚本1.1",
                        "content": "'use strict';\nconst lorebook_name = '[通用状态栏世界书]';\nconst status_tag = '<GeneralStatus>';\nconst status_regex = /<GeneralStatus>([\\s\\S]+?)<\\/GeneralStatus>/s;\n\n// 状态栏预设管理功能相关常量\nconst BUTTON_ID = 'status-bar-manager-button';\nconst BUTTON_ICON = 'fa-solid fa-sliders';\nconst BUTTON_TOOLTIP = '状态栏管理器';\nconst BUTTON_TEXT = '状态栏管理';\nconst POPUP_ID = 'status-bar-manager-popup';\nconst MAX_PRESETS = 10;\nconst PRESET_STORAGE_KEY = 'status_bar_presets';\nconst CHARACTER_DATA_STORAGE_KEY = 'status_bar_character_data'; // 添加角色数据本地存储键\n\n// 分类映射表，用于显示友好名称和图标\nconst CATEGORY_MAPPING = {\n  ST: { name: '场景与时间', icon: 'fa-clock' },\n  CP: { name: '角色档案', icon: 'fa-id-card' },\n  CR: { name: '角色资源与装备', icon: 'fa-sack-dollar' },\n  CV: { name: '角色状态值', icon: 'fa-heart-pulse' },\n  CS: { name: '特定状态描述', icon: 'fa-user-tag' },\n  RP: { name: '角色关系参数', icon: 'fa-handshake' }, // 添加RP映射\n  AE: { name: '行为与事件计数', icon: 'fa-list-check' },\n  WP: { name: '世界与剧情动态', icon: 'fa-globe' },\n  MI: { name: '元信息', icon: 'fa-brain' },\n};\n\n// 用于存储脚本选项\nvar option;\n(function (option_1) {\n  const default_option = {\n    dark_mode: false,\n    default_expanded: true,\n    init_delay: 0,\n    wp_triggerable: false, // 添加WP可触发设置\n  };\n\n  async function parse_option() {\n    const transformers = {\n      '白天/暗夜模式': value => ({ dark_mode: value }),\n      默认展开: value => ({ default_expanded: value }),\n      初始化延迟: (value, content) => ({ init_delay: content && !isNaN(Number(content)) ? Number(content) : 0 }),\n      WP可触发: value => ({ wp_triggerable: value }), // 处理WP可触发设置\n    };\n\n    return await getLorebookEntries(lorebook_name, { filter: { comment: '设置-' } })\n      .then(entries => {\n        console.log(\n          '[状态栏] 获取到设置条目:',\n          entries.map(e => `${e.comment} (enabled: ${e.enabled})`),\n        );\n        return entries.map(entry => ({\n          option: entry.comment.replace('设置-', ''),\n          value: entry.enabled,\n          content: entry.content,\n        }));\n      })\n      .then(entries => {\n        const result = entries.reduce(\n          (result, { option, value, content }) => {\n            const transformer = transformers[option];\n            if (transformer) {\n              const transformed = transformer(value, content);\n              console.log(`[状态栏] 解析设置: ${option} = ${JSON.stringify(transformed)}`);\n              return { ...result, ...transformed };\n            }\n            return result;\n          },\n          { ...default_option }, // 使用解构确保创建新对象\n        );\n        console.log('[状态栏] 最终设置:', result);\n        return result;\n      });\n  }\n\n  async function update() {\n    const old_option = option_1.option ? { ...option_1.option } : null;\n    option_1.option = await parse_option();\n\n    const changed = !old_option || !_.isEqual(option_1.option, old_option);\n    if (changed) {\n      console.log('[状态栏] 设置已更新:', option_1.option);\n\n      // 立即应用暗色模式设置\n      applyDarkMode(option_1.option.dark_mode);\n    }\n\n    return changed;\n  }\n\n  // 新增：专门用于应用暗色模式的函数\n  function applyDarkMode(isDarkMode) {\n    console.log(`[状态栏] 应用${isDarkMode ? '暗色' : '亮色'}模式`);\n    const $body = $('body', window.parent.document);\n\n    if (isDarkMode) {\n      $body.addClass('dark-mode');\n    } else {\n      $body.removeClass('dark-mode');\n    }\n  }\n\n  option_1.update = update;\n  option_1.applyDarkMode = applyDarkMode; // 导出函数\n})(option || (option = {}));\n\n// 解析函数，将状态栏文本解析为结构化数据\nfunction parseStatusBarText(text) {\n  if (!text) return { categories: {} };\n\n  const lines = text.split('\\n').filter(line => line.trim() && !line.trim().startsWith('#'));\n  const result = { categories: {} };\n\n  lines.forEach(line => {\n    const match = line.match(/\\[(.*?)\\|(.*?)::(.*)\\]/);\n    if (!match) return;\n\n    const category = match[1].trim();\n    const key = match[2].trim();\n    const valueString = match[3].trim();\n\n    // 解析值，按 | 分隔多个值，按 @ 分隔值的组成部分\n    const values = valueString.split('|').map(v => v.trim());\n    const processedValues = values.map(value => {\n      if (value.includes('@')) {\n        return value.split('@').map(v => v.trim());\n      }\n      return value;\n    });\n\n    // 按分类整理数据\n    if (!result.categories[category]) {\n      result.categories[category] = [];\n    }\n\n    result.categories[category].push({\n      key: key,\n      values: processedValues,\n      originalLine: line,\n    });\n  });\n\n  return result;\n}\n\n// 检查值是否为空\nfunction isEmpty(value) {\n  if (value == null) return true;\n  if (Array.isArray(value)) return value.length === 0;\n  if (typeof value === 'object') return Object.keys(value).length === 0;\n  return String(value).trim() === '';\n}\n\n// 渲染函数，用于生成状态栏HTML\nvar render;\n(function (render_1) {\n  let style = null;\n\n  // 创建百分比进度条\n  function createProgressBar(value, max, color) {\n    const percentage = max > 0 ? Math.min(100, Math.max(0, (value / max) * 100)) : 0;\n    return `\n      <div class=\"status-progress-container\">\n        <div class=\"status-progress-bar\" style=\"width: ${percentage}%; background-color: ${color}\"></div>\n      </div>\n    `;\n  }\n\n  // 渲染场景与时间（ST）条目\n  function renderSceneTimeItem(item) {\n    const { key, values } = item;\n\n    if (key === '时间') {\n      return `<span class=\"status-time\">${values.flat().join(' ')}</span>`;\n    } else if (key === '当前地点') {\n      return `<span class=\"status-location\">${values.flat().join(' ')}</span>`;\n    } else if (key === '天气') {\n      return `<span class=\"status-weather\">${values.flat().join(' ')}</span>`;\n    } else {\n      // 通用ST条目\n      return `<div class=\"status-item\">\n                <div class=\"status-header\">\n                  <span class=\"status-label\">${key}</span>\n                </div>\n                <div class=\"status-value\">${values.flat().join(' ')}</div>\n              </div>`;\n    }\n  }\n\n  // 渲染角色档案（CP）条目\n  function renderCharacterProfileItem(item) {\n    const { key, values } = item;\n    let icon = '';\n\n    switch (key) {\n      case '名字':\n        icon = '<i class=\"fa-solid fa-user fa-fw\"></i>';\n        break;\n      case '年龄':\n        icon = '<i class=\"fa-solid fa-cake-candles fa-fw\"></i>';\n        break;\n      case '身高':\n        icon = '<i class=\"fa-solid fa-ruler-vertical fa-fw\"></i>';\n        break;\n      case '三围':\n        icon = '<i class=\"fa-solid fa-ruler fa-fw\"></i>';\n        break;\n      case '特征':\n        icon = '<i class=\"fa-solid fa-fingerprint fa-fw\"></i>';\n        break;\n      case '永久性状态':\n        icon = '<i class=\"fa-solid fa-infinity fa-fw\"></i>';\n        break;\n      case '性知识':\n        icon = '<i class=\"fa-solid fa-book fa-fw\"></i>';\n        break;\n      case '身体外观':\n        icon = '<i class=\"fa-solid fa-eye fa-fw\"></i>';\n        break;\n      default:\n        icon = '<i class=\"fa-solid fa-circle-info fa-fw\"></i>';\n    }\n\n    // 处理多段值 (由@分隔)\n    let displayValue = '';\n    if (Array.isArray(values[0])) {\n      // 三围特殊处理\n      if (key === '三围') {\n        displayValue = values[0].join('，');\n      } else {\n        displayValue = values[0].join('，');\n      }\n    } else {\n      displayValue = values.join('，');\n    }\n\n    return `<div class=\"profile-item profile-${key.toLowerCase().replace(/\\s+/g, '-')}\">\n              <div class=\"profile-item-icon\">${icon}</div>\n              <div class=\"profile-item-content\">\n                <div class=\"profile-item-label\">${key}</div>\n                <div class=\"profile-item-value\">${displayValue}</div>\n              </div>\n            </div>`;\n  }\n\n  // 渲染资源与装备（CR）条目\n  function renderResourcesInventoryItem(item) {\n    const { key, values } = item;\n    let icon = '';\n\n    switch (key) {\n      case '现金':\n        icon = '<i class=\"fa-solid fa-coins fa-fw\"></i>';\n        let amount = values[0];\n        let change = values.length > 1 ? values[1] : '';\n        let reason = values.length > 2 ? values[2] : '';\n        let changeDisplay = '';\n\n        if (change && change !== '±0') {\n          changeDisplay = `<span class=\"status-change ${\n            change.startsWith('+') ? 'positive' : 'negative'\n          }\">${change}</span>`;\n        }\n\n        let reasonDisplay = '';\n        if (reason && reason !== '无变化') {\n          reasonDisplay = `<span class=\"cash-details\">(${reason})</span>`;\n        }\n\n        return `<div class=\"status-money\">\n                  ${icon} ${key}: <strong>${amount}</strong> ${changeDisplay} ${reasonDisplay}\n                </div>`;\n      case '道具物品':\n        icon = '<i class=\"fa-solid fa-toolbox fa-fw\"></i>';\n        // 处理多个物品，展示为标签\n        const items = Array.isArray(values[0]) ? values[0] : values;\n        const itemTags = items.map(item => `<span class=\"item-tag\">${item}</span>`).join(' ');\n        return `<div class=\"status-items\">\n                  ${icon} ${key}: ${itemTags}\n                </div>`;\n      case '永久佩戴':\n        icon = '<i class=\"fa-solid fa-shirt fa-fw\"></i>';\n        return `<div class=\"status-wearables\">\n                  ${icon} ${key}: ${values.flat().join('，')}\n                </div>`;\n      default:\n        icon = '<i class=\"fa-solid fa-box fa-fw\"></i>';\n        return `<div class=\"status-item\">\n                  <div class=\"status-header\">\n                    <span class=\"status-label\">${icon} ${key}</span>\n                  </div>\n                  <div class=\"status-value\">${values.flat().join('，')}</div>\n                </div>`;\n    }\n  }\n\n  // 渲染状态值（CV）条目\n  function renderVitalsGaugesItem(item) {\n    const { key, values } = item;\n\n    // 解析进度条相关值\n    let currentValue = 0;\n    let maxValue = 100;\n    let changeValue = '±0';\n    let reason = '无';\n    let description = '';\n\n    // 尝试解析第一个值（当前值/最大值）\n    if (values[0] && values[0].includes('@')) {\n      const [current, max] = values[0];\n      currentValue = parseInt(current) || 0;\n      maxValue = parseInt(max) || 100;\n    } else if (values[0]) {\n      currentValue = parseInt(values[0]) || 0;\n    }\n\n    // 获取变化值\n    if (values[1]) {\n      changeValue = values[1];\n    }\n\n    // 获取变化原因\n    if (values[2]) {\n      reason = values[2];\n    }\n\n    // 获取描述\n    if (values[3]) {\n      description = values[3];\n    }\n\n    // 统一使用低饱和蓝色\n    const color = '#7797b9';\n    let icon = '<i class=\"fa-solid fa-circle-info fa-fw\"></i>';\n\n    switch (key) {\n      case '疼痛':\n        icon = '<i class=\"fa-solid fa-face-grimace fa-fw\"></i>';\n        break;\n      case '创伤':\n        icon = '<i class=\"fa-solid fa-bandage fa-fw\"></i>';\n        break;\n      case '体力':\n        icon = '<i class=\"fa-solid fa-person-running fa-fw\"></i>';\n        break;\n      case '饥饿':\n      case '口渴':\n      case '尿意':\n      case '便意':\n      case '如厕需求':\n        if (key === '饥饿') icon = '<i class=\"fa-solid fa-utensils fa-fw\"></i>';\n        else if (key === '口渴') icon = '<i class=\"fa-solid fa-glass-water fa-fw\"></i>';\n        else if (key === '尿意') icon = '<i class=\"fa-solid fa-toilet fa-fw\"></i>';\n        else if (key === '便意') icon = '<i class=\"fa-solid fa-toilet-paper fa-fw\"></i>';\n        else if (key === '如厕需求') icon = '<i class=\"fa-solid fa-restroom fa-fw\"></i>';\n        break;\n      case '性欲':\n        icon = '<i class=\"fa-solid fa-heart fa-fw\"></i>';\n        break;\n      case '性快感':\n        icon = '<i class=\"fa-solid fa-fire fa-fw\"></i>';\n        break;\n      case '好感度':\n        icon = '<i class=\"fa-solid fa-heart fa-fw\"></i>';\n        break;\n      case '信任度':\n        icon = '<i class=\"fa-solid fa-handshake fa-fw\"></i>';\n        break;\n      case '堕落度':\n        icon = '<i class=\"fa-solid fa-mask fa-fw\"></i>';\n        break;\n      default:\n    }\n\n    // 变化显示\n    let changeDisplay = '';\n    if (changeValue && changeValue !== '±0') {\n      const isPositive = changeValue.startsWith('+');\n      changeDisplay = `<span class=\"status-change ${isPositive ? 'positive' : 'negative'}\">${changeValue}</span>`;\n    }\n\n    // 原因显示\n    let reasonDisplay = '';\n    if (reason && reason !== '无') {\n      reasonDisplay = `<span class=\"status-reason\">${reason}</span>`;\n    }\n\n    // 描述显示\n    let descriptionDisplay = '';\n    if (description && description.trim() !== '') {\n      descriptionDisplay = `<div class=\"status-description\">${description}</div>`;\n    }\n\n    return `<div class=\"status-item\" data-status-type=\"${key}\">\n              <div class=\"status-header\">\n                <span class=\"status-label\">${icon} ${key}</span>\n              </div>\n              ${createProgressBar(currentValue, maxValue, color)}\n              <div class=\"status-footer\">\n                <div class=\"status-details-row\">\n                  <span class=\"status-value\">${currentValue}/${maxValue}</span>\n                  ${changeDisplay} ${reasonDisplay}\n                </div>\n              </div>\n              ${descriptionDisplay}\n            </div>`;\n  }\n\n  // 渲染特定状态描述（CS）条目\n  function renderConditionDescriptorsItem(item) {\n    const { key, values } = item;\n\n    if (key === '状态') {\n      // 状态特殊处理为描述性文本框\n      return `<div class=\"condition-item condition-status\">\n                <div class=\"condition-item-label\">${key}</div>\n                <div class=\"condition-item-value\">${values.flat().join(' ')}</div>\n              </div>`;\n    } else {\n      return `<div class=\"condition-item\">\n                <div class=\"condition-item-label\">${key}</div>\n                <div class=\"condition-item-value\">${values.flat().join(' ')}</div>\n              </div>`;\n    }\n  }\n\n  // 渲染行为与事件计数（AE）条目\n  function renderActivityCountersItem(item) {\n    const { key, values } = item;\n\n    // 处理可能带有@的值，直接显示原始内容\n    let displayContent = '';\n\n    // 值的处理逻辑\n    if (values[0] && Array.isArray(values[0])) {\n      // 如果是数组（含有@分隔的值），直接显示\n      displayContent = values[0].join(' · '); // 使用中点符号分隔\n    } else {\n      // 单个值的情况\n      displayContent = values.flat().join(' ');\n    }\n\n    // 返回一行式布局\n    return `<div class=\"counter-item activity-count\">\n              <div class=\"counter-content\">\n                <span class=\"counter-label\">${key}:</span>\n                <span class=\"counter-value\">${displayContent}</span>\n              </div>\n            </div>`;\n  }\n\n  // 渲染世界与剧情动态（WP）条目\n  function renderWorldPlotItem(item) {\n    const { key, values } = item;\n\n    // 创建统一的区块标题\n    const headerTitle = `<div class=\"world-item-header\">${key}</div>`;\n\n    // 处理所有类型的值，统一格式\n    const processedValues = values\n      .map(value => {\n        if (Array.isArray(value)) {\n          // 处理用@分隔的项（在同一行显示，用\"-\"连接）\n          return `<li class=\"world-item-entry\">${value.join(' - ')}</li>`;\n        } else {\n          return `<li class=\"world-item-entry\">${value}</li>`;\n        }\n      })\n      .join('');\n\n    // 添加交互类标记\n    let itemClass = 'world-item';\n    let isInteractive = false;\n\n    // 根据设置决定是否所有WP条目都是可交互的\n    if (option.option?.wp_triggerable) {\n      itemClass += ' interactive';\n      isInteractive = true;\n    } else if (key === '剧情发展' || key === '可移动地点') {\n      // 保留原有的特定条目交互逻辑\n      itemClass += ' interactive';\n      isInteractive = true;\n    }\n\n    // 为一些特定条目添加额外的类\n    if (key === '当前主线剧情事件') {\n      itemClass += ' main-quest';\n    } else if (key === '即将发生的事件') {\n      itemClass += ' upcoming-events';\n    } else if (key === '世界新闻' || key === '周边事件') {\n      itemClass += ' news';\n      // 如果WP可触发设置关闭，保留原有逻辑\n      if (!option.option?.wp_triggerable) {\n        itemClass += ' interactive';\n        isInteractive = true;\n      }\n    } else if (key === '当前npc') {\n      itemClass += ' npcs';\n    } else if (key === '剧情发展信息') {\n      itemClass += ' plot-info';\n    }\n\n    return `<div class=\"${itemClass}\">\n              ${headerTitle}\n              <ul class=\"world-item-list${isInteractive ? ' interactive-list' : ''}\">\n                ${processedValues}\n              </ul>\n            </div>`;\n  }\n\n  // 渲染元信息（MI）条目\n  function renderMetaInfoItem(item) {\n    const { key, values } = item;\n\n    // 获取图标\n    let icon = '<i class=\"fa-solid fa-lightbulb fa-fw\"></i>';\n    if (key === '吐槽') {\n      icon = '<i class=\"fa-solid fa-comments fa-fw\"></i>';\n    } else if (key === '想法') {\n      icon = '<i class=\"fa-solid fa-brain fa-fw\"></i>';\n    }\n\n    // 创建区块标题\n    const headerTitle = `<div class=\"meta-item-header\">${icon} ${key}</div>`;\n\n    // 处理内容\n    const content = values.flat().join(' ');\n\n    // 确定类名\n    let itemClass = 'meta-item';\n    if (key === '想法') {\n      itemClass += ' meta-thoughts';\n    } else if (key === '吐槽') {\n      itemClass += ' meta-comments';\n    }\n\n    return `<div class=\"${itemClass}\">\n              ${headerTitle}\n              <div class=\"meta-item-content\">${content}</div>\n            </div>`;\n  }\n\n  // 添加渲染角色关系参数（RP）条目的函数\n  function renderRelationshipParameterItem(item) {\n    const { key, values } = item;\n\n    // 解析关系参数值\n    let currentValue = 0;\n    let maxValue = 100;\n    let changeValue = '±0';\n    let reason = '无';\n    let stage = '';\n\n    // 尝试解析第一个值（当前值/最大值）\n    if (values[0] && values[0].includes('@')) {\n      const [current, max] = values[0];\n      currentValue = parseInt(current) || 0;\n      maxValue = parseInt(max) || 100;\n    } else if (values[0]) {\n      currentValue = parseInt(values[0]) || 0;\n    }\n\n    // 获取变化值\n    if (values[1]) {\n      changeValue = values[1];\n    }\n\n    // 获取变化原因\n    if (values[2]) {\n      reason = values[2];\n    }\n\n    // 获取阶段描述\n    if (values[3]) {\n      stage = values[3];\n    }\n\n    // 统一使用莫兰迪蓝色\n    const color = '#7797b9';\n    let icon = '<i class=\"fa-solid fa-circle-info fa-fw\"></i>';\n\n    // 根据不同的关系参数类型设置不同图标\n    switch (key) {\n      case '好感度':\n        icon = '<i class=\"fa-solid fa-heart fa-fw\"></i>';\n        break;\n      case '信任度':\n        icon = '<i class=\"fa-solid fa-handshake fa-fw\"></i>';\n        break;\n      case '堕落度':\n        icon = '<i class=\"fa-solid fa-mask fa-fw\"></i>';\n        break;\n      case '支配度':\n        icon = '<i class=\"fa-solid fa-crown fa-fw\"></i>';\n        break;\n      case '依赖度':\n        icon = '<i class=\"fa-solid fa-link fa-fw\"></i>';\n        break;\n      case '羞耻度':\n        icon = '<i class=\"fa-solid fa-face-flushed fa-fw\"></i>';\n        break;\n      case '服从度':\n        icon = '<i class=\"fa-solid fa-gavel fa-fw\"></i>';\n        break;\n      case '声誉':\n        icon = '<i class=\"fa-solid fa-star fa-fw\"></i>';\n        break;\n      default:\n        icon = '<i class=\"fa-solid fa-sliders fa-fw\"></i>';\n    }\n\n    // 变化显示\n    let changeDisplay = '';\n    if (changeValue && changeValue !== '±0') {\n      const isPositive = changeValue.startsWith('+');\n      changeDisplay = `<span class=\"status-change ${isPositive ? 'positive' : 'negative'}\">${changeValue}</span>`;\n    }\n\n    // 原因显示\n    let reasonDisplay = '';\n    if (reason && reason !== '无') {\n      reasonDisplay = `<span class=\"status-reason\">${reason}</span>`;\n    }\n\n    // 阶段显示\n    let stageDisplay = '';\n    if (stage && stage.trim() !== '') {\n      stageDisplay = `<span class=\"relation-stage\">${stage}</span>`;\n    }\n\n    return `<div class=\"status-item relation-parameter\" data-parameter-type=\"${key}\">\n              <div class=\"status-header\">\n                <span class=\"status-label\">${icon} ${key}</span>\n                ${stageDisplay}\n              </div>\n              ${createProgressBar(currentValue, maxValue, color)}\n              <div class=\"status-footer\">\n                <div class=\"status-details-row\">\n                  <span class=\"status-value\">${currentValue}/${maxValue}</span>\n                  ${changeDisplay} ${reasonDisplay}\n                </div>\n              </div>\n            </div>`;\n  }\n\n  // 根据分类选择渲染函数\n  function renderItemByCategory(category, item) {\n    switch (category) {\n      case 'ST':\n        return renderSceneTimeItem(item);\n      case 'CP':\n        return renderCharacterProfileItem(item);\n      case 'CR':\n        return renderResourcesInventoryItem(item);\n      case 'CV':\n        return renderVitalsGaugesItem(item);\n      case 'CS':\n        return renderConditionDescriptorsItem(item);\n      case 'RP': // 添加RP渲染函数\n        return renderRelationshipParameterItem(item);\n      case 'AE':\n        return renderActivityCountersItem(item);\n      case 'WP':\n        return renderWorldPlotItem(item);\n      case 'MI':\n        return renderMetaInfoItem(item);\n      default:\n        // 通用渲染\n        return `<div class=\"status-item\">\n                  <div class=\"status-header\">\n                    <span class=\"status-label\">${item.key}</span>\n                  </div>\n                  <div class=\"status-value\">${item.values.flat().join(' ')}</div>\n                </div>`;\n    }\n  }\n\n  // 创建节标题\n  function createSectionTitle(category) {\n    const mapping = CATEGORY_MAPPING[category] || { name: category, icon: 'fa-circle-info' };\n    return `<div class=\"status-section-title\" data-category=\"${category}\">\n              <div class=\"status-section-toggle\">\n                <i class=\"fa-solid fa-chevron-down collapse-icon\"></i>\n              </div>\n              <i class=\"fa-solid ${mapping.icon} fa-fw status-section-icon\"></i> ${mapping.name}\n            </div>`;\n  }\n\n  // 加载样式\n  async function extract_style() {\n    // 这里可以从Lorebook中加载自定义样式\n    // 现在先使用默认样式\n    return default_style;\n  }\n\n  async function update() {\n    const old_style = style;\n    style = await extract_style();\n    return old_style !== style;\n  }\n  render_1.update = update;\n\n  // 提取状态栏元素\n  function extract_statusbar_element(text) {\n    try {\n      // 解析状态栏文本\n      const parsedData = parseStatusBarText(text);\n      if (isEmpty(parsedData.categories)) {\n        console.log('[状态栏] 解析结果为空，不渲染状态栏');\n        return null;\n      }\n\n      // 创建主容器\n      const $div = $('<div class=\"status-bar-render-container\">');\n\n      // 添加样式\n      if (style) {\n        $div.append(`<style>${style}</style>`);\n      }\n\n      // 创建状态栏容器\n      const container = document.createElement('div');\n      container.className = 'status-bar-container';\n\n      // 首先处理场景与时间 (ST)，显示在顶部\n      if (parsedData.categories['ST']) {\n        const topInfoRow = document.createElement('div');\n        topInfoRow.className = 'status-top-info';\n\n        parsedData.categories['ST'].forEach(item => {\n          if (['时间', '当前地点', '天气'].includes(item.key)) {\n            topInfoRow.innerHTML += renderItemByCategory('ST', item);\n          }\n        });\n\n        if (topInfoRow.innerHTML.trim() !== '') {\n          container.appendChild(topInfoRow);\n        }\n      }\n\n      // 按顺序处理其他分类，添加RP到categoryOrder中\n      const categoryOrder = ['CP', 'CR', 'CV', 'RP', 'CS', 'AE', 'WP', 'MI'];\n\n      // 处理剩余分类\n      categoryOrder.forEach(category => {\n        if (parsedData.categories[category] && parsedData.categories[category].length > 0) {\n          const section = document.createElement('div');\n          section.className = `status-section ${category.toLowerCase()}-section`;\n          section.innerHTML = createSectionTitle(category);\n\n          const contentDiv = document.createElement('div');\n          contentDiv.className = 'status-section-content';\n          if (!option.option.default_expanded) {\n            contentDiv.classList.add('collapsed');\n          }\n\n          parsedData.categories[category].forEach(item => {\n            contentDiv.innerHTML += renderItemByCategory(category, item);\n          });\n\n          section.appendChild(contentDiv);\n          container.appendChild(section);\n        }\n      });\n\n      // 处理未知分类\n      const knownCategories = ['ST', ...categoryOrder];\n      Object.keys(parsedData.categories).forEach(category => {\n        if (!knownCategories.includes(category) && parsedData.categories[category].length > 0) {\n          const section = document.createElement('div');\n          section.className = `status-section unknown-section`;\n          section.innerHTML = `<div class=\"status-section-title\" data-category=\"${category}\">\n                                <div class=\"status-section-toggle\">\n                                  <i class=\"fa-solid fa-chevron-down collapse-icon\"></i>\n                                </div>\n                                <i class=\"fa-solid fa-question fa-fw status-section-icon\"></i> ${category}\n                               </div>`;\n\n          const contentDiv = document.createElement('div');\n          contentDiv.className = 'status-section-content';\n          if (!option.option.default_expanded) {\n            contentDiv.classList.add('collapsed');\n          }\n\n          parsedData.categories[category].forEach(item => {\n            // 使用通用渲染\n            contentDiv.innerHTML += `<div class=\"status-item\">\n                                    <div class=\"status-header\">\n                                      <span class=\"status-label\">${item.key}</span>\n                                    </div>\n                                    <div class=\"status-value\">${item.values.flat().join(' ')}</div>\n                                  </div>`;\n          });\n\n          section.appendChild(contentDiv);\n          container.appendChild(section);\n        }\n      });\n\n      $div.append(container);\n      return $div[0];\n    } catch (error) {\n      console.error('[状态栏] 渲染状态栏时发生错误:', error);\n      return null;\n    }\n  }\n  render_1.extract_statusbar_element = extract_statusbar_element;\n})(render || (render = {}));\n\n// 渲染单条消息\nasync function renderOneMessage(message_id) {\n  try {\n    const message = (await getChatMessages(message_id))[0].message;\n    const match = message.match(status_regex);\n    if (!match) {\n      return;\n    }\n\n    const statusBarContent = match[1];\n\n    // 解析状态栏数据\n    const parsedData = parseStatusBarText(statusBarContent);\n\n    // 如果解析到了数据，保存到聊天变量\n    if (parsedData && Object.keys(parsedData.categories).length > 0) {\n      // 异步保存数据，不阻塞渲染流程\n      saveCharacterDataToVariables(parsedData).catch(err => {\n        console.error('[状态栏] 保存角色数据时出错:', err);\n      });\n    }\n\n    const $statusbar_element = render.extract_statusbar_element(statusBarContent);\n    const $mes_text = retrieveDisplayedMessage(message_id);\n\n    // 删除现有的状态栏\n    $mes_text.find('.status-bar-render-container').remove();\n\n    // 添加新的状态栏\n    if ($statusbar_element) {\n      $mes_text.append($statusbar_element);\n\n      // 添加事件处理，确保传入jQuery对象\n      attachEventHandlers($($statusbar_element));\n    }\n  } catch (error) {\n    console.error('[状态栏] 渲染消息时出错:', error);\n  }\n}\n\n// 渲染所有消息\nasync function renderAllMessages() {\n  $('#chat', window.parent.document)\n    .children(\".mes[is_user='false'][is_system='false']\")\n    .each((_index, node) => {\n      renderOneMessage(Number(node.getAttribute('mesid')));\n    });\n}\n\n// 附加事件处理器\nfunction attachEventHandlers($element) {\n  // 为剧情选项添加点击事件\n  $element.find('.plot-option-item, .world-item-entry').on('click', function () {\n    if ($(this).closest('.interactive-list').length > 0) {\n      const optionText = $(this).text().trim();\n      console.log('[状态栏] 选择选项:', optionText);\n\n      // WP可触发设置下，将内容直接填入发送框\n      if (option.option?.wp_triggerable && $(this).closest('.world-item').length > 0) {\n        console.log('[状态栏] 触发WP条目:', optionText);\n        triggerSlash(`/setinput ${optionText}`);\n        return;\n      }\n\n      // 原有的逻辑\n      triggerSlash(`/setinput ${optionText}`);\n    }\n  });\n\n  // 为地点选项添加点击事件\n  $element.find('.status-locations li').on('click', function () {\n    const locationText = $(this).text().trim();\n    console.log('[状态栏] 选择地点:', locationText);\n    triggerSlash(`/setinput {{User}}决定前往: ${locationText}`);\n  });\n\n  // 为新闻和周边事件添加点击事件\n  $element.find('.status-news li, .status-nearby-events li').on('click', function () {\n    const newsText = $(this).text().trim();\n    console.log('[状态栏] 关注事件:', newsText);\n\n    // WP可触发设置下，简化为直接填入文本\n    if (option.option?.wp_triggerable) {\n      triggerSlash(`/setinput ${newsText}`);\n    } else {\n      triggerSlash(`/setinput {{User}}对\"${newsText}\"表示关注`);\n    }\n  });\n\n  // 为折叠按钮添加点击事件\n  $element.find('.status-section-title').on('click', function () {\n    const $content = $(this).siblings('.status-section-content');\n    $content.toggleClass('collapsed');\n\n    // 更新折叠图标\n    const $icon = $(this).find('.collapse-icon');\n    if ($content.hasClass('collapsed')) {\n      $icon.removeClass('fa-chevron-down').addClass('fa-chevron-right');\n    } else {\n      $icon.removeClass('fa-chevron-right').addClass('fa-chevron-down');\n    }\n  });\n\n  // 初始化折叠图标状态\n  $element.find('.status-section-content').each(function () {\n    const $content = $(this);\n    const $icon = $content.siblings('.status-section-title').find('.collapse-icon');\n\n    if ($content.hasClass('collapsed')) {\n      $icon.removeClass('fa-chevron-down').addClass('fa-chevron-right');\n    } else {\n      $icon.removeClass('fa-chevron-right').addClass('fa-chevron-down');\n    }\n  });\n}\n\n// 错误捕获包装器\nfunction errorCatched(fn) {\n  return (...args) => {\n    try {\n      const result = fn(...args);\n      if (result instanceof Promise) {\n        return result.catch(error => {\n          console.error(`[状态栏] 错误:`, error);\n          triggerSlash(`/echo severity=error [状态栏]${error.stack ? error.stack : error.name + ': ' + error.message}`);\n        });\n      }\n      return result;\n    } catch (error) {\n      console.error(`[状态栏] 错误:`, error);\n      triggerSlash(`/echo severity=error [状态栏]${error.stack ? error.stack : error.name + ': ' + error.message}`);\n      return undefined;\n    }\n  };\n}\n\n// 创建菜单按钮函数\nfunction createMenuButton() {\n  try {\n    const parentDoc = window.parent.document;\n\n    // 检查按钮是否已存在\n    let $button = $(`#${BUTTON_ID}`, parentDoc);\n\n    // 如果按钮存在但不在扩展菜单中，删除它\n    if ($button.length > 0 && !$button.closest('#extensionsMenu').length) {\n      console.log('[状态栏] 移除旧按钮实例');\n      $button.remove();\n      $button = $(`#${BUTTON_ID}`, parentDoc);\n    }\n\n    // 如果按钮不存在，创建并插入\n    if ($button.length === 0) {\n      // 添加样式\n      addButtonStyles();\n\n      const buttonHtml = `\n        <div id=\"${BUTTON_ID}\" class=\"list-group-item flex-container flexGap5 interactable\" \n             title=\"${BUTTON_TOOLTIP}\" tabIndex=\"0\">\n          <i class=\"${BUTTON_ICON}\"></i>\n          <span>${BUTTON_TEXT}</span>\n        </div>\n      `;\n\n      const $extensionsMenu = $('#extensionsMenu', parentDoc);\n\n      if ($extensionsMenu.length) {\n        try {\n          $extensionsMenu.append(buttonHtml);\n          console.log('[状态栏] 按钮已插入扩展菜单');\n\n          // 绑定点击事件\n          $(parentDoc)\n            .off(`click.${BUTTON_ID}`)\n            .on(`click.${BUTTON_ID}`, `#${BUTTON_ID}`, event => {\n              event.preventDefault();\n              showStatusBarManager();\n            });\n        } catch (e) {\n          console.error('[状态栏] 无法将按钮插入扩展菜单', e);\n        }\n      } else {\n        console.warn('[状态栏] 未找到扩展菜单 (#extensionsMenu)');\n      }\n    }\n  } catch (error) {\n    console.error('[状态栏] 创建菜单按钮时出错:', error);\n  }\n}\n\n// 添加按钮样式\nfunction addButtonStyles() {\n  const parentDoc = window.parent.document;\n\n  if ($('#status-bar-manager-styles', parentDoc).length === 0) {\n    const styles = `\n      #${BUTTON_ID} { \n        cursor: pointer;\n      }\n      #${BUTTON_ID}.active {\n        background-color: #6a4a7e !important;\n        color: #fff !important;\n      }\n      #${BUTTON_ID}.active i {\n        color: #fff !important;\n      }\n      \n      .preset-item {\n        margin: 5px 0;\n        padding: 8px 12px;\n        background-color: #f5f5f5;\n        border-radius: 4px;\n        display: flex;\n        justify-content: space-between;\n        align-items: flex-start;\n        flex-wrap: wrap;\n        position: relative;\n      }\n      \n      .preset-item:hover {\n        background-color: #eaeaea;\n      }\n      \n      .dark-mode .preset-item {\n        background-color: #3a3a3a;\n        color: #ddd;\n      }\n      \n      .dark-mode .preset-item:hover {\n        background-color: #444;\n      }\n      \n      .preset-info {\n        flex: 1;\n        margin-right: 10px;\n      }\n      \n      .preset-actions {\n        display: flex;\n        gap: 8px;\n        z-index: 10;\n        position: relative;\n      }\n      \n      .preset-action-btn {\n        background: none;\n        border: none;\n        color: #666;\n        cursor: pointer;\n        padding: 2px 5px;\n        font-size: 14px;\n        border-radius: 3px;\n        transition: background-color 0.2s;\n        z-index: 15; /* 提高按钮z-index，确保可点击 */\n        position: relative;\n      }\n      \n      .preset-action-btn:hover {\n        background-color: rgba(0,0,0,0.1);\n      }\n      \n      .dark-mode .preset-action-btn {\n        color: #aaa;\n      }\n      \n      .dark-mode .preset-action-btn:hover {\n        background-color: rgba(255,255,255,0.1);\n      }\n      \n      .category-group {\n        margin-bottom: 15px;\n      }\n      \n      .category-title {\n        font-weight: 500;\n        margin-bottom: 8px;\n        display: flex;\n        align-items: center;\n        gap: 8px;\n      }\n      \n      .category-title i {\n        opacity: 0.7;\n      }\n      \n      .entry-list {\n        margin-left: 12px;\n      }\n      \n      .entry-item {\n        display: flex;\n        align-items: center;\n        padding: 4px 8px;\n        border-radius: 4px;\n        margin: 3px 0;\n      }\n      \n      .entry-item:hover {\n        background-color: rgba(0,0,0,0.05);\n      }\n      \n      .dark-mode .entry-item:hover {\n        background-color: rgba(255,255,255,0.05);\n      }\n      \n      .entry-checkbox {\n        margin-right: 8px;\n      }\n      \n      .tab-buttons {\n        display: flex;\n        margin-bottom: 15px;\n        border-bottom: 1px solid #ddd;\n      }\n      \n      .dark-mode .tab-buttons {\n        border-bottom-color: #444;\n      }\n      \n      .tab-button {\n        padding: 8px 15px;\n        background: none;\n        border: none;\n        border-bottom: 2px solid transparent;\n        cursor: pointer;\n        transition: all 0.2s;\n        margin-right: 10px;\n        color: #666;\n      }\n      \n      .tab-button.active {\n        border-bottom-color: #3a7bd5;\n        color: #3a7bd5;\n      }\n      \n      .dark-mode .tab-button {\n        color: #aaa;\n      }\n      \n      .dark-mode .tab-button.active {\n        border-bottom-color: #5a97e5;\n        color: #5a97e5;\n      }\n      \n      .tab-content {\n        display: none;\n      }\n      \n      .tab-content.active {\n        display: block;\n      }\n      \n      .preset-details {\n        width: 100%;\n        background-color: #444;\n        border-radius: 4px;\n        padding: 10px;\n        margin-top: 10px;\n        position: relative;\n        z-index: 5;\n      }\n      \n      .preset-entry-item {\n        display: flex;\n        align-items: center;\n        padding: 4px 8px;\n        margin: 2px 0;\n        border-radius: 3px;\n      }\n      \n      .preset-entry-item:hover {\n        background-color: rgba(0,0,0,0.15);\n      }\n      \n      .dark-mode .preset-entry-item:hover {\n        background-color: rgba(255,255,255,0.05);\n      }\n      \n      .preset-entry-checkbox {\n        margin-right: 8px;\n      }\n      \n      .preset-entry-category {\n        margin-top: 8px;\n        margin-bottom: 4px;\n        font-size: 12px;\n        font-weight: 500;\n        color: #ccc;\n        padding-left: 4px;\n        border-left: 2px solid #888;\n      }\n      \n      .dark-mode .preset-entry-category {\n        color: #ddd;\n        border-left-color: #aaa;\n      }\n      \n      .toggle-preset-details-btn {\n        z-index: 15; /* 设置z-index确保按钮可点击 */\n        position: relative;\n        background-color: #333 !important;\n        border-radius: 3px;\n        padding: 2px 6px !important;\n      }\n      \n      .toggle-preset-details-btn:hover {\n        color: #fff !important;\n        background-color: #444 !important;\n      }\n      \n      .preset-entries-list {\n        max-height: 300px;\n        overflow-y: auto;\n        padding-right: 5px;\n      }\n      \n      /* 角色数据相关样式 */\n      .character-data-container {\n        display: flex;\n        height: 65vh; /* 增加高度 */\n        border: 1px solid #444;\n        border-radius: 6px;\n        overflow: hidden;\n        margin-top: 10px;\n      }\n      \n      .character-data-sidebar {\n        width: 30%;\n        background-color: #2d2d2d;\n        border-right: 1px solid #444;\n        display: flex;\n        flex-direction: column;\n      }\n      \n      .sidebar-header {\n        padding: 12px 16px;\n        border-bottom: 1px solid #444;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n      }\n      \n      .sidebar-header h4 {\n        margin: 0;\n        font-size: 15px;\n        color: #ddd;\n      }\n      \n      .refresh-btn {\n        width: 24px;\n        height: 24px;\n        background-color: #3a3a3a;\n        border-radius: 50%;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        cursor: pointer;\n        transition: all 0.2s;\n      }\n      \n      .refresh-btn:hover {\n        background-color: #4a4a4a;\n      }\n      \n      .refresh-btn i {\n        color: #aaa;\n      }\n      \n      .character-list {\n        flex: 1;\n        overflow-y: auto;\n        padding: 8px;\n      }\n      \n      .character-list-item {\n        padding: 10px 12px;\n        border-radius: 5px;\n        margin-bottom: 8px;\n        cursor: pointer;\n        transition: all 0.2s;\n        background-color: #333;\n        color: #ddd;\n      }\n      \n      .character-list-item:hover {\n        background-color: #3a3a3a;\n      }\n      \n      .character-list-item.active {\n        background-color: #3a7bd5;\n        color: #fff;\n      }\n      \n      .loading-text {\n        text-align: center;\n        color: #777;\n        padding: 20px 0;\n      }\n      \n      .character-data-content {\n        flex: 1;\n        padding: 16px;\n        background-color: #222;\n        overflow-y: auto;\n        max-height: 100%; /* 确保内容区域可以滚动 */\n      }\n      \n      .empty-state {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n        height: 100%;\n        color: #777;\n      }\n      \n      .empty-state p {\n        margin-top: 10px;\n        font-style: italic;\n      }\n      \n      .character-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding-bottom: 12px;\n        margin-bottom: 16px;\n        border-bottom: 1px solid #444;\n      }\n      \n      .character-header h3 {\n        margin: 0;\n        font-size: 18px;\n        color: #ddd;\n      }\n      \n      .character-actions {\n        display: flex;\n        gap: 8px;\n      }\n      \n      .character-action-btn {\n        border: none;\n        padding: 6px 12px;\n        border-radius: 4px;\n        cursor: pointer;\n        font-size: 13px;\n        transition: all 0.2s;\n      }\n      \n      .save-btn {\n        background-color: #3a7bd5;\n        color: #fff;\n      }\n      \n      .save-btn:hover {\n        background-color: #4a8ce5;\n      }\n      \n      .delete-btn {\n        background-color: #9e3a3a;\n        color: #fff;\n      }\n      \n      .delete-btn:hover {\n        background-color: #ae4a4a;\n      }\n      \n      .character-section {\n        background-color: #2a2a2a;\n        border-radius: 6px;\n        padding: 12px 16px;\n        margin-bottom: 16px;\n        max-height: none; /* 移除最大高度限制 */\n        overflow: visible; /* 确保内容可见 */\n      }\n      \n      .character-section h4 {\n        margin: 0 0 12px 0;\n        font-size: 15px;\n        color: #bbb;\n      }\n      \n      .section-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-bottom: 12px;\n      }\n      \n      .add-param-btn {\n        border: none;\n        background-color: #40634e;\n        color: white;\n        padding: 4px 8px;\n        border-radius: 3px;\n        font-size: 12px;\n        cursor: pointer;\n      }\n      \n      .add-param-btn:hover {\n        background-color: #4d7a60;\n      }\n      \n      .character-fields {\n        display: grid;\n        grid-template-columns: 1fr 1fr;\n        gap: 12px;\n      }\n      \n      .character-field {\n        margin-bottom: 8px;\n      }\n      \n      .character-field label {\n        display: block;\n        margin-bottom: 5px;\n        color: #aaa;\n        font-size: 13px;\n      }\n      \n      .character-input, .character-textarea, .character-select {\n        width: 100%;\n        padding: 8px;\n        background-color: #333;\n        border: 1px solid #555;\n        color: #ddd;\n        border-radius: 4px;\n        font-size: 14px;\n      }\n      \n      .character-input:focus, .character-textarea:focus, .character-select:focus {\n        outline: none;\n        border-color: #3a7bd5;\n      }\n      \n      .character-textarea {\n        resize: vertical;\n      }\n      \n      .relationship-params-container {\n        display: grid;\n        grid-template-columns: 1fr;\n        gap: 12px;\n        max-height: none; /* 移除高度限制 */\n        overflow-y: visible; /* 允许内容溢出 */\n      }\n      \n      .relationship-param {\n        background-color: #333;\n        border-radius: 4px;\n        padding: 10px 14px;\n        position: relative;\n      }\n      \n      .param-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-bottom: 10px;\n      }\n      \n      .param-name {\n        font-weight: 500;\n        color: #ccc;\n      }\n      \n      .param-remove {\n        background: none;\n        border: none;\n        color: #999;\n        cursor: pointer;\n        padding: 2px 6px;\n        font-size: 14px;\n      }\n      \n      .param-remove:hover {\n        color: #e55;\n      }\n      \n      .param-fields {\n        display: grid;\n        grid-template-columns: 1fr 1fr;\n        gap: 10px;\n      }\n      \n      .character-no-data {\n        text-align: center;\n        padding: 20px;\n        color: #888;\n        font-style: italic;\n      }\n      \n      /* 确保弹窗可以滚动查看所有内容 */\n      #${POPUP_ID} {\n        max-height: 85vh;\n        overflow-y: auto;\n      }\n      \n      /* 确保角色参数列表能容纳更多内容 */\n      #relationship-params-container {\n        max-height: none;\n        padding-bottom: 10px;\n      }\n      \n      /* 调整输入框大小 */\n      .character-field input, \n      .character-field textarea {\n        box-sizing: border-box;\n        width: 100%;\n      }\n      \n      /* 修复输入框样式 */\n      .character-field {\n        margin-bottom: 12px;\n      }\n      \n      /* 确保内容区可以滚动 */\n      .tab-content {\n        overflow: visible;\n      }\n      \n      /* 设置参数表现的最大高度并添加滚动 */\n      #character-data-tab .relationship-params-container {\n        max-height: 350px;\n        overflow-y: auto;\n        padding-right: 5px;\n      }\n      \n      /* 应用更改按钮样式 */\n      .apply-changes-container {\n        margin-top: 20px;\n        padding: 15px;\n        background-color: rgba(64, 99, 78, 0.1);\n        border-radius: 6px;\n        text-align: center;\n      }\n      \n      #apply-entries-changes-btn {\n        background: #40634e;\n        color: white;\n        border: none;\n        padding: 8px 20px;\n        border-radius: 4px;\n        cursor: pointer;\n        font-size: 15px;\n        transition: all 0.2s;\n      }\n      \n      #apply-entries-changes-btn:hover {\n        background: #4d7a60;\n        transform: translateY(-2px);\n      }\n      \n      #apply-entries-changes-btn:disabled {\n        background: #304a3b;\n        cursor: not-allowed;\n        transform: none;\n      }\n      \n      .dark-mode #apply-entries-changes-btn {\n        background: #40634e;\n        color: white;\n      }\n      \n      .dark-mode #apply-entries-changes-btn:hover {\n        background: #4d7a60;\n      }\n      \n      .dark-mode #apply-entries-changes-btn:disabled {\n        background: #304a3b;\n        color: #aaa;\n      }\n      \n      .apply-changes-container p {\n        font-size: 12px;\n        color: #888;\n        margin-top: 8px;\n        font-style: italic;\n      }\n      \n      .dark-mode .apply-changes-container {\n        background-color: rgba(64, 99, 78, 0.15);\n      }\n      \n      .dark-mode .apply-changes-container p {\n        color: #aaa;\n      }\n    `;\n    $('head', parentDoc).append(`<style id=\"status-bar-manager-styles\">${styles}</style>`);\n  }\n}\n\n// 获取保存的预设\nfunction getSavedPresets() {\n  try {\n    const savedPresets = localStorage.getItem(PRESET_STORAGE_KEY);\n    // 确保返回的是数组\n    const presets = savedPresets ? JSON.parse(savedPresets) : [];\n\n    // 验证格式\n    if (!Array.isArray(presets)) {\n      console.error('[状态栏] 预设数据格式错误，重置为空数组');\n      return [];\n    }\n\n    return presets;\n  } catch (error) {\n    console.error('[状态栏] 获取配置失败:', error);\n    return [];\n  }\n}\n\n// 保存预设\nfunction savePreset(name, enabledEntries) {\n  try {\n    const presets = getSavedPresets();\n\n    // 确保enabledEntries中的UID是数字类型\n    const normalizedEntries = enabledEntries.map(uid => parseInt(uid));\n    console.log('[状态栏] 保存配置:', name, '包含启用条目:', normalizedEntries);\n\n    // 检查是否已经存在同名配置\n    const existingIndex = presets.findIndex(p => p.name === name);\n\n    if (existingIndex !== -1) {\n      // 更新现有配置\n      presets[existingIndex] = { name, enabledEntries: normalizedEntries, timestamp: Date.now() };\n    } else {\n      // 添加新配置，但确保不超过最大数量\n      if (presets.length >= MAX_PRESETS) {\n        alert(`已达到配置数量上限 (${MAX_PRESETS})，请先删除一些配置。`);\n        return false;\n      }\n      presets.push({ name, enabledEntries: normalizedEntries, timestamp: Date.now() });\n    }\n\n    localStorage.setItem(PRESET_STORAGE_KEY, JSON.stringify(presets));\n    return true;\n  } catch (error) {\n    console.error('[状态栏] 保存配置失败:', error);\n    return false;\n  }\n}\n\n// 删除预设\nfunction deletePreset(name) {\n  try {\n    const presets = getSavedPresets();\n\n    // 日志记录原始预设数量\n    console.log(`[状态栏] 删除前预设数量: ${presets.length}`);\n\n    // 确保name是字符串并进行严格比较\n    const exactName = String(name).trim();\n    const newPresets = presets.filter(p => String(p.name).trim() !== exactName);\n\n    // 日志记录过滤后预设数量\n    console.log(`[状态栏] 删除后预设数量: ${newPresets.length}`);\n\n    // 保存回本地存储\n    localStorage.setItem(PRESET_STORAGE_KEY, JSON.stringify(newPresets));\n\n    // 确认是否成功删除\n    const checkPresets = getSavedPresets();\n    const stillExists = checkPresets.some(p => String(p.name).trim() === exactName);\n    console.log(`[状态栏] 验证删除: ${stillExists ? '失败' : '成功'}`);\n\n    return !stillExists;\n  } catch (error) {\n    console.error('[状态栏] 删除配置失败:', error);\n    return false;\n  }\n}\n\n// 应用预设\nasync function applyPreset(preset) {\n  try {\n    console.log('[状态栏] 开始应用配置:', preset.name, '包含', preset.enabledEntries.length, '个启用的条目');\n\n    // 获取所有条目\n    const entries = await getLorebookEntries(lorebook_name);\n    console.log('[状态栏] 获取到世界书条目总数:', entries.length);\n\n    // 创建更新后的条目数组\n    const updatedEntries = [];\n    let modifiedCount = 0;\n\n    entries.forEach(entry => {\n      // 创建条目的副本\n      const updatedEntry = { ...entry };\n\n      // 忽略设置条目\n      if (entry.comment.startsWith('设置-')) {\n        updatedEntries.push(updatedEntry);\n        return;\n      }\n\n      // 检查条目是否在预设中启用 (确保使用数字类型比较)\n      const entryUid = parseInt(entry.uid);\n      const shouldBeEnabled = preset.enabledEntries.includes(entryUid);\n\n      // 只有在启用状态需要改变时才修改\n      if (entry.enabled !== shouldBeEnabled) {\n        updatedEntry.enabled = shouldBeEnabled;\n        modifiedCount++;\n        console.log(`[状态栏] 条目状态变更: \"${entry.comment}\" (UID: ${entry.uid}) ${entry.enabled ? '禁用' : '启用'}`);\n      }\n\n      updatedEntries.push(updatedEntry);\n    });\n\n    console.log(`[状态栏] 将更新 ${modifiedCount} 个条目的状态`);\n\n    if (modifiedCount > 0) {\n      // 更新世界书 - 确保每个条目都有uid\n      await setLorebookEntries(lorebook_name, updatedEntries);\n      console.log('[状态栏] 世界书更新成功');\n    } else {\n      console.log('[状态栏] 没有条目需要更新，预设可能已经应用');\n    }\n\n    return true;\n  } catch (error) {\n    console.error('[状态栏] 应用配置失败:', error);\n    return false;\n  }\n}\n\n// 显示状态栏管理器弹窗\nasync function showStatusBarManager() {\n  try {\n    // 获取状态栏世界书的所有条目\n    const entries = await getLorebookEntries(lorebook_name);\n\n    // 对条目进行排序处理\n    entries.sort((a, b) => {\n      // 首先检查是否设置条目，如果是，放到最后\n      if (a.comment.startsWith('设置-') && !b.comment.startsWith('设置-')) return 1;\n      if (!a.comment.startsWith('设置-') && b.comment.startsWith('设置-')) return -1;\n\n      // 尝试使用display_index排序\n      if (a.display_index !== undefined && b.display_index !== undefined) {\n        return a.display_index - b.display_index;\n      }\n\n      // 如果没有display_index，则按注释文本排序\n      return a.comment.localeCompare(b.comment, 'zh-CN');\n    });\n\n    // 按类别分组条目，忽略设置条目\n    const entriesByCategory = entries\n      .filter(entry => !entry.comment.startsWith('设置-'))\n      .reduce((acc, entry) => {\n        // 尝试从注释中提取类别，格式如: [ST|时间] 的 ST 部分\n        let category = 'Other';\n        const categoryMatch = entry.comment.match(/\\[(\\w+)\\|/);\n        if (categoryMatch) {\n          category = categoryMatch[1];\n        }\n\n        if (!acc[category]) {\n          acc[category] = [];\n        }\n        acc[category].push(entry);\n        return acc;\n      }, {});\n\n    // 按类别优先级排序\n    const categoryOrder = ['ST', 'CP', 'CR', 'CV', 'RP', 'CS', 'AE', 'WP', 'MI', 'Other'];\n    const sortedEntriesByCategory = {};\n\n    // 按照预定义顺序填充分类\n    categoryOrder.forEach(category => {\n      if (entriesByCategory[category] && entriesByCategory[category].length > 0) {\n        sortedEntriesByCategory[category] = entriesByCategory[category];\n      }\n    });\n\n    // 添加任何其他未在预定义顺序中的分类\n    Object.keys(entriesByCategory).forEach(category => {\n      if (!sortedEntriesByCategory[category]) {\n        sortedEntriesByCategory[category] = entriesByCategory[category];\n      }\n    });\n\n    // 获取保存的预设\n    const savedPresets = getSavedPresets();\n\n    // 创建弹窗\n    createStatusBarManagerPopup(sortedEntriesByCategory, savedPresets);\n  } catch (error) {\n    console.error('[状态栏] 显示状态栏管理器失败:', error);\n  }\n}\n\n// 创建状态栏管理器弹窗\nfunction createStatusBarManagerPopup(entriesByCategory, presets) {\n  // 清理已有弹窗\n  $(`#${POPUP_ID}`, window.parent.document).remove();\n  $(`#${POPUP_ID}-overlay`, window.parent.document).remove();\n\n  // 确保entriesByCategory和presets存在\n  entriesByCategory = entriesByCategory || {};\n  presets = presets || [];\n\n  // 确保presets是数组\n  if (!Array.isArray(presets)) {\n    console.warn('[状态栏] 预设数据不是数组，已重置为空数组');\n    presets = [];\n  }\n\n  // 检查预设内容完整性\n  presets = presets.filter(preset => {\n    if (!preset || typeof preset !== 'object' || !preset.name) {\n      console.warn('[状态栏] 发现无效预设，将被过滤:', preset);\n      return false;\n    }\n    // 确保enabledEntries是数组\n    if (!Array.isArray(preset.enabledEntries)) {\n      console.warn(`[状态栏] 预设 \"${preset.name}\" 的enabledEntries不是数组，已修复`);\n      preset.enabledEntries = [];\n    }\n    return true;\n  });\n\n  // 构建内容\n  const popupContent = `\n    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px; padding-bottom: 10px; border-bottom: 1px solid #444;\">\n      <h3 style=\"margin: 0; color: #e0e0e0; font-weight: 500; font-size: 18px;\">状态栏管理器</h3>\n      <div>\n        <button id=\"close-${POPUP_ID}\" style=\"background: transparent; border: none; color: #aaa; cursor: pointer; font-size: 20px; padding: 0; margin: 0; transition: color 0.2s; vertical-align: middle;\">&times;</button>\n      </div>\n    </div>\n    \n    <div class=\"tab-buttons\">\n      <button class=\"tab-button active\" data-tab=\"entries\">条目管理</button>\n      <button class=\"tab-button\" data-tab=\"presets\">配置管理</button>\n      <button class=\"tab-button\" data-tab=\"character-data\">角色数据</button>\n    </div>\n    \n    <div id=\"${POPUP_ID}-content\" style=\"max-height: 60vh; overflow-y: auto; font-size: 14px; color: #bbb; scrollbar-width: thin; scrollbar-color: #666 #333; padding-bottom: 10px;\">\n      <div class=\"tab-content active\" id=\"entries-tab\">\n        <div style=\"margin-bottom: 15px;\">\n          <button id=\"save-entries-btn\" style=\"background: #3a7bd5; border: none; color: #fff; padding: 6px 12px; border-radius: 4px; cursor: pointer; margin-right: 10px;\">保存为配置</button>\n          <button id=\"toggle-all-btn\" style=\"background: #555; border: none; color: #ddd; padding: 6px 12px; border-radius: 4px; cursor: pointer;\">全选/取消全选</button>\n        </div>\n        \n        ${\n          Object.entries(entriesByCategory).length > 0\n            ? Object.entries(entriesByCategory)\n                .map(([category, categoryEntries]) => {\n                  // 获取类别图标\n                  const categoryInfo = CATEGORY_MAPPING[category] || { name: category, icon: 'fa-circle-info' };\n\n                  return `\n              <div class=\"category-group\" data-category=\"${category}\">\n                <div class=\"category-title\">\n                  <i class=\"fa-solid ${categoryInfo.icon}\"></i>\n                  <span>${categoryInfo.name || category}</span>\n                </div>\n                <div class=\"entry-list\">\n                  ${\n                    Array.isArray(categoryEntries)\n                      ? categoryEntries\n                          .map(\n                            entry => `\n                      <div class=\"entry-item\">\n                        <input type=\"checkbox\" class=\"entry-checkbox\" id=\"entry-${entry.uid}\" \n                          data-uid=\"${entry.uid}\" data-comment=\"${entry.comment}\" ${entry.enabled ? 'checked' : ''}>\n                        <label for=\"entry-${entry.uid}\">${entry.comment}</label>\n                      </div>\n                    `,\n                          )\n                          .join('')\n                      : '<div class=\"entry-item\">没有条目数据</div>'\n                  }\n                </div>\n              </div>\n            `;\n                })\n                .join('')\n            : '<div class=\"empty-state\" style=\"text-align: center; padding: 20px; color: #777;\">没有找到条目</div>'\n        }\n        \n        <!-- 添加应用按钮 -->\n        <div class=\"apply-changes-container\" style=\"margin-top: 20px; padding-top: 15px; border-top: 1px solid #444; text-align: center;\">\n          <button id=\"apply-entries-changes-btn\" style=\"background: #40634e; border: none; color: #fff; padding: 8px 20px; border-radius: 4px; cursor: pointer; font-size: 15px;\">\n            <i class=\"fa-solid fa-check\"></i> 应用更改\n          </button>\n          <p style=\"font-size: 12px; color: #888; margin-top: 8px;\">\n            点击复选框后需点击此按钮保存更改，避免频繁更新导致卡顿\n          </p>\n        </div>\n      </div>\n      \n      <div class=\"tab-content\" id=\"presets-tab\">\n        ${\n          !Array.isArray(presets) || presets.length === 0\n            ? '<p style=\"font-style: italic; color: #999; text-align: center; margin: 20px 0;\">尚未保存任何配置</p>'\n            : `\n            <div style=\"margin-bottom: 10px; font-weight: 500;\">\n              已保存的配置 (${presets.length}/${MAX_PRESETS})\n            </div>\n            ${presets\n              .map(\n                preset => `\n              <div class=\"preset-item\" data-name=\"${preset.name}\">\n                <div class=\"preset-info\">\n                  <div style=\"font-weight: 500; display: flex; align-items: center; justify-content: space-between;\">\n                    ${preset.name}\n                    <button class=\"toggle-preset-details-btn\" style=\"background: none; border: none; color: #aaa; cursor: pointer; padding: 0 5px;\">\n                      <i class=\"fa-solid fa-chevron-down\"></i>\n                    </button>\n                  </div>\n                  <div style=\"font-size: 12px; color: #888;\">\n                    启用条目: ${Array.isArray(preset.enabledEntries) ? preset.enabledEntries.length : 0} 个，\n                    创建: ${new Date(preset.timestamp || Date.now()).toLocaleString()}\n                  </div>\n                </div>\n                <div class=\"preset-actions\">\n                  <button class=\"preset-action-btn apply-preset-btn\" data-name=\"${preset.name}\">\n                    <i class=\"fa-solid fa-check\"></i> 应用\n                  </button>\n                  <button class=\"preset-action-btn delete-preset-btn\" data-name=\"${preset.name}\">\n                    <i class=\"fa-solid fa-trash\"></i>\n                  </button>\n                </div>\n                <div class=\"preset-details\" style=\"display: none; margin-top: 10px; border-top: 1px solid #444; padding-top: 10px;\">\n                  <p style=\"margin: 5px 0; font-size: 12px; color: #888;\">点击展开时加载...</p>\n                </div>\n              </div>\n            `,\n              )\n              .join('')}\n          `\n        }\n      </div>\n\n      <div class=\"tab-content\" id=\"character-data-tab\">\n        <div class=\"character-data-container\">\n          <div class=\"character-data-sidebar\">\n            <div class=\"sidebar-header\">\n              <h4>保存的角色</h4>\n              <div class=\"refresh-btn\" id=\"refresh-character-data-btn\">\n                <i class=\"fa-solid fa-rotate\"></i>\n              </div>\n            </div>\n            <div class=\"character-list\" id=\"character-data-list\">\n              <p class=\"loading-text\">加载中...</p>\n            </div>\n          </div>\n          <div class=\"character-data-content\">\n            <div class=\"empty-state\" id=\"character-data-empty-state\">\n              <i class=\"fa-solid fa-user-slash fa-2x\"></i>\n              <p>请从左侧选择一个角色</p>\n            </div>\n            <div class=\"character-detail\" id=\"character-data-detail\" style=\"display: none;\">\n              <div class=\"character-header\">\n                <h3 id=\"character-name\">角色名称</h3>\n                <div class=\"character-actions\">\n                  <button id=\"save-character-data-btn\" class=\"character-action-btn save-btn\">\n                    <i class=\"fa-solid fa-save\"></i> 保存\n                  </button>\n                  <button id=\"delete-character-data-btn\" class=\"character-action-btn delete-btn\">\n                    <i class=\"fa-solid fa-trash\"></i> 删除\n                  </button>\n                </div>\n              </div>\n              <div class=\"character-sections\">\n                <div class=\"character-section\">\n                  <h4>基本信息</h4>\n                  <div class=\"character-fields basic-info-fields\">\n                    <div class=\"character-field\">\n                      <label for=\"character-age\">年龄</label>\n                      <input type=\"text\" id=\"character-age\" class=\"character-input\">\n                    </div>\n                    <div class=\"character-field\">\n                      <label for=\"character-height\">身高</label>\n                      <input type=\"text\" id=\"character-height\" class=\"character-input\">\n                    </div>\n                    <div class=\"character-field\">\n                      <label for=\"character-traits\">特征</label>\n                      <textarea id=\"character-traits\" class=\"character-textarea\" rows=\"2\"></textarea>\n                    </div>\n                    <div class=\"character-field\">\n                      <label for=\"character-permanent\">永久性状态</label>\n                      <textarea id=\"character-permanent\" class=\"character-textarea\" rows=\"2\"></textarea>\n                    </div>\n                  </div>\n                </div>\n                <div class=\"character-section\">\n                  <div class=\"section-header\">\n                    <h4>关系参数</h4>\n                    <button id=\"add-param-btn\" class=\"add-param-btn\">\n                      <i class=\"fa-solid fa-plus\"></i> 添加参数\n                    </button>\n                  </div>\n                  <div id=\"relationship-params-container\" class=\"relationship-params-container\">\n                    <!-- 动态加载关系参数 -->\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <div style=\"display: flex; justify-content: flex-end; gap: 10px; margin-top: 20px; border-top: 1px solid #444; padding-top: 15px;\">\n      <button id=\"cancel-${POPUP_ID}\" style=\"background: #444; border: none; color: #ddd; cursor: pointer; font-size: 14px; padding: 8px 15px; border-radius: 4px; transition: background-color 0.2s;\">关闭</button>\n    </div>\n  `;\n\n  // 创建弹窗\n  createPopup(popupContent);\n\n  // 绑定事件处理\n  initStatusBarManagerEvents();\n}\n\n// 初始化弹窗事件处理\nfunction initStatusBarManagerEvents() {\n  const parentDoc = window.parent.document;\n  const namespace = '.statusBarManager'; // 定义命名空间\n\n  // 确保移除旧的监听器，以防万一（虽然createPopup时会调用closePopup）\n  $(parentDoc).off(namespace);\n\n  // 标签切换事件\n  $(parentDoc).on(`click${namespace}`, '.tab-button', function () {\n    const tab = $(this).data('tab');\n    $('.tab-button', parentDoc).removeClass('active');\n    $(this).addClass('active');\n    $('.tab-content', parentDoc).removeClass('active');\n    $(`#${tab}-tab`, parentDoc).addClass('active');\n\n    if (tab === 'character-data') {\n      loadCharacterDataList();\n    }\n  });\n\n  // 全选/取消全选按钮事件\n  $(parentDoc).on(`click${namespace}`, '#toggle-all-btn', function () {\n    const $checkboxes = $('.entry-checkbox', parentDoc);\n    const allChecked = $checkboxes.length === $checkboxes.filter(':checked').length;\n    $checkboxes.prop('checked', !allChecked);\n  });\n\n  // 复选框变更事件\n  $(parentDoc).on(`change${namespace}`, '.entry-checkbox', function () {\n    console.log(\n      `[状态栏] 复选框状态变更: UID ${$(this).data('uid')}, 状态: ${$(this).prop('checked') ? '选中' : '未选中'}`,\n    );\n  });\n\n  // 应用更改按钮事件\n  $(parentDoc).on(`click${namespace}`, '#apply-entries-changes-btn', async function () {\n    // ... (代码保持不变)\n    const $btn = $(this);\n    const originalText = $btn.html();\n\n    try {\n      $btn.html('<i class=\"fa-solid fa-spinner fa-spin\"></i> 正在应用...');\n      $btn.prop('disabled', true);\n\n      const entries = await getLorebookEntries(lorebook_name);\n      const checkboxStates = {};\n      $('.entry-checkbox', parentDoc).each(function () {\n        const uid = parseInt($(this).data('uid'));\n        const isEnabled = $(this).prop('checked');\n        checkboxStates[uid] = isEnabled;\n      });\n\n      let updateCount = 0;\n      const updatedEntries = entries.map(entry => {\n        if (entry.comment.startsWith('设置-')) return entry;\n        const uid = parseInt(entry.uid);\n        const newState = checkboxStates[uid];\n        if (newState !== undefined && entry.enabled !== newState) {\n          updateCount++;\n          return { ...entry, enabled: newState };\n        }\n        return entry;\n      });\n\n      if (updateCount > 0) {\n        await setLorebookEntries(lorebook_name, updatedEntries);\n        $btn.html('<i class=\"fa-solid fa-check\"></i> 已应用');\n        setTimeout(() => {\n          $btn.html(originalText);\n          $btn.prop('disabled', false);\n        }, 2000);\n        console.log(`[状态栏] 已批量更新 ${updateCount} 个条目的状态`);\n      } else {\n        $btn.html('<i class=\"fa-solid fa-check\"></i> 无变更');\n        setTimeout(() => {\n          $btn.html(originalText);\n          $btn.prop('disabled', false);\n        }, 2000);\n        console.log('[状态栏] 没有条目需要更新');\n      }\n    } catch (error) {\n      console.error('[状态栏] 应用更改失败:', error);\n      $btn.html('<i class=\"fa-solid fa-times\"></i> 应用失败');\n      setTimeout(() => {\n        $btn.html(originalText);\n        $btn.prop('disabled', false);\n      }, 2000);\n      alert(`应用更改失败: ${error.message}`);\n    }\n  });\n\n  // 保存为配置按钮事件\n  $(parentDoc).on(`click${namespace}`, '#save-entries-btn', function () {\n    // ... (代码保持不变)\n    const name = prompt('请输入配置名称:');\n    if (!name) return;\n    const enabledEntries = [];\n    $('.entry-checkbox:checked', parentDoc).each(function () {\n      enabledEntries.push(parseInt($(this).data('uid')));\n    });\n    if (savePreset(name, enabledEntries)) {\n      alert(`配置 \"${name}\" 已保存。`);\n      closePopup();\n      showStatusBarManager();\n    }\n  });\n\n  // 应用配置按钮事件\n  $(parentDoc).on(`click${namespace}`, '.apply-preset-btn', async function () {\n    // ... (代码保持不变)\n    const presetName = $(this).data('name');\n    const presets = getSavedPresets();\n    const preset = presets.find(p => String(p.name).trim() === String(presetName).trim());\n    if (preset) {\n      if (!Array.isArray(preset.enabledEntries)) {\n        alert('配置格式错误，无法应用');\n        return;\n      }\n      if (confirm(`确定要应用配置 \"${presetName}\" 吗？`)) {\n        $(this).html('<i class=\"fa-solid fa-spinner fa-spin\"></i> 应用中...').prop('disabled', true);\n        try {\n          const success = await applyPreset(preset);\n          if (success) {\n            alert(`配置 \"${presetName}\" 已应用。`);\n            closePopup();\n            await renderAllMessages();\n          } else {\n            $(this).html('<i class=\"fa-solid fa-check\"></i> 应用').prop('disabled', false);\n            alert('应用配置失败，请重试。');\n          }\n        } catch (error) {\n          $(this).html('<i class=\"fa-solid fa-check\"></i> 应用').prop('disabled', false);\n          alert('应用配置时发生错误: ' + error.message);\n        }\n      }\n    } else {\n      alert(`找不到配置 \"${presetName}\"`);\n    }\n  });\n\n  // 删除配置按钮事件\n  $(parentDoc).on(`click${namespace}`, '.delete-preset-btn', function (e) {\n    // ... (代码保持不变)\n    e.preventDefault();\n    e.stopPropagation();\n    const presetName = $(this).data('name');\n    if (confirm(`确定要删除配置 \"${presetName}\" 吗？`)) {\n      try {\n        if (deletePreset(presetName)) {\n          $(`.preset-item[data-name=\"${presetName}\"]`, parentDoc).remove();\n          if ($('.preset-item', parentDoc).length === 0) {\n            $('#presets-tab', parentDoc).html(\n              '<p style=\"font-style: italic; color: #999; text-align: center; margin: 20px 0;\">尚未保存任何配置</p>',\n            );\n          }\n        } else {\n          alert('删除配置失败，请重试。');\n        }\n      } catch (error) {\n        alert(`删除配置时发生错误: ${error.message}`);\n      }\n    }\n  });\n\n  // 展开/折叠详情按钮事件\n  $(parentDoc).on(`click${namespace}`, '.toggle-preset-details-btn', function (e) {\n    e.preventDefault();\n    e.stopPropagation();\n    const $btn = $(this);\n    const $icon = $btn.find('i');\n    const $presetItem = $btn.closest('.preset-item');\n    const $detailsSection = $presetItem.find('.preset-details');\n    const presetName = $presetItem.data('name');\n\n    $detailsSection.toggle();\n\n    if ($detailsSection.is(':visible')) {\n      $icon.removeClass('fa-chevron-down').addClass('fa-chevron-up');\n      $presetItem.attr('data-expanded', 'true');\n      console.log(`[状态栏] 预设详情已展开: \"${presetName}\"`);\n      $detailsSection.html(\n        '<p style=\"text-align: center; margin: 15px 0;\"><i class=\"fa-solid fa-spinner fa-spin\"></i> 加载条目中...</p>',\n      );\n      loadPresetDetails(presetName, $detailsSection);\n    } else {\n      $icon.removeClass('fa-chevron-up').addClass('fa-chevron-down');\n      $presetItem.removeAttr('data-expanded');\n      console.log(`[状态栏] 预设详情已折叠: \"${presetName}\"`);\n    }\n  });\n\n  // 配置条目复选框变更事件\n  $(parentDoc).on(`change${namespace}`, '.preset-entry-checkbox', function () {\n    // ... (代码保持不变)\n    const uid = parseInt($(this).data('uid'));\n    const presetName = $(this).data('preset');\n    const isEnabled = $(this).prop('checked');\n    const presets = getSavedPresets();\n    const presetIndex = presets.findIndex(p => String(p.name).trim() === String(presetName).trim());\n    if (presetIndex === -1) {\n      alert(`无法更新配置: 找不到配置 \"${presetName}\"`);\n      return;\n    }\n    const updatedPreset = { ...presets[presetIndex] };\n    if (!Array.isArray(updatedPreset.enabledEntries)) updatedPreset.enabledEntries = [];\n    if (isEnabled) {\n      if (!updatedPreset.enabledEntries.includes(uid)) updatedPreset.enabledEntries.push(uid);\n    } else {\n      updatedPreset.enabledEntries = updatedPreset.enabledEntries.filter(id => id !== uid);\n    }\n    updatedPreset.timestamp = Date.now();\n    presets[presetIndex] = updatedPreset;\n    try {\n      localStorage.setItem(PRESET_STORAGE_KEY, JSON.stringify(presets));\n      const $presetItem = $(this).closest('.preset-item');\n      $presetItem\n        .find('.preset-info div:nth-child(2)')\n        .text(\n          `启用条目: ${updatedPreset.enabledEntries.length} 个，创建: ${new Date(\n            updatedPreset.timestamp,\n          ).toLocaleString()}`,\n        );\n      console.log(`[状态栏] 配置 \"${presetName}\" 已更新，条目 ${uid} ${isEnabled ? '添加' : '移除'}`);\n    } catch (error) {\n      alert(`更新配置失败: ${error.message}`);\n      $(this).prop('checked', !isEnabled);\n    }\n  });\n\n  // 角色数据相关事件处理 (也使用命名空间)\n  initCharacterDataTabEvents(namespace); // 重命名调用\n}\n\n// 初始化角色数据相关事件处理 - 重命名函数定义\nfunction initCharacterDataTabEvents(namespace) {\n  // 接受命名空间作为参数\n  const parentDoc = window.parent.document;\n\n  // 刷新按钮事件\n  $(parentDoc).on(`click${namespace}`, '#refresh-character-data-btn', function () {\n    loadCharacterDataList();\n  });\n\n  // 角色列表项点击事件\n  $(parentDoc).on(`click${namespace}`, '.character-list-item', function () {\n    const characterName = $(this).data('name');\n    $('.character-list-item', parentDoc).removeClass('active');\n    $(this).addClass('active');\n    loadCharacterDetail(characterName);\n  });\n\n  // 添加参数按钮事件\n  $(parentDoc).on(`click${namespace}`, '#add-param-btn', function () {\n    addEmptyRelationshipParam();\n  });\n\n  // 删除参数按钮事件\n  $(parentDoc).on(`click${namespace}`, '.param-remove', function () {\n    $(this).closest('.relationship-param').remove();\n  });\n\n  // 保存角色数据按钮事件\n  $(parentDoc).on(`click${namespace}`, '#save-character-data-btn', function () {\n    saveCharacterDetailChanges();\n  });\n\n  // 删除角色数据按钮事件\n  $(parentDoc).on(`click${namespace}`, '#delete-character-data-btn', function () {\n    const characterName = $('#character-name', parentDoc).text();\n    if (confirm(`确定要删除角色 \"${characterName}\" 的数据吗？此操作不可撤销。`)) {\n      deleteCharacterData(characterName);\n    }\n  });\n}\n\n// 关闭弹窗函数\nfunction closePopup() {\n  const parentDoc = window.parent.document;\n  const namespace = '.statusBarManager'; // 使用相同的命名空间\n\n  // 移除所有使用该命名空间的事件监听\n  $(parentDoc).off(namespace);\n\n  // 移除DOM元素\n  $(`#${POPUP_ID}`, parentDoc).remove();\n  $(`#${POPUP_ID}-overlay`, parentDoc).remove();\n  $(`#${POPUP_ID}-animation-style`, parentDoc.head).remove();\n}\n\n// 新增异步加载预设详情函数\nasync function loadPresetDetails(presetName, $detailsSection) {\n  try {\n    console.log(`[状态栏] 开始加载预设详情: \"${presetName}\"`);\n\n    // 获取配置\n    const presets = getSavedPresets();\n    const preset = presets.find(p => String(p.name).trim() === String(presetName).trim());\n\n    if (!preset) {\n      $detailsSection.html('<p style=\"color: #f55; margin: 10px 0;\">无法加载配置详情: 配置不存在</p>');\n      return;\n    }\n\n    // 确保enabledEntries是数组\n    if (!Array.isArray(preset.enabledEntries)) {\n      preset.enabledEntries = [];\n      console.warn(`[状态栏] 预设 \"${presetName}\" 的enabledEntries不是数组，已重置为空数组`);\n    }\n\n    // 获取所有条目\n    const entries = await getLorebookEntries(lorebook_name);\n    console.log(`[状态栏] 获取Lorebook条目成功，总数: ${entries.length}`);\n\n    // 先对条目进行排序 - 优先使用display_index，其次使用comment\n    entries.sort((a, b) => {\n      // 首先检查是否设置条目，如果是，放到最后\n      if (a.comment.startsWith('设置-') && !b.comment.startsWith('设置-')) return 1;\n      if (!a.comment.startsWith('设置-') && b.comment.startsWith('设置-')) return -1;\n\n      // 尝试使用display_index排序\n      if (a.display_index !== undefined && b.display_index !== undefined) {\n        return a.display_index - b.display_index;\n      }\n\n      // 如果没有display_index，则按注释文本排序\n      return a.comment.localeCompare(b.comment, 'zh-CN');\n    });\n\n    // 过滤并按类别分组条目\n    const entriesByCategory = {};\n    entries.forEach(entry => {\n      if (entry.comment.startsWith('设置-')) return; // 忽略设置条目\n\n      // 尝试从注释中提取类别，格式如: [ST|时间] 的 ST 部分\n      let category = 'Other';\n      const categoryMatch = entry.comment.match(/\\[(\\w+)\\|/);\n      if (categoryMatch) {\n        category = categoryMatch[1];\n      }\n\n      if (!entriesByCategory[category]) {\n        entriesByCategory[category] = [];\n      }\n\n      // 检查条目是否在配置中启用\n      const isEnabled = preset.enabledEntries.includes(parseInt(entry.uid));\n      entriesByCategory[category].push({\n        ...entry,\n        isInPreset: isEnabled,\n      });\n    });\n\n    // 按类别优先级排序\n    const categoryOrder = ['ST', 'CP', 'CR', 'CV', 'RP', 'CS', 'AE', 'WP', 'MI', 'Other'];\n    const sortedCategories = Object.keys(entriesByCategory).sort((a, b) => {\n      const indexA = categoryOrder.indexOf(a);\n      const indexB = categoryOrder.indexOf(b);\n      return (indexA === -1 ? 999 : indexA) - (indexB === -1 ? 999 : indexB);\n    });\n\n    // 构建条目列表HTML\n    let detailsHtml = '';\n    sortedCategories.forEach(category => {\n      // 获取类别友好名称\n      const categoryInfo = CATEGORY_MAPPING[category] || { name: category, icon: 'fa-circle-info' };\n      const categoryEntries = entriesByCategory[category];\n\n      detailsHtml += `\n        <div class=\"preset-entry-category\">\n          <i class=\"fa-solid ${categoryInfo.icon}\" style=\"margin-right: 5px; opacity: 0.7;\"></i>\n          ${categoryInfo.name || category} (${categoryEntries.length})\n        </div>\n      `;\n\n      // 条目列表\n      categoryEntries.forEach(entry => {\n        detailsHtml += `\n          <div class=\"preset-entry-item\">\n            <input type=\"checkbox\" class=\"preset-entry-checkbox\" id=\"preset-entry-${presetName}-${entry.uid}\" \n              data-uid=\"${entry.uid}\" data-preset=\"${presetName}\" ${entry.isInPreset ? 'checked' : ''}>\n            <label for=\"preset-entry-${presetName}-${entry.uid}\" style=\"font-size: 13px;\">${entry.comment}</label>\n          </div>\n        `;\n      });\n    });\n\n    // 更新详情区域\n    if (detailsHtml) {\n      $detailsSection.html(`\n        <div style=\"margin-bottom: 10px;\">\n          <div class=\"preset-summary-info\">\n            <div style=\"font-size: 13px; margin-bottom: 8px; display: flex; justify-content: space-between; align-items: center;\">\n              <span>点击复选框可以调整该配置中的条目:</span>\n              <span class=\"preset-count-info\">${preset.enabledEntries.length}个启用 / ${\n        entries.length - getLorebookSettingsEntriesCount(entries)\n      }个条目</span>\n            </div>\n          </div>\n          <div class=\"preset-entries-list\">${detailsHtml}</div>\n        </div>\n      `);\n    } else {\n      $detailsSection.html('<p style=\"color: #888; margin: 10px 0; font-style: italic;\">此配置不包含任何条目</p>');\n    }\n\n    console.log(`[状态栏] 预设详情加载完成: \"${presetName}\"`);\n  } catch (error) {\n    console.error('[状态栏] 加载配置详情失败:', error);\n    $detailsSection.html(`<p style=\"color: #f55; margin: 10px 0;\">加载失败: ${error.message}</p>`);\n  }\n}\n\n// 获取设置条目数量的辅助函数\nfunction getLorebookSettingsEntriesCount(entries) {\n  return entries.filter(entry => entry.comment.startsWith('设置-')).length;\n}\n\n// 创建弹窗函数\nfunction createPopup(content) {\n  const parentDoc = window.parent.document;\n\n  // 创建遮罩层\n  const $overlay = $('<div></div>')\n    .attr('id', `${POPUP_ID}-overlay`)\n    .css({\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      backgroundColor: 'rgba(0, 0, 0, 0.5)',\n      zIndex: 1000,\n      backdropFilter: 'blur(2px)',\n    })\n    .on('click', function (e) {\n      if (e.target === this) {\n        closePopup();\n      }\n    });\n\n  // 创建弹窗\n  const $popup = $('<div></div>')\n    .attr('id', POPUP_ID)\n    .css({\n      position: 'fixed',\n      top: '70px',\n      left: '50%',\n      transform: 'translateX(-50%)',\n      width: '700px',\n      maxWidth: '90%',\n      maxHeight: '85vh', // 增加最大高度\n      background: '#262626',\n      color: '#e0e0e0',\n      border: 'none',\n      borderRadius: '8px',\n      boxShadow: '0 15px 30px rgba(0, 0, 0, 0.6)',\n      padding: '20px',\n      zIndex: 1001,\n      boxSizing: 'border-box',\n      overflow: 'hidden',\n      display: 'flex',\n      flexDirection: 'column', // 使用弹性布局\n      fontFamily: 'system-ui, -apple-system, sans-serif',\n      animation: 'fadeIn 0.2s ease-out',\n    })\n    .html(content);\n\n  // 动画样式\n  const styleElement = document.createElement('style');\n  styleElement.id = `${POPUP_ID}-animation-style`;\n  styleElement.textContent = `\n    @keyframes fadeIn {\n      from { opacity: 0; transform: translateX(-50%) translateY(-10px) scale(0.98); }\n      to { opacity: 1; transform: translateX(-50%) translateY(0) scale(1); }\n    }\n  `;\n\n  // 添加到DOM\n  parentDoc.head.appendChild(styleElement);\n  $('body', parentDoc).append($overlay).append($popup);\n\n  // 绑定关闭按钮事件\n  $(`#close-${POPUP_ID}, #cancel-${POPUP_ID}`, parentDoc).on('click', closePopup);\n}\n\n// 初始化\n$(async () => {\n  try {\n    // 更新设置\n    await errorCatched(option.update)();\n    await errorCatched(render.update)();\n\n    // 使用设置的初始化延迟\n    const initDelay = option.option?.init_delay || 0;\n    if (initDelay > 0) {\n      console.log(`[状态栏] 将在${initDelay}毫秒后初始化渲染`);\n      setTimeout(() => {\n        errorCatched(renderAllMessages)();\n      }, initDelay);\n    } else {\n      await errorCatched(renderAllMessages)();\n    }\n\n    // 注册事件监听\n    eventOn(tavern_events.CHARACTER_MESSAGE_RENDERED, errorCatched(renderOneMessage));\n    eventOn(tavern_events.MESSAGE_UPDATED, errorCatched(renderOneMessage));\n    eventOn(tavern_events.MESSAGE_SWIPED, errorCatched(renderOneMessage));\n    eventOn(tavern_events.MESSAGE_DELETED, errorCatched(renderAllMessages));\n\n    // 监听APP_READY事件，用于创建菜单按钮\n    eventOn(tavern_events.APP_READY, errorCatched(createMenuButton));\n\n    // 监听世界书更新事件\n    eventOn(\n      tavern_events.WORLDINFO_UPDATED,\n      errorCatched(async lorebook => {\n        if (lorebook !== lorebook_name) {\n          return;\n        }\n\n        console.log('[状态栏] 检测到世界书更新:', lorebook);\n        const optionChanged = await option.update();\n        const styleChanged = await render.update();\n\n        if (optionChanged || styleChanged) {\n          console.log('[状态栏] 设置或样式已变更，重新渲染所有消息');\n          await renderAllMessages();\n        }\n      }),\n    );\n\n    // 创建菜单按钮\n    createMenuButton();\n\n    console.log('[状态栏] 已加载');\n  } catch (error) {\n    console.error('[状态栏] 加载失败:', error);\n  }\n});\n\n// 默认样式\nconst default_style = `\n/* 导入Clear Han Serif字体 */\n@import url('https://fontsapi.zeoseven.com/79/main/result.css');\n\n/* 页面基本样式优化 */\n.status-bar-container {\n  font-family: 'Clear Han Serif', 'Microsoft YaHei', sans-serif;\n  font-weight: normal;\n  color: #565656;\n  max-width: 100%;\n  width: 100%;\n  margin: 0 auto;\n  padding: 15px 10px;\n  background-color: rgba(245, 245, 245, 0.95);\n  border-radius: 12px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);\n  overflow: hidden;\n  position: relative;\n  box-sizing: border-box;\n  animation: fadeIn 0.6s ease-out forwards;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n/* 暗色模式适配 */\n.dark-mode .status-bar-container {\n  background-color: #2a2a2a;\n  color: #d8d8d8;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.35);\n  border: 1px solid #444;\n}\n\n/* 区块通用样式 - 扁平化设计 */\n.status-section {\n  margin-bottom: 12px;\n  padding: 10px;\n  background-color: rgba(255, 255, 255, 0.5);\n  border-radius: 8px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.03);\n  position: relative;\n  overflow: hidden;\n  transition: all 0.3s ease;\n}\n\n.status-section:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.03);\n}\n\n.dark-mode .status-section {\n  background-color: #333;\n  border: 1px solid #444;\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.25);\n}\n\n.dark-mode .status-section:hover {\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.06);\n}\n\n/* 区块标题 - 改进样式 */\n.status-section-title {\n  font-size: 16.5px;\n  font-weight: 500;\n  margin-bottom: 10px;\n  padding-bottom: 8px;\n  border-bottom: 1px solid rgba(210, 210, 210, 0.5);\n  color: #5d6c85;\n  position: relative;\n  display: flex;\n  align-items: center;\n  letter-spacing: 0.5px;\n  cursor: pointer;\n  user-select: none;\n}\n\n.status-section-title::after {\n  content: '';\n  position: absolute;\n  bottom: -1px;\n  left: 0;\n  width: 40px;\n  height: 2.5px;\n  background: linear-gradient(to right, #a6b3c9, #8a98b0);\n  border-radius: 2px;\n  transition: width 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);\n}\n\n.status-section:hover .status-section-title::after {\n  width: 60px;\n}\n\n.status-section-toggle {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 18px;\n  height: 18px;\n  margin-right: 8px;\n  border-radius: 3px;\n  background-color: rgba(166, 179, 201, 0.1);\n  transition: all 0.2s ease;\n}\n\n.status-section-title:hover .status-section-toggle {\n  background-color: rgba(166, 179, 201, 0.2);\n}\n\n.collapse-icon {\n  font-size: 12px;\n  color: #8795a8;\n  transition: transform 0.3s ease;\n}\n\n.status-section-content {\n  overflow: hidden;\n  transition: max-height 0.3s ease, opacity 0.3s ease, margin-top 0.3s ease;\n  opacity: 1;\n  max-height: 2000px; /* 足够高以容纳内容 */\n}\n\n.status-section-content.collapsed {\n  max-height: 0;\n  opacity: 0;\n  margin-top: 0;\n  pointer-events: none;\n}\n\n.dark-mode .status-section-title {\n  color: #a6b3c9;\n  border-bottom-color: rgba(100, 105, 115, 0.5);\n}\n\n.dark-mode .status-section-title::after {\n  background: #7d8ca3;\n}\n\n.dark-mode .status-section-toggle {\n  background-color: rgba(120, 130, 150, 0.2);\n}\n\n.dark-mode .status-section-title:hover .status-section-toggle {\n  background-color: rgba(120, 130, 150, 0.3);\n}\n\n.dark-mode .collapse-icon {\n  color: #7d8ca3;\n}\n\n/* 顶部信息行 - 调整为更紧凑的布局 */\n.status-top-info {\n  display: flex;\n  justify-content: flex-start;\n  flex-wrap: wrap;\n  gap: 8px;\n  padding: 8px 0;\n  margin-bottom: 10px;\n  font-size: 14px;\n  color: #6b7c93;\n  border-bottom: 1px solid rgba(210, 210, 210, 0.3);\n  padding-bottom: 15px;\n}\n\n.dark-mode .status-top-info {\n  color: #a6b3c9;\n}\n\n/* 时间、地点、天气样式 - 更加醒目 */\n.status-time,\n.status-location,\n.status-weather {\n  padding: 4px 10px;\n  background-color: rgba(235, 238, 241, 0.7);\n  border-radius: 6px;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.03);\n  transition: all 0.2s ease;\n  font-weight: normal;\n}\n\n.status-time:hover,\n.status-location:hover,\n.status-weather:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.03);\n}\n\n.status-time::before {\n  content: '🕒 ';\n}\n\n.status-location::before {\n  content: '📍 ';\n}\n\n.status-weather::before {\n  content: '🌤️ ';\n}\n\n.dark-mode .status-time,\n.dark-mode .status-location,\n.dark-mode .status-weather {\n  background-color: rgba(70, 75, 85, 0.5);\n}\n\n/* 角色档案新样式 - 分条简约 */\n.profile-item {\n  display: flex;\n  align-items: center;\n  margin: 10px 0;\n  padding: 8px 12px;\n  background-color: rgba(246, 248, 250, 0.7);\n  border-radius: 8px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.04);\n  transition: all 0.3s ease;\n}\n\n.profile-item:hover {\n  transform: translateY(-2px);\n  background-color: rgba(255, 255, 255, 0.9);\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.06);\n}\n\n.profile-item-icon {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 36px;\n  height: 36px;\n  background-color: rgba(166, 179, 201, 0.15);\n  border-radius: 50%;\n  margin-right: 12px;\n  color: #566A80;\n  flex-shrink: 0;\n}\n\n.profile-item-content {\n  flex: 1;\n}\n\n.profile-item-label {\n  font-size: 14px;\n  color: #8795a8;\n  margin-bottom: 2px;\n}\n\n.profile-item-value {\n  font-size: 15px;\n  font-weight: normal;\n  color: #566a80;\n  line-height: 1.5;\n}\n\n/* 特殊档案项样式 */\n.profile-名字 {\n  background-color: rgba(166, 179, 201, 0.15);\n}\n\n.profile-特征 .profile-item-value,\n.profile-身体外观 .profile-item-value {\n  line-height: 1.6;\n}\n\n.dark-mode .profile-item {\n  background-color: rgba(60, 65, 75, 0.6);\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.15);\n}\n\n.dark-mode .profile-item:hover {\n  background-color: rgba(70, 75, 85, 0.8);\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.2);\n}\n\n.dark-mode .profile-item-icon {\n  background-color: rgba(120, 130, 150, 0.2);\n  color: #a6b3c9;\n}\n\n.dark-mode .profile-item-label {\n  color: #8a99af;\n}\n\n.dark-mode .profile-item-value {\n  color: #bfd2eb;\n}\n\n.dark-mode .profile-名字 {\n  background-color: rgba(120, 130, 150, 0.25);\n}\n\n/* 保留原有角色信息样式以兼容其他部分 */\n.status-name,\n.status-age,\n.status-height,\n.status-measures,\n.status-traits,\n.status-appearance,\n.status-state,\n.status-permanent,\n.status-money,\n.status-items,\n.status-wearables {\n  margin: 5px 0;\n  line-height: 1.6;\n  padding: 4px 6px;\n  border-radius: 4px;\n  background-color: rgba(235, 238, 241, 0.5);\n  transition: all 0.2s ease;\n}\n\n.status-name:hover,\n.status-age:hover,\n.status-height:hover,\n.status-measures:hover,\n.status-traits:hover,\n.status-appearance:hover,\n.status-state:hover,\n.status-permanent:hover,\n.status-money:hover,\n.status-items:hover,\n.status-wearables:hover {\n  background-color: rgba(235, 238, 241, 0.8);\n}\n\n.dark-mode .status-name,\n.dark-mode .status-age,\n.dark-mode .status-height,\n.dark-mode .status-measures,\n.dark-mode .status-traits,\n.dark-mode .status-appearance,\n.dark-mode .status-state,\n.dark-mode .status-permanent,\n.dark-mode .status-money,\n.dark-mode .status-items,\n.dark-mode .status-wearables {\n  background-color: rgba(70, 75, 85, 0.3);\n}\n\n.dark-mode .status-name:hover,\n.dark-mode .status-age:hover,\n.dark-mode .status-height:hover,\n.dark-mode .status-measures:hover,\n.dark-mode .status-traits:hover,\n.dark-mode .status-appearance:hover,\n.dark-mode .status-state:hover,\n.dark-mode .status-permanent:hover,\n.dark-mode .status-money:hover,\n.dark-mode .status-items:hover,\n.dark-mode .status-wearables:hover {\n  background-color: rgba(70, 75, 85, 0.5);\n}\n\n/* 进度条容器 - 优化视觉效果 */\n.status-progress-container {\n  height: 8px;\n  background-color: rgba(230, 233, 237, 0.6);\n  border-radius: 6px;\n  overflow: hidden;\n  margin: 10px 0;\n  position: relative;\n  box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.04);\n}\n\n.dark-mode .status-progress-container {\n  background-color: rgba(70, 75, 85, 0.4);\n  box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.04);\n}\n\n/* 进度条填充 - 改进动画和统一颜色 */\n.status-progress-bar {\n  height: 100%;\n  border-radius: 6px;\n  transition: width 0.6s cubic-bezier(0.165, 0.84, 0.44, 1);\n  background-image: linear-gradient(to right, rgba(255, 255, 255, 0.1), rgba(255, 255, 255, 0.2));\n  background-size: 200% 100%;\n}\n\n/* 状态项样式 - 增强交互效果 */\n.status-item {\n  margin-bottom: 14px;\n  padding: 10px;\n  background-color: rgba(235, 238, 241, 0.4);\n  border-radius: 10px;\n  transition: all 0.3s ease;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.02);\n}\n\n.status-item:hover {\n  background-color: rgba(235, 238, 241, 0.65);\n  transform: translateY(-2px);\n  box-shadow: 0 3px 8px rgba(0, 0, 0, 0.04);\n}\n\n.dark-mode .status-item {\n  background-color: rgba(65, 70, 80, 0.3);\n}\n\n.dark-mode .status-item:hover {\n  background-color: rgba(70, 75, 85, 0.4);\n}\n\n/* 状态项头部 */\n.status-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 4px;\n}\n\n/* 状态项标签 */\n.status-label {\n  font-weight: normal;\n  font-size: 14px;\n  color: #6b7c93;\n}\n\n.dark-mode .status-label {\n  color: #a6b3c9;\n}\n\n/* 状态项尾部 - 单行布局 */\n.status-footer {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  font-size: 12px;\n  color: #8795a8;\n  margin-top: 4px;\n  width: 100%;\n}\n\n.status-details-row {\n  display: flex;\n  align-items: center;\n  flex-wrap: wrap;\n  gap: 6px;\n  width: 100%;\n}\n\n/* 状态值样式 */\n.status-value {\n  font-weight: normal;\n  font-size: 14px;\n  color: #566a80;\n  background-color: rgba(235, 238, 241, 0.7);\n  padding: 3px 8px;\n  border-radius: 4px;\n  display: inline-block;\n  margin-right: 4px;\n}\n\n.dark-mode .status-footer {\n  color: #8a99af;\n}\n\n.dark-mode .status-value {\n  color: #a6b3c9;\n  background-color: rgba(70, 75, 85, 0.3);\n}\n\n/* 变化指示器 - 莫兰迪色系 */\n.status-change {\n  font-size: 12px;\n  font-weight: 500;\n  display: inline-block;\n  padding: 1px 5px;\n  border-radius: 4px;\n  white-space: nowrap;\n}\n\n.status-change.positive {\n  color: #6e8b74;\n  background-color: rgba(110, 139, 116, 0.1);\n}\n\n.status-change.negative {\n  color: #c98a7d;\n  background-color: rgba(201, 138, 125, 0.1);\n}\n\n.dark-mode .status-change.positive {\n  color: #8caa92;\n  background-color: rgba(140, 170, 146, 0.15);\n}\n\n.dark-mode .status-change.negative {\n  color: #daa99e;\n  background-color: rgba(218, 169, 158, 0.15);\n}\n\n/* 描述文本 - 确保显示 */\n.status-description {\n  font-style: italic;\n  color: #6b7c93;\n  font-size: 14px;\n  display: block;\n  margin: 12px 0 4px 0;\n  padding: 10px 12px;\n  background-color: rgba(235, 238, 241, 0.7);\n  border-radius: 6px;\n  line-height: 1.6;\n  width: 100%;\n  box-sizing: border-box;\n  overflow-wrap: break-word;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.03);\n}\n\n.status-description:before {\n  content: '\"';\n  font-size: 18px;\n  margin-right: 2px;\n  opacity: 0.7;\n}\n\n.status-description:after {\n  content: '\"';\n  font-size: 18px;\n  margin-left: 2px;\n  opacity: 0.7;\n}\n\n.dark-mode .status-description {\n  color: #a6b3c9;\n  background-color: rgba(70, 75, 85, 0.4);\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.08);\n}\n\n/* 社交状态信息 - 扁平化设计，移除左侧色条 */\n.status-relation,\n.status-trust,\n.status-corruption {\n  padding: 8px;\n  margin: 6px 0;\n  border-radius: 6px;\n  background-color: rgba(235, 238, 241, 0.6);\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.02);\n  transition: all 0.3s ease;\n  position: relative;\n  z-index: 1;\n}\n\n.status-relation:hover,\n.status-trust:hover,\n.status-corruption:hover {\n  background-color: rgba(235, 238, 241, 0.8);\n  transform: translateY(-2px);\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.03);\n}\n\n.status-relation strong {\n  color: #af8e9f;\n}\n\n.status-trust strong {\n  color: #8ca5a3;\n}\n\n.status-corruption strong {\n  color: #b79a9a;\n}\n\n.dark-mode .status-relation,\n.dark-mode .status-trust,\n.dark-mode .status-corruption {\n  background-color: rgba(70, 75, 85, 0.3);\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.04);\n}\n\n.dark-mode .status-relation:hover,\n.dark-mode .status-trust:hover,\n.dark-mode .status-corruption:hover {\n  background-color: rgba(70, 75, 85, 0.5);\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.06);\n}\n\n.dark-mode .status-relation strong {\n  color: #c1a2b3;\n}\n\n.dark-mode .status-trust strong {\n  color: #a0b9b7;\n}\n\n.dark-mode .status-corruption strong {\n  color: #c9aeae;\n}\n\n/* 原因文本样式 */\n.status-reason {\n  font-style: italic;\n  color: #8795a8;\n  font-size: 12px;\n  padding: 2px 5px;\n  background-color: rgba(235, 238, 241, 0.5);\n  border-radius: 3px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  max-width: 100%;\n}\n\n.dark-mode .status-reason {\n  color: #8a99af;\n  background-color: rgba(70, 75, 85, 0.2);\n}\n\n/* 想法样式 - 莫兰迪色系 */\n.status-thoughts {\n  padding: 12px 15px;\n  background-color: rgba(235, 238, 241, 0.7);\n  border-radius: 8px;\n  font-size: 14px;\n  color: #6b7c93;\n  margin: 8px 0;\n  line-height: 1.5;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.02);\n  position: relative;\n  transition: all 0.3s ease;\n  font-style: italic;\n}\n\n.status-thoughts:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.03);\n  background-color: rgba(235, 238, 241, 0.9);\n}\n\n.dark-mode .status-thoughts {\n  background-color: rgba(70, 75, 85, 0.4);\n  color: #a6b3c9;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.04);\n}\n\n.dark-mode .status-thoughts:hover {\n  background-color: rgba(70, 75, 85, 0.6);\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.06);\n}\n\n/* 选项列表 */\n.status-options-list {\n  margin-top: 12px;\n  position: relative;\n}\n\n/* 物品标签 - 莫兰迪色系 */\n.item-tag {\n  display: inline-block;\n  padding: 3px 10px;\n  background-color: rgba(235, 238, 241, 0.6);\n  border-radius: 4px;\n  margin: 3px;\n  font-size: 12px;\n  box-shadow: 0 1px 1px rgba(0, 0, 0, 0.01);\n  transition: all 0.2s ease;\n  position: relative;\n  z-index: 1;\n  color: #6b7c93;\n}\n\n.item-tag:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 2px 3px rgba(0, 0, 0, 0.02);\n  background-color: rgba(235, 238, 241, 0.8);\n}\n\n.dark-mode .item-tag {\n  background-color: rgba(70, 75, 85, 0.3);\n  color: #a6b3c9;\n}\n\n.dark-mode .item-tag:hover {\n  background-color: rgba(70, 75, 85, 0.5);\n}\n\n/* 世界信息项目 - 扁平化分离设计 */\n.status-news,\n.status-nearby-events,\n.status-locations,\n.status-npc,\n.status-comment,\n.status-main-quest,\n.status-upcoming-events,\n.status-plot-details {\n  margin: 4px 0 8px 0;\n  padding: 12px;\n  background-color: #ffffff;\n  border: 1px solid #e2e8f0;\n  border-radius: 6px;\n  transition: all 0.3s ease;\n}\n\n.status-news:hover,\n.status-nearby-events:hover,\n.status-locations:hover,\n.status-npc:hover,\n.status-comment:hover,\n.status-main-quest:hover,\n.status-upcoming-events:hover,\n.status-plot-details:hover {\n  background-color: #f8f9fa;\n  border-color: #cbd5e0;\n  transform: translateY(-2px);\n}\n\n.status-news strong,\n.status-nearby-events strong,\n.status-locations strong,\n.status-npc strong,\n.status-comment strong,\n.status-main-quest strong,\n.status-upcoming-events strong,\n.status-plot-details strong {\n  color: #6b7c93;\n  display: block;\n  margin-bottom: 4px;\n  padding-bottom: 4px;\n  border-bottom: 1px solid rgba(210, 210, 210, 0.5);\n  font-weight: normal;\n}\n\n.status-news ul,\n.status-nearby-events ul,\n.status-locations ul,\n.status-plot-details ul,\n.status-upcoming-events ul {\n  margin: 2px 0 5px 0;\n  padding-left: 10px;\n  list-style-type: none;\n}\n\n.status-news li,\n.status-nearby-events li,\n.status-locations li,\n.status-plot-details li,\n.status-upcoming-events li {\n  padding: 8px 12px;\n  margin-bottom: 5px;\n  border-radius: 8px;\n  background-color: rgba(249, 250, 251, 0.8);\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);\n  transition: all 0.2s ease;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n}\n\n.status-news li:hover,\n.status-nearby-events li:hover,\n.status-locations li:hover,\n.status-plot-details li:hover,\n.status-upcoming-events li:hover {\n  background-color: rgba(255, 255, 255, 0.95);\n  transform: scale(1.02);\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);\n}\n\n.status-news li:active,\n.status-nearby-events li:active,\n.status-locations li:active,\n.status-plot-details li:active,\n.status-upcoming-events li:active {\n  transform: translateY(1px);\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);\n}\n\n.dark-mode .status-news,\n.dark-mode .status-nearby-events,\n.dark-mode .status-locations,\n.dark-mode .status-npc,\n.dark-mode .status-comment,\n.dark-mode .status-main-quest,\n.dark-mode .status-upcoming-events,\n.dark-mode .status-plot-details {\n  background-color: rgba(60, 60, 65, 0.8);\n  border-color: #4a5568;\n}\n\n.dark-mode .status-news:hover,\n.dark-mode .status-nearby-events:hover,\n.dark-mode .status-locations:hover,\n.dark-mode .status-npc:hover,\n.dark-mode .status-comment:hover,\n.dark-mode .status-main-quest:hover,\n.dark-mode .status-upcoming-events:hover,\n.dark-mode .status-plot-details:hover {\n  background-color: rgba(70, 70, 75, 0.9);\n  border-color: #718096;\n}\n\n.dark-mode .status-news strong,\n.dark-mode .status-nearby-events strong,\n.dark-mode .status-locations strong,\n.dark-mode .status-npc strong,\n.dark-mode .status-comment strong,\n.dark-mode .status-main-quest strong,\n.dark-mode .status-upcoming-events strong,\n.dark-mode .status-plot-details strong {\n  color: #bfd2eb;\n  border-bottom: 1px solid rgba(180, 200, 225, 0.4);\n}\n\n.dark-mode .status-news li,\n.dark-mode .status-nearby-events li,\n.dark-mode .status-locations li,\n.dark-mode .status-plot-details li,\n.dark-mode .status-upcoming-events li {\n  background-color: rgba(85, 85, 90, 0.9);\n  color: #ffffff;\n  text-shadow: 0 1px 1px rgba(0, 0, 0, 0.2);\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n}\n\n.dark-mode .status-news li:hover,\n.dark-mode .status-nearby-events li:hover,\n.dark-mode .status-locations li:hover,\n.dark-mode .status-plot-details li:hover,\n.dark-mode .status-upcoming-events li:hover {\n  background-color: rgba(95, 95, 100, 0.95);\n  transform: scale(1.02);\n  box-shadow: 0 3px 8px rgba(0, 0, 0, 0.3);\n}\n\n.dark-mode .status-news li:active,\n.dark-mode .status-nearby-events li:active,\n.dark-mode .status-locations li:active,\n.dark-mode .status-plot-details li:active,\n.dark-mode .status-upcoming-events li:active {\n  background-color: rgba(105, 105, 110, 1);\n  color: #ffffff;\n}\n\n/* 剧情选项样式 */\n.plot-options-list {\n  list-style: none;\n  padding: 0;\n  margin: 5px 0;\n}\n\n.plot-option-item {\n  padding: 8px 12px;\n  margin-bottom: 6px;\n  background-color: rgba(235, 238, 241, 0.8);\n  border-radius: 6px;\n  cursor: pointer;\n  transition: all 0.25s ease;\n  font-size: 14.5px;\n  position: relative;\n  border-left: none;\n  display: flex;\n  align-items: center;\n}\n\n.plot-option-item:hover {\n  background-color: rgba(220, 225, 230, 1);\n  transform: scale(1.02);\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);\n  border-left-color: transparent;\n  padding-left: 12px;\n}\n\n.plot-option-item:active {\n  transform: scale(0.98);\n  background-color: rgba(210, 215, 220, 1);\n}\n\n.dark-mode .plot-option-item {\n  background-color: rgba(70, 75, 85, 0.5);\n  border-left: none;\n}\n\n.dark-mode .plot-option-item:hover {\n  background-color: rgba(75, 80, 90, 0.7);\n  transform: scale(1.02);\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.15);\n  border-left-color: transparent;\n}\n\n.dark-mode .plot-option-item:active {\n  transform: scale(0.98);\n  background-color: rgba(80, 85, 95, 0.8);\n}\n\n/* 实体器官状态 */\n.status-sexual-organs {\n  margin: 8px 0;\n  padding: 10px 12px;\n  background-color: rgba(235, 238, 241, 0.5);\n  border-radius: 6px;\n  line-height: 1.6;\n  font-size: 14px;\n}\n\n.dark-mode .status-sexual-organs {\n  background-color: rgba(70, 75, 85, 0.3);\n}\n\n/* 空状态提示 */\n.status-empty {\n  padding: 12px;\n  text-align: center;\n  color: #8795a8;\n  font-style: italic;\n  margin: 8px 0;\n  background-color: rgba(235, 238, 241, 0.4);\n  border-radius: 6px;\n  transition: all 0.3s ease;\n}\n\n.status-empty:hover {\n  background-color: rgba(235, 238, 241, 0.6);\n}\n\n.dark-mode .status-empty {\n  color: #8a99af;\n  background-color: rgba(70, 75, 85, 0.2);\n}\n\n.dark-mode .status-empty:hover {\n  background-color: rgba(70, 75, 85, 0.3);\n}\n\n/* 标题图标 */\n.status-section-icon {\n  margin-right: 8px;\n  font-size: 1em;\n  color: #a6b3c9;\n  opacity: 0.8;\n}\n\n.dark-mode .status-section-icon {\n  color: #7d8ca3;\n}\n\n/* 新增现金详情样式 */\n.cash-details {\n  font-size: 12px;\n  color: #8795a8;\n  margin-left: 5px;\n  font-style: italic;\n}\n\n.dark-mode .cash-details {\n  color: #8a99af;\n}\n\n/* 响应式布局 */\n@media (max-width: 767px) {\n  .status-bar-container {\n    padding: 12px 10px;\n  }\n\n  .status-top-info {\n    padding: 8px 0;\n    margin-bottom: 12px;\n    gap: 6px;\n  }\n\n  .status-time,\n  .status-location,\n  .status-weather {\n    padding: 5px 10px;\n    font-size: 13px;\n  }\n\n  .status-section {\n    padding: 12px;\n    margin-bottom: 14px;\n  }\n}\n\n/* 特定状态描述新样式 */\n.condition-item {\n  margin: 10px 0;\n  padding: 0;\n  background-color: rgba(235, 238, 241, 0.4); /* 统一与状态值相同的底色 */\n  border-radius: 8px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.04);\n  transition: all 0.3s ease;\n  overflow: hidden;\n}\n\n.condition-item:hover {\n  transform: translateY(-2px);\n  background-color: rgba(235, 238, 241, 0.65); /* 悬停状态与状态值保持一致 */\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.06);\n}\n\n.condition-item-label {\n  padding: 8px 12px;\n  font-size: 14px;\n  color: #6b7c93;\n  background-color: rgba(235, 238, 241, 0.6);\n  border-bottom: 1px solid rgba(225, 230, 235, 0.6);\n  font-weight: 500;\n}\n\n.condition-item-value {\n  padding: 10px 12px;\n  font-size: 14.5px;\n  color: #566a80;\n  line-height: 1.5;\n  background-color: rgba(235, 238, 241, 0.4); /* 统一与状态值相同的底色 */\n  border-radius: 0 0 8px 8px;\n}\n\n/* 暗色模式适配 */\n.dark-mode .condition-item {\n  background-color: rgba(65, 70, 80, 0.3); /* 统一与状态值相同的暗色底色 */\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.15);\n}\n\n.dark-mode .condition-item:hover {\n  background-color: rgba(70, 75, 85, 0.4); /* 悬停状态与状态值保持一致 */\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.2);\n}\n\n.dark-mode .condition-item-label {\n  background-color: rgba(55, 60, 70, 0.8);\n  color: #a6b3c9;\n  border-bottom-color: rgba(70, 75, 85, 0.6);\n}\n\n.dark-mode .condition-item-value {\n  color: #bfd2eb;\n  background-color: rgba(65, 70, 80, 0.3); /* 统一与状态值相同的暗色底色 */\n}\n\n/* 保留原有状态样式以兼容其他部分 */\n.status-state {\n  margin: 5px 0;\n  line-height: 1.6;\n  padding: 4px 6px;\n  border-radius: 4px;\n  background-color: rgba(235, 238, 241, 0.5);\n  transition: all 0.2s ease;\n}\n\n.status-state:hover {\n  background-color: rgba(235, 238, 241, 0.8);\n}\n\n.dark-mode .status-state {\n  background-color: rgba(70, 75, 85, 0.3);\n}\n\n.dark-mode .status-state:hover {\n  background-color: rgba(70, 75, 85, 0.5);\n}\n\n/* 行为与事件计数新样式 - 紧凑数据展示风格 */\n.counter-item {\n  margin: 8px 0;\n  padding: 10px 12px;\n  border-radius: 6px;\n  overflow: hidden;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.03);\n  background-color: rgba(235, 238, 241, 0.4);\n  transition: all 0.2s ease;\n}\n\n.counter-item:hover {\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\n  transform: translateY(-1px);\n  background-color: rgba(235, 238, 241, 0.65);\n}\n\n.counter-content {\n  display: flex;\n  align-items: center;\n  flex-wrap: wrap;\n  gap: 8px;\n}\n\n.counter-label {\n  font-weight: 500;\n  color: #6b7c93;\n  font-size: 14px;\n}\n\n.counter-value {\n  color: #566a80;\n  font-size: 14px;\n}\n\n/* 暗色模式适配 */\n.dark-mode .counter-item {\n  background-color: rgba(65, 70, 80, 0.3);\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\n}\n\n.dark-mode .counter-item:hover {\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);\n  background-color: rgba(70, 75, 85, 0.4);\n}\n\n.dark-mode .counter-label {\n  color: #a6b3c9;\n}\n\n.dark-mode .counter-value {\n  color: #bfd2eb;\n}\n\n/* 数据表格式布局 */\n.counter-data-container {\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n}\n\n.counter-data-row {\n  display: flex;\n  border-bottom: 1px solid rgba(230, 235, 240, 0.5);\n}\n\n.counter-data-row:last-child {\n  border-bottom: none;\n}\n\n.counter-data-cell {\n  padding: 8px 10px;\n  width: 30%;\n  background-color: rgba(235, 240, 245, 0.4);\n  color: #8795a8;\n  font-size: 14px;\n  text-align: center;\n  border-right: 1px solid rgba(230, 235, 240, 0.5);\n}\n\n.counter-data-value {\n  padding: 8px 10px;\n  width: 70%;\n  font-size: 15px;\n  color: #566a80;\n  text-align: center;\n  font-weight: 500;\n}\n\n/* 特殊类型样式 */\n.fluid-level .counter-value {\n  color: #3a8dbd;\n  font-size: 16px;\n}\n\n.activity-count .counter-header {\n  background-color: rgba(220, 230, 240, 0.6);\n}\n\n/* 暗色模式适配 */\n.dark-mode .counter-item {\n  background-color: rgba(65, 70, 80, 0.3); /* 统一与状态值相同的暗色底色 */\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\n}\n\n.dark-mode .counter-item:hover {\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);\n  background-color: rgba(70, 75, 85, 0.4); /* 悬停状态与状态值保持一致 */\n}\n\n.dark-mode .counter-header {\n  background-color: rgba(65, 70, 80, 0.4); /* 调整为与其他头部一致 */\n  color: #a6b3c9;\n  border-bottom-color: rgba(70, 75, 85, 0.6);\n}\n\n.dark-mode .counter-value,\n.dark-mode .counter-value-single {\n  color: #bfd2eb;\n}\n\n.dark-mode .counter-data-cell {\n  background-color: rgba(60, 65, 75, 0.5);\n  color: #8a99af;\n  border-right-color: rgba(70, 75, 85, 0.5);\n}\n\n.dark-mode .counter-data-value {\n  color: #bfd2eb;\n}\n\n.dark-mode .counter-data-row {\n  border-bottom-color: rgba(70, 75, 85, 0.4);\n}\n\n.dark-mode .fluid-level .counter-value {\n  color: #5aa7d7;\n}\n\n/* 保留原有样式以兼容其他部分 */\n.status-sex-acts,\n.status-fluid-levels {\n  margin: 5px 0;\n  line-height: 1.6;\n  padding: 4px 6px;\n  border-radius: 4px;\n  background-color: rgba(235, 238, 241, 0.5);\n  transition: all 0.2s ease;\n}\n\n.status-sex-acts:hover,\n.status-fluid-levels:hover {\n  background-color: rgba(235, 238, 241, 0.8);\n}\n\n.dark-mode .status-sex-acts,\n.dark-mode .status-fluid-levels {\n  background-color: rgba(70, 75, 85, 0.3);\n}\n\n.dark-mode .status-sex-acts:hover,\n.dark-mode .status-fluid-levels:hover {\n  background-color: rgba(70, 75, 85, 0.5);\n}\n\n/* 世界与剧情动态统一样式 */\n.world-item {\n  margin: 10px 0;\n  border-radius: 8px;\n  overflow: hidden;\n  background-color: rgba(235, 238, 241, 0.4); /* 统一与状态值相同的底色 */\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.04);\n  transition: all 0.25s ease;\n}\n\n.world-item:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 3px 8px rgba(0, 0, 0, 0.06);\n  background-color: rgba(235, 238, 241, 0.65); /* 悬停状态与状态值保持一致 */\n}\n\n.world-item-header {\n  padding: 10px 12px;\n  font-size: 15px;\n  color: #566a80;\n  background-color: rgba(235, 238, 241, 0.6);\n  border-bottom: 1px solid rgba(210, 215, 220, 0.5);\n  font-weight: 500;\n}\n\n.world-item-list {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n.world-item-entry {\n  padding: 8px 12px;\n  border-bottom: 1px solid rgba(235, 240, 245, 0.7);\n  font-size: 14px;\n  color: #566a80;\n  line-height: 1.5;\n  background-color: rgba(235, 238, 241, 0.4); /* 统一与状态值相同的底色 */\n}\n\n.world-item-entry:last-child {\n  border-bottom: none;\n}\n\n/* 交互式列表项 */\n.interactive-list .world-item-entry {\n  cursor: pointer;\n  transition: all 0.2s ease;\n  position: relative;\n  padding-left: 15px;\n}\n\n.interactive-list .world-item-entry:before {\n  content: '';\n  position: absolute;\n  left: 5px;\n  top: 50%;\n  width: 4px;\n  height: 4px;\n  border-radius: 50%;\n  background-color: #a6b3c9;\n  opacity: 0.7;\n  transform: translateY(-50%);\n  transition: all 0.2s ease;\n}\n\n.interactive-list .world-item-entry:hover {\n  background-color: rgba(235, 238, 241, 0.7); /* 悬停状态与状态值保持一致 */\n  padding-left: 18px;\n}\n\n.interactive-list .world-item-entry:hover:before {\n  left: 8px;\n  background-color: #566a80;\n  opacity: 1;\n}\n\n/* 特殊类型样式 */\n.world-item.main-quest .world-item-header {\n  background-color: rgba(166, 179, 201, 0.25);\n  color: #4d5b70;\n}\n\n.world-item.upcoming-events .world-item-header {\n  background-color: rgba(166, 179, 201, 0.15);\n}\n\n.world-item.news .world-item-header {\n  background-color: rgba(200, 210, 220, 0.5);\n}\n\n.world-item.npcs .world-item-header {\n  background-color: rgba(180, 190, 210, 0.3);\n}\n\n/* 暗色模式适配 */\n.dark-mode .world-item {\n  background-color: rgba(65, 70, 80, 0.3); /* 统一与状态值相同的暗色底色 */\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.15);\n}\n\n.dark-mode .world-item:hover {\n  box-shadow: 0 3px 8px rgba(0, 0, 0, 0.25);\n  background-color: rgba(70, 75, 85, 0.4); /* 悬停状态与状态值保持一致 */\n}\n\n.dark-mode .world-item-header {\n  background-color: rgba(65, 70, 80, 0.4); /* 调整为与其他头部一致 */\n  color: #a6b3c9;\n  border-bottom-color: rgba(70, 75, 85, 0.6);\n}\n\n.dark-mode .world-item-entry {\n  color: #bfd2eb;\n  border-bottom-color: rgba(70, 75, 85, 0.4);\n  background-color: rgba(65, 70, 80, 0.3); /* 统一与状态值相同的暗色底色 */\n}\n\n.dark-mode .interactive-list .world-item-entry:before {\n  background-color: #7d8ca3;\n}\n\n.dark-mode .interactive-list .world-item-entry:hover {\n  background-color: rgba(70, 75, 85, 0.5); /* 悬停状态与状态值保持一致 */\n}\n\n.dark-mode .interactive-list .world-item-entry:hover:before {\n  background-color: #a6b3c9;\n}\n\n.dark-mode .world-item.main-quest .world-item-header {\n  background-color: rgba(70, 80, 100, 0.6);\n  color: #a6b3c9;\n}\n\n.dark-mode .world-item.upcoming-events .world-item-header {\n  background-color: rgba(70, 80, 95, 0.5);\n}\n\n.dark-mode .world-item.news .world-item-header {\n  background-color: rgba(65, 75, 90, 0.6);\n}\n\n.dark-mode .world-item.npcs .world-item-header {\n  background-color: rgba(60, 70, 85, 0.5);\n}\n\n/* 保留原有样式以兼容其他部分 */\n.status-news,\n.status-nearby-events,\n.status-locations,\n.status-npc,\n.status-main-quest,\n.status-upcoming-events,\n.status-plot-details {\n  margin: 4px 0 8px 0;\n  padding: 12px;\n  background-color: #ffffff;\n  border: 1px solid #e2e8f0;\n  border-radius: 6px;\n  transition: all 0.3s ease;\n}\n\n/* 元信息统一样式 */\n.meta-item {\n  margin: 10px 0;\n  border-radius: 8px;\n  overflow: hidden;\n  background-color: rgba(235, 238, 241, 0.4); /* 统一与状态值相同的底色 */\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.04);\n  transition: all 0.3s ease;\n}\n\n.meta-item:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.06);\n  background-color: rgba(235, 238, 241, 0.65); /* 悬停状态与状态值保持一致 */\n}\n\n.meta-item-header {\n  padding: 8px 12px;\n  font-size: 15px;\n  color: #566a80;\n  background-color: rgba(235, 238, 241, 0.6);\n  border-bottom: 1px solid rgba(220, 225, 230, 0.6);\n  font-weight: 500;\n}\n\n.meta-item-content {\n  padding: 12px 15px;\n  font-size: 14.5px;\n  color: #566a80;\n  line-height: 1.6;\n  background-color: rgba(235, 238, 241, 0.4); /* 统一与状态值相同的底色 */\n}\n\n.meta-comments .meta-item-header {\n  background-color: rgba(235, 238, 241, 0.6); /* 统一与其他头部一致 */\n}\n\n.meta-comments .meta-item-content {\n  background-color: rgba(235, 238, 241, 0.4); /* 统一与状态值相同的底色 */\n}\n\n/* 暗色模式适配 */\n.dark-mode .meta-item {\n  background-color: rgba(65, 70, 80, 0.3); /* 统一与状态值相同的暗色底色 */\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.15);\n}\n\n.dark-mode .meta-item:hover {\n  box-shadow: 0 3px 8px rgba(0, 0, 0, 0.25);\n  background-color: rgba(70, 75, 85, 0.4); /* 悬停状态与状态值保持一致 */\n}\n\n.dark-mode .meta-item-header {\n  background-color: rgba(65, 70, 80, 0.4); /* 调整为与其他头部一致 */\n  color: #a6b3c9;\n  border-bottom-color: rgba(70, 75, 85, 0.6);\n}\n\n.dark-mode .meta-item-content {\n  color: #bfd2eb;\n  background-color: rgba(65, 70, 80, 0.3); /* 统一与状态值相同的暗色底色 */\n}\n\n.dark-mode .meta-comments .meta-item-header {\n  background-color: rgba(65, 70, 80, 0.4); /* 统一与其他头部一致 */\n}\n\n.dark-mode .meta-comments .meta-item-content {\n  background-color: rgba(65, 70, 80, 0.3); /* 统一与状态值相同的暗色底色 */\n}\n\n/* 关系参数样式 */\n.relation-parameter {\n  margin-bottom: 14px;\n  padding: 10px;\n  background-color: rgba(235, 238, 241, 0.4);\n  border-radius: 10px;\n  transition: all 0.3s ease;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.02);\n}\n\n.relation-parameter:hover {\n  background-color: rgba(235, 238, 241, 0.65);\n  transform: translateY(-2px);\n  box-shadow: 0 3px 8px rgba(0, 0, 0, 0.04);\n}\n\n.relation-stage {\n  background-color: rgba(119, 151, 185, 0.15);\n  color: #566a80;\n  padding: 2px 6px;\n  border-radius: 4px;\n  font-size: 12px;\n  font-weight: normal;\n  margin-left: 10px;\n}\n\n.dark-mode .relation-parameter {\n  background-color: rgba(65, 70, 80, 0.3);\n}\n\n.dark-mode .relation-parameter:hover {\n  background-color: rgba(70, 75, 85, 0.4);\n}\n\n.dark-mode .relation-stage {\n  color: #a6b3c9;\n  background-color: rgba(119, 151, 185, 0.10);\n}\n\n/* 角色数据样式 */\n.character-data-container {\n  display: flex;\n  height: 65vh; /* 增加高度 */\n  border: 1px solid #444;\n  border-radius: 6px;\n  overflow: hidden;\n  margin-top: 10px;\n}\n\n.character-data-sidebar {\n  width: 30%;\n  background-color: #2d2d2d;\n  border-right: 1px solid #444;\n  display: flex;\n  flex-direction: column;\n}\n\n.sidebar-header {\n  padding: 12px 16px;\n  border-bottom: 1px solid #444;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.sidebar-header h4 {\n  margin: 0;\n  font-size: 15px;\n  color: #ddd;\n}\n\n.refresh-btn {\n  width: 24px;\n  height: 24px;\n  background-color: #3a3a3a;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  transition: all 0.2s;\n}\n\n.refresh-btn:hover {\n  background-color: #4a4a4a;\n}\n\n.character-list {\n  flex: 1;\n  overflow-y: auto;\n  padding: 8px;\n}\n\n.character-list-item {\n  padding: 10px 12px;\n  border-radius: 5px;\n  margin-bottom: 8px;\n  cursor: pointer;\n  transition: all 0.2s;\n  background-color: #333;\n}\n\n.character-list-item:hover {\n  background-color: #3a3a3a;\n}\n\n.character-list-item.active {\n  background-color: #3a7bd5;\n}\n\n.loading-text {\n  text-align: center;\n  color: #777;\n  padding: 20px 0;\n}\n\n.character-data-content {\n  flex: 1;\n  padding: 16px;\n  background-color: #222;\n  overflow-y: auto;\n  max-height: 100%; /* 确保内容区域可以滚动 */\n}\n\n.empty-state {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  color: #777;\n}\n\n.empty-state p {\n  margin-top: 10px;\n  font-style: italic;\n}\n\n.character-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding-bottom: 12px;\n  margin-bottom: 16px;\n  border-bottom: 1px solid #444;\n}\n\n.character-header h3 {\n  margin: 0;\n  font-size: 18px;\n  color: #ddd;\n}\n\n.character-actions {\n  display: flex;\n  gap: 8px;\n}\n\n.character-action-btn {\n  border: none;\n  padding: 6px 12px;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 13px;\n  transition: all 0.2s;\n}\n\n.save-btn {\n  background-color: #3a7bd5;\n  color: #fff;\n}\n\n.save-btn:hover {\n  background-color: #4a8ce5;\n}\n\n.delete-btn {\n  background-color: #9e3a3a;\n  color: #fff;\n}\n\n.delete-btn:hover {\n  background-color: #ae4a4a;\n}\n\n.character-section {\n  background-color: #2a2a2a;\n  border-radius: 6px;\n  padding: 12px 16px;\n  margin-bottom: 16px;\n  max-height: none; /* 移除最大高度限制 */\n  overflow: visible; /* 确保内容可见 */\n}\n\n.character-section h4 {\n  margin: 0 0 12px 0;\n  font-size: 15px;\n  color: #bbb;\n}\n\n.section-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 12px;\n}\n\n.add-param-btn {\n  border: none;\n  background-color: #40634e;\n  color: white;\n  padding: 4px 8px;\n  border-radius: 3px;\n  font-size: 12px;\n  cursor: pointer;\n}\n\n.add-param-btn:hover {\n  background-color: #4d7a60;\n}\n\n.character-fields {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 12px;\n}\n\n.character-field {\n  margin-bottom: 8px;\n}\n\n.character-field label {\n  display: block;\n  margin-bottom: 5px;\n  color: #aaa;\n  font-size: 13px;\n}\n\n.character-input, .character-textarea, .character-select {\n  width: 100%;\n  padding: 8px;\n  background-color: #333;\n  border: 1px solid #555;\n  color: #ddd;\n  border-radius: 4px;\n  font-size: 14px;\n}\n\n.character-input:focus, .character-textarea:focus, .character-select:focus {\n  outline: none;\n  border-color: #3a7bd5;\n}\n\n.character-textarea {\n  resize: vertical;\n}\n\n.relationship-params-container {\n  display: grid;\n  grid-template-columns: 1fr;\n  gap: 12px;\n  max-height: none; /* 移除高度限制 */\n  overflow-y: visible; /* 允许内容溢出 */\n}\n\n.relationship-param {\n  background-color: #333;\n  border-radius: 4px;\n  padding: 10px 14px;\n  position: relative;\n}\n\n.param-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 10px;\n}\n\n.param-name {\n  font-weight: 500;\n  color: #ccc;\n}\n\n.param-remove {\n  background: none;\n  border: none;\n  color: #999;\n  cursor: pointer;\n  padding: 2px 6px;\n  font-size: 14px;\n}\n\n.param-remove:hover {\n  color: #e55;\n}\n\n.param-fields {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 10px;\n}\n\n.character-no-data {\n  text-align: center;\n  padding: 20px;\n  color: #888;\n  font-style: italic;\n}\n\n/* 确保内容区可以滚动 */\n.tab-content {\n  overflow: visible;\n}\n\n/* 设置参数表现的最大高度并添加滚动 */\n#character-data-tab .relationship-params-container {\n  max-height: 350px;\n  overflow-y: auto;\n  padding-right: 5px;\n}\n`;\n\n// 添加数据持久化功能\n// 保存角色关系参数和基本信息到聊天变量中\nasync function saveCharacterDataToVariables(parsedData) {\n  try {\n    // 首先获取角色名称，这是必需的\n    let characterName = '';\n    if (parsedData.categories['CP']) {\n      const nameItem = parsedData.categories['CP'].find(item => item.key === '名字');\n      if (nameItem && nameItem.values && nameItem.values.length > 0) {\n        characterName = nameItem.values[0];\n\n        // 如果名字是数组（含@分隔），取第一个元素\n        if (Array.isArray(characterName)) {\n          characterName = characterName[0];\n        }\n      }\n    }\n\n    // 如果没有找到角色名，不进行保存\n    if (!characterName) {\n      console.warn('[状态栏] 未找到角色名，无法保存角色数据');\n      return;\n    }\n\n    // 构建要保存的角色数据对象\n    let characterData = {};\n\n    // 1. 保存基本信息 (年龄、身高、特征、永久性状态)\n    if (parsedData.categories['CP']) {\n      const basicInfo = {};\n\n      // 保存年龄\n      const ageItem = parsedData.categories['CP'].find(item => item.key === '年龄');\n      if (ageItem && ageItem.values && ageItem.values.length > 0) {\n        basicInfo.age = ageItem.values[0];\n      }\n\n      // 保存身高\n      const heightItem = parsedData.categories['CP'].find(item => item.key === '身高');\n      if (heightItem && heightItem.values && heightItem.values.length > 0) {\n        basicInfo.height = heightItem.values[0];\n      }\n\n      // 保存特征\n      const traitsItem = parsedData.categories['CP'].find(item => item.key === '特征');\n      if (traitsItem && traitsItem.values && traitsItem.values.length > 0) {\n        basicInfo.traits = traitsItem.values[0];\n      }\n\n      // 保存永久性状态\n      const permanentItem = parsedData.categories['CP'].find(item => item.key === '永久性状态');\n      if (permanentItem && permanentItem.values && permanentItem.values.length > 0) {\n        basicInfo.permanent = permanentItem.values[0];\n      }\n\n      characterData.basicInfo = basicInfo;\n    }\n\n    // 2. 保存角色关系参数 (RP类别)\n    if (parsedData.categories['RP']) {\n      const relationshipParameters = {};\n\n      // 遍历所有关系参数\n      parsedData.categories['RP'].forEach(item => {\n        // 只存储键、当前值、最大值和阶段\n        const paramData = {\n          key: item.key,\n          currentValue: 0,\n          maxValue: 100,\n          stage: '',\n        };\n\n        // 解析当前值和最大值\n        if (item.values[0]) {\n          if (Array.isArray(item.values[0])) {\n            // 如果是数组（含@分隔）\n            const [current, max] = item.values[0];\n            paramData.currentValue = parseInt(current) || 0;\n            paramData.maxValue = parseInt(max) || 100;\n          } else {\n            // 如果是单个值\n            paramData.currentValue = parseInt(item.values[0]) || 0;\n          }\n        }\n\n        // 保存阶段 (values[3])\n        if (item.values.length > 3) {\n          paramData.stage = item.values[3];\n        }\n\n        // 存储参数\n        relationshipParameters[item.key] = paramData;\n      });\n\n      characterData.relationshipParameters = relationshipParameters;\n    }\n\n    // 3. 使用聊天变量API保存数据\n    const chatVariables = getVariables({ type: 'chat' });\n\n    // 创建或更新角色数据存储\n    if (!chatVariables.characterData) {\n      chatVariables.characterData = {};\n    }\n\n    // 保存/更新当前角色的数据\n    chatVariables.characterData[characterName] = characterData;\n\n    // 保存回聊天变量\n    await replaceVariables(chatVariables, { type: 'chat' });\n\n    console.log(`[状态栏] 成功保存角色 \"${characterName}\" 的数据到聊天变量`);\n  } catch (error) {\n    console.error('[状态栏] 保存角色数据到聊天变量时出错:', error);\n  }\n}\n\n// 初始化角色数据相关事件处理\nfunction initCharacterDataEvents() {\n  const parentDoc = window.parent.document;\n\n  // 刷新按钮事件\n  $(parentDoc).on('click', '#refresh-character-data-btn', function () {\n    loadCharacterDataList();\n  });\n\n  // 角色列表项点击事件\n  $(parentDoc).on('click', '.character-list-item', function () {\n    const characterName = $(this).data('name');\n    $('.character-list-item', parentDoc).removeClass('active');\n    $(this).addClass('active');\n    loadCharacterDetail(characterName);\n  });\n\n  // 添加参数按钮事件\n  $(parentDoc).on('click', '#add-param-btn', function () {\n    addEmptyRelationshipParam();\n  });\n\n  // 删除参数按钮事件\n  $(parentDoc).on('click', '.param-remove', function () {\n    $(this).closest('.relationship-param').remove();\n  });\n\n  // 保存角色数据按钮事件\n  $(parentDoc).on('click', '#save-character-data-btn', function () {\n    saveCharacterDetailChanges();\n  });\n\n  // 删除角色数据按钮事件\n  $(parentDoc).on('click', '#delete-character-data-btn', function () {\n    const characterName = $('#character-name', parentDoc).text();\n    if (confirm(`确定要删除角色 \"${characterName}\" 的数据吗？此操作不可撤销。`)) {\n      deleteCharacterData(characterName);\n    }\n  });\n}\n\n// 加载角色数据列表\nasync function loadCharacterDataList() {\n  try {\n    const parentDoc = window.parent.document;\n    const $characterList = $('#character-data-list', parentDoc);\n\n    // 显示加载中\n    $characterList.html('<p class=\"loading-text\">加载中...</p>');\n\n    // 从聊天变量中获取角色数据\n    const chatVariables = getVariables({ type: 'chat' });\n    const characterData = chatVariables.characterData || {};\n\n    // 更新列表\n    if (Object.keys(characterData).length === 0) {\n      $characterList.html('<p class=\"character-no-data\">暂无保存的角色数据</p>');\n      $('#character-data-empty-state', parentDoc).show();\n      $('#character-data-detail', parentDoc).hide();\n      return;\n    }\n\n    // 生成角色列表HTML\n    let listHtml = '';\n    Object.keys(characterData).forEach(name => {\n      listHtml += `<div class=\"character-list-item\" data-name=\"${name}\">${name}</div>`;\n    });\n\n    $characterList.html(listHtml);\n  } catch (error) {\n    console.error('[状态栏] 加载角色数据列表失败:', error);\n    const parentDoc = window.parent.document;\n    $('#character-data-list', parentDoc).html('<p class=\"character-no-data\">加载失败，请重试</p>');\n  }\n}\n\n// 加载角色详情\nasync function loadCharacterDetail(characterName) {\n  try {\n    const parentDoc = window.parent.document;\n\n    // 从聊天变量中获取角色数据\n    const chatVariables = getVariables({ type: 'chat' });\n    const characterData = chatVariables.characterData || {};\n    const charData = characterData[characterName];\n\n    if (!charData) {\n      console.error(`[状态栏] 未找到角色 \"${characterName}\" 的数据`);\n      return;\n    }\n\n    // 显示详情面板，隐藏空状态\n    $('#character-data-empty-state', parentDoc).hide();\n    $('#character-data-detail', parentDoc).show();\n\n    // 设置角色名\n    $('#character-name', parentDoc).text(characterName);\n\n    // 填充基本信息\n    $('#character-age', parentDoc).val(charData.basicInfo?.age || '');\n    $('#character-height', parentDoc).val(charData.basicInfo?.height || '');\n\n    // 处理特征和永久性状态，可能是字符串或数组\n    let traits = charData.basicInfo?.traits || '';\n    if (Array.isArray(traits)) {\n      traits = traits.join('@');\n    }\n\n    let permanent = charData.basicInfo?.permanent || '';\n    if (Array.isArray(permanent)) {\n      permanent = permanent.join('@');\n    }\n\n    $('#character-traits', parentDoc).val(traits);\n    $('#character-permanent', parentDoc).val(permanent);\n\n    // 渲染关系参数\n    renderRelationshipParams(charData.relationshipParameters);\n  } catch (error) {\n    console.error('[状态栏] 加载角色详情失败:', error);\n  }\n}\n\n// 渲染关系参数\nfunction renderRelationshipParams(params) {\n  const parentDoc = window.parent.document;\n  const $container = $('#relationship-params-container', parentDoc);\n\n  // 清空容器\n  $container.empty();\n\n  if (!params || Object.keys(params).length === 0) {\n    $container.html('<p class=\"character-no-data\">暂无关系参数</p>');\n    return;\n  }\n\n  // 遍历所有参数并渲染\n  Object.values(params).forEach(param => {\n    $container.append(createRelationshipParamHTML(param.key, param.currentValue, param.maxValue, param.stage));\n  });\n}\n\n// 创建关系参数HTML\nfunction createRelationshipParamHTML(key, currentValue, maxValue, stage) {\n  return `\n    <div class=\"relationship-param\" data-key=\"${key}\">\n      <div class=\"param-header\">\n        <div class=\"param-name\">${key}</div>\n        <button class=\"param-remove\"><i class=\"fa-solid fa-times\"></i></button>\n      </div>\n      <div class=\"param-fields\">\n        <div class=\"character-field\">\n          <label>参数名称</label>\n          <input type=\"text\" class=\"character-input param-key\" value=\"${key || ''}\">\n        </div>\n        <div class=\"character-field\">\n          <label>阶段描述</label>\n          <input type=\"text\" class=\"character-input param-stage\" value=\"${stage || ''}\">\n        </div>\n        <div class=\"character-field\">\n          <label>当前值</label>\n          <input type=\"number\" class=\"character-input param-current\" min=\"0\" max=\"100\" value=\"${currentValue || 0}\">\n        </div>\n        <div class=\"character-field\">\n          <label>最大值</label>\n          <input type=\"number\" class=\"character-input param-max\" min=\"1\" max=\"100\" value=\"${maxValue || 100}\">\n        </div>\n      </div>\n    </div>\n  `;\n}\n\n// 添加空的关系参数\nfunction addEmptyRelationshipParam() {\n  const parentDoc = window.parent.document;\n  const $container = $('#relationship-params-container', parentDoc);\n\n  // 如果容器中有\"暂无关系参数\"的提示，则移除\n  const $noData = $container.find('.character-no-data');\n  if ($noData.length > 0) {\n    $noData.remove();\n  }\n\n  // 添加一个空的参数表单\n  $container.append(createRelationshipParamHTML('新参数', 0, 100, ''));\n}\n\n// 保存角色详情更改\nasync function saveCharacterDetailChanges() {\n  try {\n    const parentDoc = window.parent.document;\n    const characterName = $('#character-name', parentDoc).text();\n\n    // 从聊天变量中获取现有角色数据\n    const chatVariables = getVariables({ type: 'chat' });\n    if (!chatVariables.characterData) {\n      chatVariables.characterData = {};\n    }\n\n    // 准备新的角色数据对象\n    const characterData = {\n      basicInfo: {\n        age: $('#character-age', parentDoc).val(),\n        height: $('#character-height', parentDoc).val(),\n        traits: $('#character-traits', parentDoc).val(),\n        permanent: $('#character-permanent', parentDoc).val(),\n      },\n      relationshipParameters: {},\n    };\n\n    // 收集所有关系参数\n    $('.relationship-param', parentDoc).each(function () {\n      const $param = $(this);\n      const key = $param.find('.param-key').val();\n\n      // 如果参数名为空，跳过\n      if (!key || key.trim() === '') {\n        return;\n      }\n\n      const currentValue = parseInt($param.find('.param-current').val()) || 0;\n      const maxValue = parseInt($param.find('.param-max').val()) || 100;\n      const stage = $param.find('.param-stage').val() || '';\n\n      characterData.relationshipParameters[key] = {\n        key,\n        currentValue,\n        maxValue,\n        stage,\n      };\n    });\n\n    // 更新聊天变量中的角色数据\n    chatVariables.characterData[characterName] = characterData;\n    await replaceVariables(chatVariables, { type: 'chat' });\n\n    // 显示保存成功提示\n    const $saveBtn = $('#save-character-data-btn', parentDoc);\n    const originalText = $saveBtn.html();\n    $saveBtn.html('<i class=\"fa-solid fa-check\"></i> 已保存');\n    setTimeout(() => {\n      $saveBtn.html(originalText);\n    }, 2000);\n\n    console.log(`[状态栏] 成功更新角色 \"${characterName}\" 的数据`);\n  } catch (error) {\n    console.error('[状态栏] 保存角色详情失败:', error);\n    alert(`保存失败: ${error.message}`);\n  }\n}\n\n// 删除角色数据\nasync function deleteCharacterData(characterName) {\n  try {\n    const parentDoc = window.parent.document;\n\n    // 从聊天变量中获取角色数据\n    const chatVariables = getVariables({ type: 'chat' });\n\n    if (!chatVariables.characterData || !chatVariables.characterData[characterName]) {\n      console.warn(`[状态栏] 未找到角色 \"${characterName}\" 的数据，无需删除`);\n      return;\n    }\n\n    // 删除指定角色的数据\n    delete chatVariables.characterData[characterName];\n    await replaceVariables(chatVariables, { type: 'chat' });\n\n    // 刷新角色列表并重置详情视图\n    loadCharacterDataList();\n    $('#character-data-empty-state', parentDoc).show();\n    $('#character-data-detail', parentDoc).hide();\n\n    console.log(`[状态栏] 成功删除角色 \"${characterName}\" 的数据`);\n  } catch (error) {\n    console.error('[状态栏] 删除角色数据失败:', error);\n    alert(`删除失败: ${error.message}`);\n  }\n}\n\n// 添加缺失的函数定义 - 更新单个条目状态\nasync function updateEntryState(uid, isEnabled) {\n  try {\n    // 获取所有条目\n    const entries = await getLorebookEntries(lorebook_name);\n\n    // 找到对应UID的条目\n    const entryIndex = entries.findIndex(entry => parseInt(entry.uid) === parseInt(uid));\n\n    // 如果找不到条目，抛出错误\n    if (entryIndex === -1) {\n      throw new Error(`找不到UID为${uid}的条目`);\n    }\n\n    // 创建条目的副本\n    const updatedEntry = { ...entries[entryIndex] };\n\n    // 更新启用状态\n    updatedEntry.enabled = isEnabled;\n\n    // 更新条目\n    entries[entryIndex] = updatedEntry;\n\n    // 保存回Lorebook\n    await setLorebookEntries(lorebook_name, entries);\n\n    console.log(`[状态栏] 条目 ${uid} 的状态已更新为 ${isEnabled ? '启用' : '禁用'}`);\n    return true;\n  } catch (error) {\n    console.error(`[状态栏] 更新条目状态失败:`, error);\n    throw error;\n  }\n}\n\n// 批量更新所有条目状态\nasync function updateAllEntriesState(isEnabled) {\n  try {\n    // 获取所有条目\n    const entries = await getLorebookEntries(lorebook_name);\n\n    // 过滤出非设置条目\n    const regularEntries = entries.filter(entry => !entry.comment.startsWith('设置-'));\n\n    // 更新所有条目状态\n    let updatedCount = 0;\n    const updatedEntries = entries.map(entry => {\n      // 忽略设置条目\n      if (entry.comment.startsWith('设置-')) {\n        return entry;\n      }\n\n      // 只有在状态需要变更时才修改\n      if (entry.enabled !== isEnabled) {\n        updatedCount++;\n        return { ...entry, enabled: isEnabled };\n      }\n\n      return entry;\n    });\n\n    // 如果有条目需要更新\n    if (updatedCount > 0) {\n      await setLorebookEntries(lorebook_name, updatedEntries);\n      console.log(`[状态栏] 已${isEnabled ? '启用' : '禁用'} ${updatedCount} 个条目`);\n    } else {\n      console.log(`[状态栏] 所有条目已经是${isEnabled ? '启用' : '禁用'}状态，无需更新`);\n    }\n\n    return true;\n  } catch (error) {\n    console.error(`[状态栏] 批量更新条目状态失败:`, error);\n    throw error;\n  }\n}\n",
                        "info": "",
                        "buttons": [],
                        "enabled": false
                    },
                    {
                        "id": "40129ffe-2c1d-4c23-8f7b-06e0c8274d9d",
                        "name": "世界书&正则选择器",
                        "content": "\"use strict\";\n\n/* --- Configuration --- */\n// Combined Panel & Button\nconst COMBINED_PANEL_ID = 'global-combined-selector-panel';\nconst COMBINED_BUTTON_ID = 'global-combined-selector-button';\nconst COMBINED_BUTTON_ICON = 'fa-solid fa-list-alt'; // Generic icon\nconst COMBINED_BUTTON_TOOLTIP = '切换 正则/世界书 面板';\nconst COMBINED_BUTTON_TEXT_IN_MENU = '正则/世界书'; // Text for the button in the extensions menu\nconst ACTIVE_TAB_CLASS = 'active-tab';\nconst ACTIVE_CONTENT_CLASS = 'active-content';\n\n// Tabs & Content Areas\nconst REGEX_TAB_ID = 'regex-tab';\nconst LOREBOOK_TAB_ID = 'lorebook-tab';\nconst REGEX_CONTENT_ID = 'regex-content';\nconst LOREBOOK_CONTENT_ID = 'lorebook-content';\n\n// Regex Specific\nconst REGEX_ITEM_CLASS = 'global-regex-item';\nconst STARRED_REGEX_CLASS = 'starred-global-regex';\nconst REGEX_STAR_ICON_CLASS = 'regex-star-icon';\nconst REGEX_SEARCH_INPUT_CLASS = 'regex-search-input';\nconst REGEX_LIST_CLASS = 'regex-list';\nconst REGEX_ITEM_DISABLED_CLASS = 'disabled';\nconst LOCAL_STORAGE_KEY_REGEX_STARRED = 'globalRegexSelector_starred';\n\n// Lorebook Specific\nconst LOREBOOK_ITEM_CLASS = 'global-lorebook-item';\nconst SELECTED_LOREBOOK_CLASS = 'selected-global-lorebook';\nconst STARRED_LOREBOOK_CLASS = 'starred-global-lorebook';\nconst LOREBOOK_STAR_ICON_CLASS = 'lorebook-star-icon';\nconst LOREBOOK_SEARCH_INPUT_CLASS = 'lorebook-search-input';\nconst LOREBOOK_LIST_CLASS = 'lorebook-list';\nconst LOCAL_STORAGE_KEY_LOREBOOK_STARRED = 'globalLorebookSelector_starred';\n\n/* --- Helper Function (Error Handling) --- */\nfunction errorCatched(fn, context = 'Combined Selector') {\n    const onError = (error) => {\n        let iframeName = 'UnknownIframe';\n        try {\n            iframeName = (typeof getIframeName === 'function') ? getIframeName() : 'UnknownIframe';\n        } catch (e) {\n            console.warn(`(${context}) Could not get iframe name:`, e);\n        }\n        const errorMessage = `Error in ${iframeName} (${context}) ${error.stack || error.message || error.name}`;\n        console.error(errorMessage);\n        if (typeof triggerSlash === 'function') {\n            try {\n                triggerSlash(`echo severity=error ${errorMessage.substring(0, 500)}...`);\n            } catch (e) {\n                console.error(`(${context}) Failed to triggerSlash for error:`, e);\n            }\n        }\n    };\n    return (...args) => {\n        try {\n            const result = fn(...args);\n            if (result instanceof Promise) {\n                return result.catch(error => {\n                    onError(error);\n                    throw error; // Rethrow so await calls catch it\n                });\n            }\n            return result;\n        } catch (error) {\n            onError(error);\n            throw error; // Rethrow so caller knows it failed\n        }\n    };\n}\n\n/* --- API Wrappers & Polyfills (Ensure functions exist) --- */\n// Common\nconst triggerSlash = window.triggerSlash;\nconst getIframeName = window.getIframeName;\n\n// Regex Specific\nconst getTavernRegexes = window.getTavernRegexes;\nconst replaceTavernRegexes = window.replaceTavernRegexes;\n\n// Lorebook Specific\nconst getLorebooks = window.getLorebooks;\nconst getLorebookSettings = window.getLorebookSettings;\nconst setLorebookSettings = window.setLorebookSettings;\n\n// Wrapped Regex API Call\nconst getFullTavernRegexes = errorCatched(async () => {\n    console.log('Combined Selector (Regex): Reading all Tavern regexes (global & character)...');\n    if (typeof getTavernRegexes !== 'function') {\n        console.error('Combined Selector (Regex): getTavernRegexes function is not available.');\n        throw new Error('getTavernRegexes function not found.');\n    }\n    try {\n        const tavernRegexes = await getTavernRegexes({ scope: 'all' });\n        console.log('Combined Selector (Regex): Fetched all Tavern regexes:', tavernRegexes);\n        return tavernRegexes || [];\n    } catch (error) {\n        console.error('Combined Selector (Regex): Error fetching Tavern regexes:', error);\n        return [];\n    }\n}, 'getFullTavernRegexes');\n\n// Wrapped Lorebook API Calls (add error catching)\nconst getLorebooksSafe = errorCatched(async () => {\n    if (typeof getLorebooks !== 'function') {\n        console.error('Combined Selector (Lorebook): getLorebooks function is not available.');\n        throw new Error('getLorebooks function not found.');\n    }\n    return await getLorebooks() || [];\n}, 'getLorebooks');\n\nconst getLorebookSettingsSafe = errorCatched(async () => {\n    if (typeof getLorebookSettings !== 'function') {\n        console.error('Combined Selector (Lorebook): getLorebookSettings function is not available.');\n        throw new Error('getLorebookSettings function not found.');\n    }\n    return await getLorebookSettings() || { selected_global_lorebooks: [] };\n}, 'getLorebookSettings');\n\nconst setLorebookSettingsSafe = errorCatched(async (settings) => {\n    if (typeof setLorebookSettings !== 'function') {\n        console.error('Combined Selector (Lorebook): setLorebookSettings function is not available.');\n        throw new Error('setLorebookSettings function not found.');\n    }\n    await setLorebookSettings(settings);\n}, 'setLorebookSettings');\n\n/* --- Mobile Detection Helper --- */\nconst isMobile = () => {\n    return ('ontouchstart' in window || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0);\n};\n\n/* --- Starred Item Storage Logic --- */\n// Regex\nconst getStarredRegexFromStorage = errorCatched(() => {\n    try {\n        const storedData = localStorage.getItem(LOCAL_STORAGE_KEY_REGEX_STARRED);\n        return storedData ? JSON.parse(storedData) : [];\n    } catch (error) {\n        console.error('Combined Selector (Regex): Error reading starred regex names from localStorage:', error);\n        return [];\n    }\n}, 'getStarredRegexFromStorage');\n\nconst saveStarredRegexToStorage = errorCatched((starredArray) => {\n    try {\n        const validStarredArray = starredArray.filter(item => typeof item === 'string');\n        localStorage.setItem(LOCAL_STORAGE_KEY_REGEX_STARRED, JSON.stringify(validStarredArray));\n    } catch (error) {\n        console.error('Combined Selector (Regex): Error saving starred regex names to localStorage:', error);\n        if (typeof triggerSlash === 'function') {\n            triggerSlash(`echo severity=error Error saving starred regex.`);\n        }\n    }\n}, 'saveStarredRegexToStorage');\n\n// Lorebook\nconst getStarredLorebooksFromStorage = errorCatched(() => {\n    try {\n        const storedData = localStorage.getItem(LOCAL_STORAGE_KEY_LOREBOOK_STARRED);\n        return storedData ? JSON.parse(storedData) : [];\n    } catch (error) {\n        console.error('Combined Selector (Lorebook): Error reading starred lorebooks from localStorage:', error);\n        return [];\n    }\n}, 'getStarredLorebooksFromStorage');\n\nconst saveStarredLorebooksToStorage = errorCatched((starredArray) => {\n    try {\n        const validStarredArray = starredArray.filter(item => typeof item === 'string');\n        localStorage.setItem(LOCAL_STORAGE_KEY_LOREBOOK_STARRED, JSON.stringify(validStarredArray));\n    } catch (error) {\n        console.error('Combined Selector (Lorebook): Error saving starred lorebooks to localStorage:', error);\n        if (typeof triggerSlash === 'function') {\n            triggerSlash(`echo severity=error Error saving starred lorebooks.`);\n        }\n    }\n}, 'saveStarredLorebooksToStorage');\n\n/* --- State for Pending Regex Changes --- */\nlet pendingRegexChanges = {};\n\n/* --- Panel Logic --- */\n\n/* Update Regex List Display */\nconst updateRegexListDisplay = errorCatched(async ($listContainer, searchTerm = '') => {\n    if (!$listContainer || $listContainer.length === 0) return;\n    $listContainer.empty().append('<p>加载中...</p>');\n    const lowerCaseSearchTerm = searchTerm.toLowerCase().trim();\n\n    try {\n        const allTavernRegexes = await getFullTavernRegexes();\n        const starredRegexNames = getStarredRegexFromStorage();\n        $listContainer.empty();\n\n        if (!allTavernRegexes || allTavernRegexes.length === 0) {\n            $listContainer.append('<p>未在全局设置中找到任何酒馆正则表达式。</p>');\n            return;\n        }\n\n        const filteredRegexes = allTavernRegexes.filter(regex => {\n            const name = regex.script_name || '';\n            const pattern = regex.find_regex || '';\n            return lowerCaseSearchTerm === '' ||\n                   name.toLowerCase().includes(lowerCaseSearchTerm) ||\n                   pattern.toLowerCase().includes(lowerCaseSearchTerm);\n        });\n\n        if (filteredRegexes.length === 0) {\n             $listContainer.append(`<p>没有匹配 \"${searchTerm}\" 的正则表达式。</p>`);\n             return;\n        }\n\n        const globalRegexes = filteredRegexes.filter(regex => regex.scope === 'global');\n        const localRegexes = filteredRegexes.filter(regex => regex.scope === 'character');\n        let hasDisplayedGlobal = false;\n\n        if (globalRegexes.length > 0) {\n            const starredGlobalItems = [];\n            const unstarredGlobalItems = [];\n            globalRegexes.forEach(regex => {\n                if (starredRegexNames.includes(regex.script_name)) starredGlobalItems.push(regex);\n                else unstarredGlobalItems.push(regex);\n            });\n            starredGlobalItems.sort((a, b) => (a.script_name || '').localeCompare(b.script_name || ''));\n            unstarredGlobalItems.sort((a, b) => (a.script_name || '').localeCompare(b.script_name || ''));\n\n            if (starredGlobalItems.length > 0) {\n                $listContainer.append('<div class=\"regex-section-title\">⭐ 已标记全局正则</div>');\n                starredGlobalItems.forEach(regex => addRegexItem(regex, $listContainer, true, false));\n                hasDisplayedGlobal = true;\n            }\n            if (starredGlobalItems.length > 0 && unstarredGlobalItems.length > 0) {\n                $listContainer.append('<div class=\"regex-divider\"></div>');\n            }\n            if (unstarredGlobalItems.length > 0) {\n                 if (!hasDisplayedGlobal) $listContainer.append('<div class=\"regex-section-title\">全局正则</div>');\n                unstarredGlobalItems.forEach(regex => addRegexItem(regex, $listContainer, false, false));\n                hasDisplayedGlobal = true;\n            }\n        }\n\n        if (localRegexes.length > 0) {\n            if (hasDisplayedGlobal) $listContainer.append('<div class=\"regex-divider local-divider\"></div>');\n            $listContainer.append('<div class=\"regex-section-title\">局部正则 (当前卡片)</div>');\n            localRegexes.sort((a, b) => (a.script_name || '').localeCompare(b.script_name || ''));\n            localRegexes.forEach(regex => addRegexItem(regex, $listContainer, false, true));\n        }\n\n    } catch (error) {\n        $listContainer.empty().append('<p>加载正则表达式时出错。</p>');\n        console.error('Combined Selector (Regex): Error updating regex list display', error);\n    }\n}, 'updateRegexListDisplay');\n\nfunction addRegexItem(regex, $container, isStarred, isLocal) {\n    const name = regex.script_name || 'Unnamed Regex';\n    const enabled = regex.enabled;\n    const scope = regex.scope;\n\n    const $item = $('<div></div>')\n        .addClass(REGEX_ITEM_CLASS)\n        .attr('data-regex-name', name)\n        .attr('data-enabled', enabled)\n        .attr('data-scope', scope);\n\n    if (!enabled) $item.addClass(REGEX_ITEM_DISABLED_CLASS);\n\n    const $content = $('<div></div>').addClass('regex-item-content');\n    const $name = $('<span></span>').addClass('regex-item-name').text(name);\n    $content.append($name);\n\n    const $controls = $('<div></div>').addClass('regex-item-controls');\n    if (!isLocal) {\n        const $star = $('<span></span>')\n            .addClass(REGEX_STAR_ICON_CLASS)\n            .html(isStarred ? '★' : '☆')\n            .attr('title', isStarred ? '取消标记' : '标记为常用');\n        $controls.append($star);\n    }\n    $item.append($content).append($controls);\n    if (isStarred && !isLocal) $item.addClass(STARRED_REGEX_CLASS);\n    $container.append($item);\n}\n\nconst updateLorebookListDisplay = errorCatched(async ($listContainer, searchTerm = '') => {\n    if (!$listContainer || $listContainer.length === 0) return;\n    $listContainer.empty().append('<p>加载中...</p>');\n    const lowerCaseSearchTerm = searchTerm.toLowerCase().trim();\n\n    try {\n        const [allLorebooks, currentSettings] = await Promise.all([\n            getLorebooksSafe(),\n            getLorebookSettingsSafe()\n        ]);\n        const starredLorebooks = getStarredLorebooksFromStorage();\n        $listContainer.empty();\n\n        if (!allLorebooks || allLorebooks.length === 0) {\n            $listContainer.append('<p>未找到世界书。</p>');\n            return;\n        }\n\n        const currentGlobal = currentSettings.selected_global_lorebooks || [];\n        const filteredLorebooks = allLorebooks.filter(name =>\n            lowerCaseSearchTerm === '' || name.toLowerCase().includes(lowerCaseSearchTerm)\n        );\n\n        if (filteredLorebooks.length === 0) {\n             $listContainer.append(`<p>没有匹配 \"${searchTerm}\" 的世界书。</p>`);\n             return;\n        }\n\n        const starredBooks = [];\n        const unstarredBooks = [];\n        filteredLorebooks.forEach(name => {\n            if (starredLorebooks.includes(name)) starredBooks.push(name);\n            else unstarredBooks.push(name);\n        });\n        starredBooks.sort((a, b) => a.localeCompare(b));\n        unstarredBooks.sort((a, b) => a.localeCompare(b));\n\n        if (starredBooks.length > 0) {\n            $listContainer.append('<div class=\"lorebook-section-title\">⭐ 已标记世界书</div>');\n            starredBooks.forEach(name => addLorebookItem(name, $listContainer, currentGlobal, true));\n        }\n        if (starredBooks.length > 0 && unstarredBooks.length > 0) {\n            $listContainer.append('<div class=\"lorebook-divider\"></div>');\n        }\n        if (unstarredBooks.length > 0) {\n             if (starredBooks.length === 0) {\n                 // $listContainer.append('<div class=\"lorebook-section-title\">全部世界书</div>');\n             }\n            unstarredBooks.forEach(name => addLorebookItem(name, $listContainer, currentGlobal, false));\n        }\n\n    } catch (error) {\n        $listContainer.empty().append('<p>加载世界书时出错。</p>');\n        console.error('Combined Selector (Lorebook): Error updating lorebook list display', error);\n        if (typeof triggerSlash === 'function') {\n            triggerSlash(`echo severity=error Error loading lorebooks.`);\n        }\n    }\n}, 'updateLorebookListDisplay');\n\nfunction addLorebookItem(name, $container, selectedLorebooks, isStarred) {\n    const $item = $('<div></div>')\n        .addClass(LOREBOOK_ITEM_CLASS)\n        .attr('data-lorebook-name', name);\n\n    const $content = $('<div></div>').addClass('lorebook-item-content').text(name);\n    const $controls = $('<div></div>').addClass('lorebook-item-controls');\n    const $star = $('<span></span>')\n        .addClass(LOREBOOK_STAR_ICON_CLASS)\n        .html(isStarred ? '★' : '☆')\n        .attr('title', isStarred ? '取消标记' : '标记为常用');\n    $controls.append($star);\n    $item.append($content).append($controls);\n\n    if (selectedLorebooks.includes(name)) $item.addClass(SELECTED_LOREBOOK_CLASS);\n    if (isStarred) $item.addClass(STARRED_LOREBOOK_CLASS);\n    $container.append($item);\n}\n\nconst toggleCombinedPanel = errorCatched(async () => {\n    const parentDoc = window.parent.document;\n    const $panel = $(`#${COMBINED_PANEL_ID}`, parentDoc);\n    const $button = $(`#${COMBINED_BUTTON_ID}`, parentDoc);\n\n    if (!$panel.length) return;\n\n    if ($panel.is(':visible')) {\n        $panel.hide(); // This sets display: none\n        if ($button.length) $button.removeClass('active');\n    } else {\n        const $activeTab = $panel.find(`.tab-button.${ACTIVE_TAB_CLASS}`);\n        const activeTabId = $activeTab.length ? $activeTab.attr('id') : REGEX_TAB_ID;\n\n        const $activeContent = $panel.find(`#${activeTabId === REGEX_TAB_ID ? REGEX_CONTENT_ID : LOREBOOK_CONTENT_ID}`);\n        const $searchInput = $activeContent.find(`.${activeTabId === REGEX_TAB_ID ? REGEX_SEARCH_INPUT_CLASS : LOREBOOK_SEARCH_INPUT_CLASS}`);\n        const $list = $activeContent.find(`.${activeTabId === REGEX_TAB_ID ? REGEX_LIST_CLASS : LOREBOOK_LIST_CLASS}`);\n\n        if ($searchInput.length) $searchInput.val('');\n        if ($list.length) {\n             try {\n                 if (activeTabId === REGEX_TAB_ID) {\n                     await updateRegexListDisplay($list);\n                 } else {\n                     await updateLorebookListDisplay($list);\n                 }\n             } catch (e) { console.error(\"Combined Selector: Failed to update list on panel toggle.\"); }\n        }\n\n        $panel.css('display', 'flex'); // MODIFIED: Explicitly set display to flex\n        if ($button.length) $button.addClass('active');\n        if ($searchInput.length && !isMobile()) {\n             $searchInput.focus();\n        }\n    }\n}, 'toggleCombinedPanel');\n\nconst switchTab = errorCatched(async (tabId) => {\n    const parentDoc = window.parent.document;\n    const $panel = $(`#${COMBINED_PANEL_ID}`, parentDoc);\n    if (!$panel.length) return;\n\n    $panel.find('.tab-button').removeClass(ACTIVE_TAB_CLASS);\n    $panel.find(`#${tabId}`).addClass(ACTIVE_TAB_CLASS);\n\n    $panel.find('.tab-content').removeClass(ACTIVE_CONTENT_CLASS);\n    const contentId = (tabId === REGEX_TAB_ID) ? REGEX_CONTENT_ID : LOREBOOK_CONTENT_ID;\n    const $contentToShow = $panel.find(`#${contentId}`);\n    $contentToShow.addClass(ACTIVE_CONTENT_CLASS);\n\n    const $list = $contentToShow.find(`.${tabId === REGEX_TAB_ID ? REGEX_LIST_CLASS : LOREBOOK_LIST_CLASS}`);\n    const $searchInput = $contentToShow.find(`.${tabId === REGEX_TAB_ID ? REGEX_SEARCH_INPUT_CLASS : LOREBOOK_SEARCH_INPUT_CLASS}`);\n\n    if ($searchInput.length) $searchInput.val('');\n    if ($list.length) {\n        try {\n            if (tabId === REGEX_TAB_ID) {\n                await updateRegexListDisplay($list);\n            } else {\n                await updateLorebookListDisplay($list);\n            }\n         } catch (e) { console.error(`Combined Selector: Failed to update list on switching to tab ${tabId}.`); }\n     }\n     if ($searchInput.length && !isMobile()) {\n         $searchInput.focus();\n     }\n\n }, 'switchTab');\n\nconst toggleStarredRegex = errorCatched(async (regexName, $starElement) => {\n    const $item = $starElement.closest(`.${REGEX_ITEM_CLASS}`);\n    if (!$item.length || typeof regexName !== 'string') return;\n\n    const isBecomingStarred = !$item.hasClass(STARRED_REGEX_CLASS);\n    $starElement.html(isBecomingStarred ? '★' : '☆').attr('title', isBecomingStarred ? '取消标记' : '标记为常用');\n    $item.toggleClass(STARRED_REGEX_CLASS, isBecomingStarred);\n\n    try {\n        const currentStarred = getStarredRegexFromStorage();\n        let newStarred = isBecomingStarred\n            ? [...currentStarred, regexName]\n            : currentStarred.filter(name => name !== regexName);\n        newStarred = [...new Set(newStarred)];\n        saveStarredRegexToStorage(newStarred);\n\n        const parentDoc = window.parent.document;\n        const $panel = $(`#${COMBINED_PANEL_ID}`, parentDoc);\n        const $list = $panel.find(`#${REGEX_CONTENT_ID} .${REGEX_LIST_CLASS}`);\n        const $searchInput = $panel.find(`#${REGEX_CONTENT_ID} .${REGEX_SEARCH_INPUT_CLASS}`);\n        const currentSearchTerm = $searchInput.val() || '';\n        if ($list.length) await updateRegexListDisplay($list, currentSearchTerm);\n\n    } catch (error) {\n        console.error(`Combined Selector (Regex): Failed to toggle star for regex ${regexName}`, error);\n        $starElement.html(isBecomingStarred ? '☆' : '★').attr('title', isBecomingStarred ? '标记为常用' : '取消标记');\n        $item.toggleClass(STARRED_REGEX_CLASS);\n    }\n}, 'toggleStarredRegex');\n\nconst toggleStarredLorebook = errorCatched(async (lorebookName, $starElement) => {\n    const $item = $starElement.closest(`.${LOREBOOK_ITEM_CLASS}`);\n    if (!$item.length || typeof lorebookName !== 'string') return;\n\n    const isBecomingStarred = !$item.hasClass(STARRED_LOREBOOK_CLASS);\n    $starElement.html(isBecomingStarred ? '★' : '☆').attr('title', isBecomingStarred ? '取消标记' : '标记为常用');\n    $item.toggleClass(STARRED_LOREBOOK_CLASS, isBecomingStarred);\n\n    try {\n        const currentStarred = getStarredLorebooksFromStorage();\n        let newStarred = isBecomingStarred\n            ? [...currentStarred, lorebookName]\n            : currentStarred.filter(name => name !== lorebookName);\n        newStarred = [...new Set(newStarred)];\n        saveStarredLorebooksToStorage(newStarred);\n\n        const parentDoc = window.parent.document;\n        const $panel = $(`#${COMBINED_PANEL_ID}`, parentDoc);\n        const $list = $panel.find(`#${LOREBOOK_CONTENT_ID} .${LOREBOOK_LIST_CLASS}`);\n        const $searchInput = $panel.find(`#${LOREBOOK_CONTENT_ID} .${LOREBOOK_SEARCH_INPUT_CLASS}`);\n        const currentSearchTerm = $searchInput.val() || '';\n        if ($list.length) await updateLorebookListDisplay($list, currentSearchTerm);\n\n    } catch (error) {\n        console.error(`Combined Selector (Lorebook): Failed to toggle star for lorebook ${lorebookName}`, error);\n        $starElement.html(isBecomingStarred ? '☆' : '★').attr('title', isBecomingStarred ? '标记为常用' : '取消标记');\n        $item.toggleClass(STARRED_LOREBOOK_CLASS);\n    }\n}, 'toggleStarredLorebook');\n\nconst toggleRegexEnableState = errorCatched(async (regexName, $itemElement) => {\n    console.log(`Combined Selector (Regex): Staging toggle for \"${regexName}\"`);\n    let currentIntendedEnabledState;\n    if (pendingRegexChanges.hasOwnProperty(regexName)) {\n        currentIntendedEnabledState = pendingRegexChanges[regexName];\n    } else {\n        currentIntendedEnabledState = $itemElement.attr('data-enabled') === 'true';\n    }\n    const newIntendedEnabledState = !currentIntendedEnabledState;\n    pendingRegexChanges[regexName] = newIntendedEnabledState;\n    console.log(`Combined Selector (Regex): Staged \"${regexName}\" to be ${newIntendedEnabledState ? 'enabled' : 'disabled'}. Pending:`, pendingRegexChanges);\n    $itemElement.toggleClass(REGEX_ITEM_DISABLED_CLASS, !newIntendedEnabledState);\n}, 'toggleRegexEnableState');\n\nconst applyPendingRegexChanges = errorCatched(async () => {\n    const changesToApply = Object.keys(pendingRegexChanges);\n    if (changesToApply.length === 0) {\n        console.log('Combined Selector (Regex): No pending changes to apply.');\n        return;\n    }\n    console.log('Combined Selector (Regex): Applying pending changes:', pendingRegexChanges);\n\n    if (typeof replaceTavernRegexes !== 'function' || typeof getFullTavernRegexes !== 'function') {\n        console.error('Combined Selector (Regex): API functions (get/replace) not available. Cannot apply changes.');\n        alert('错误：无法应用正则更改，所需函数缺失。');\n        pendingRegexChanges = {};\n        return;\n    }\n\n    let currentRegexes;\n    try {\n        currentRegexes = await getFullTavernRegexes();\n    } catch (error) {\n        console.error('Combined Selector (Regex): Failed to get current regexes before applying changes.', error);\n        alert('错误：无法获取当前正则列表以应用更改。');\n        pendingRegexChanges = {};\n        return;\n    }\n\n    let changesMade = false;\n    const updatedRegexes = currentRegexes.map(regex => {\n        const name = regex.script_name;\n        if (pendingRegexChanges.hasOwnProperty(name)) {\n            const targetState = pendingRegexChanges[name];\n            if (regex.enabled !== targetState) {\n                console.log(`Combined Selector (Regex): Applying state ${targetState} to \"${name}\"`);\n                changesMade = true;\n                return { ...regex, enabled: targetState };\n            } else {\n                 console.log(`Combined Selector (Regex): State for \"${name}\" already matches target ${targetState}. No change needed.`);\n                 delete pendingRegexChanges[name];\n            }\n        }\n        return regex;\n    });\n\n     const finalChangesToApply = Object.keys(pendingRegexChanges);\n     if (finalChangesToApply.length === 0 || !changesMade) {\n         console.log('Combined Selector (Regex): No actual state changes needed after comparison. Aborting save.');\n         pendingRegexChanges = {};\n         return;\n     }\n\n    try {\n        console.log(`Combined Selector (Regex): Attempting to replace Tavern regexes (scope: all) with ${finalChangesToApply.length} accumulated changes...`);\n        await replaceTavernRegexes(updatedRegexes, { scope: 'all' });\n        console.log(`Combined Selector (Regex): Successfully called replaceTavernRegexes. Chat will reload.`);\n        pendingRegexChanges = {};\n    } catch (error) {\n        console.error(`Combined Selector (Regex): Failed to replace Tavern regexes with accumulated changes.`, error);\n        alert(`错误：保存累积的正则更改失败。`);\n        pendingRegexChanges = {};\n    }\n}, 'applyPendingRegexChanges');\n\nconst toggleGlobalLorebook = errorCatched(async (lorebookName, $itemElement) => {\n    console.log(`Combined Selector (Lorebook): Toggling global lorebook selection ${lorebookName}`);\n    $itemElement.toggleClass(SELECTED_LOREBOOK_CLASS);\n    const isAdding = $itemElement.hasClass(SELECTED_LOREBOOK_CLASS);\n\n    try {\n        const currentSettings = await getLorebookSettingsSafe();\n        const currentSelection = currentSettings.selected_global_lorebooks || [];\n        let newSelection;\n\n        if (currentSelection.includes(lorebookName)) {\n            newSelection = currentSelection.filter(name => name !== lorebookName);\n        } else {\n            newSelection = [...currentSelection, lorebookName];\n        }\n        newSelection = [...new Set(newSelection)];\n\n        const newSettings = { ...currentSettings, selected_global_lorebooks: newSelection };\n        await setLorebookSettingsSafe(newSettings);\n        console.log(`Combined Selector (Lorebook): Successfully updated selection for ${lorebookName}.`);\n\n    } catch (error) {\n        console.error(`Combined Selector (Lorebook): Failed to toggle global lorebook selection ${lorebookName}`, error);\n        if (typeof triggerSlash === 'function') {\n            triggerSlash(`echo severity=error Failed to toggle selection for ${lorebookName}.`);\n        }\n        $itemElement.toggleClass(SELECTED_LOREBOOK_CLASS);\n    }\n}, 'toggleGlobalLorebook');\n\n\n/* --- Initialization --- */\n$(() => {\n    const parentDoc = window.parent.document;\n\n    if ($(`#${COMBINED_BUTTON_ID}`, parentDoc).length > 0 && $(`#${COMBINED_BUTTON_ID}`, parentDoc).closest('#extensionsMenu').length > 0) {\n        console.log('Combined Selector: Already initialized in extensions menu.');\n        return;\n    }\n    console.log('Combined Selector: Initializing...');\n\n    /* 1. Create Panel Styles */\n    if ($('#global-combined-selector-styles', parentDoc).length === 0) {\n        const panelStyles = `\n            <style id=\"global-combined-selector-styles\">\n                /* --- Combined Panel --- */\n                #${COMBINED_PANEL_ID} {\n                    display: none; /* MODIFIED: Ensure panel is hidden by default */\n                    position: fixed;\n                    top: 50px;\n                    left: 50%;\n                    transform: translateX(-50%);\n                    width: 90%;\n                    max-width: 450px;\n                    max-height: 75vh;\n                    background-color: rgba(40, 40, 40, 0.95);\n                    color: #eee;\n                    border: 1px solid #555;\n                    border-radius: 8px;\n                    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);\n                    z-index: 9998;\n                    padding: 0;\n                    box-sizing: border-box;\n                    /* display: flex; <--- REMOVED from here, will be set by JS when shown */\n                    flex-direction: column;\n                    margin: 0;\n                }\n                @media (max-width: 768px) { #${COMBINED_PANEL_ID} { width: 95%; max-width: 380px; max-height: 70vh; top: 45px; } }\n\n                /* --- Header --- */\n                #${COMBINED_PANEL_ID} .panel-header { display: flex; justify-content: space-between; align-items: center; padding: 10px 15px; border-bottom: 1px solid #555; flex-shrink: 0; }\n                #${COMBINED_PANEL_ID} .panel-header h4 { margin: 0; font-size: 1.1em; }\n                #${COMBINED_PANEL_ID} .close-button { background: none; border: none; color: #ccc; font-size: 1.5em; cursor: pointer; padding: 0 5px; line-height: 1; }\n                #${COMBINED_PANEL_ID} .close-button:hover { color: #fff; }\n\n                /* --- Tabs --- */\n                #${COMBINED_PANEL_ID} .tab-container { display: flex; border-bottom: 1px solid #555; flex-shrink: 0; background-color: #2a2a2a; }\n                #${COMBINED_PANEL_ID} .tab-button { flex: 1; padding: 10px 15px; background: none; border: none; border-bottom: 3px solid transparent; color: #aaa; font-size: 1em; cursor: pointer; text-align: center; transition: color 0.2s, border-color 0.2s; }\n                #${COMBINED_PANEL_ID} .tab-button:hover { color: #eee; }\n                #${COMBINED_PANEL_ID} .tab-button.${ACTIVE_TAB_CLASS} { color: #fff; border-bottom-color: #9a7ace; font-weight: bold; }\n\n                /* --- Content Area --- */\n                #${COMBINED_PANEL_ID} .content-container { flex-grow: 1; display: flex; overflow: hidden; }\n                #${COMBINED_PANEL_ID} .tab-content { display: none; flex-direction: column; width: 100%; flex-grow: 1; overflow: hidden; padding: 15px; box-sizing: border-box; }\n                #${COMBINED_PANEL_ID} .tab-content.${ACTIVE_CONTENT_CLASS} { display: flex; }\n\n                /* --- Search Inputs --- */\n                #${COMBINED_PANEL_ID} .search-container { margin-bottom: 10px; padding-bottom: 10px; border-bottom: 1px solid #555; flex-shrink: 0; }\n                #${COMBINED_PANEL_ID} .search-input { width: 100%; padding: 8px 10px; background-color: #222; border: 1px solid #555; color: #eee; border-radius: 4px; box-sizing: border-box; }\n                #${COMBINED_PANEL_ID} .search-input::placeholder { color: #888; }\n\n                /* --- List Containers --- */\n                #${COMBINED_PANEL_ID} .list-container { overflow-y: auto; flex-grow: 1; padding-right: 5px; margin-right: -5px; min-height: 0; }\n                #${COMBINED_PANEL_ID} .list-container p { text-align: center; color: #aaa; margin-top: 20px; }\n\n                /* --- Section Titles & Dividers --- */\n                #${COMBINED_PANEL_ID} .regex-section-title,\n                #${COMBINED_PANEL_ID} .lorebook-section-title {\n                    color: #aaa; font-size: 0.9em; margin: 15px 0 5px 0; padding-left: 5px; font-weight: bold;\n                }\n                #${COMBINED_PANEL_ID} .regex-divider,\n                #${COMBINED_PANEL_ID} .lorebook-divider {\n                    height: 1px; background-color: #555; margin: 10px 0;\n                }\n                #${REGEX_CONTENT_ID} .regex-divider.local-divider {\n                    margin-top: 15px; border-top: 1px dashed #666; background-color: transparent; height: 0;\n                }\n\n                /* --- Regex Specific Styles --- */\n                #${REGEX_CONTENT_ID} .${REGEX_ITEM_CLASS} { padding: 8px 12px; margin-bottom: 5px; border: 1px solid #444; border-radius: 4px; cursor: pointer; transition: background-color 0.2s ease, border-color 0.2s ease, opacity 0.2s ease; background-color: #333; font-size: 0.95em; user-select: none; display: flex; justify-content: space-between; align-items: center; }\n                #${REGEX_CONTENT_ID} .${REGEX_ITEM_CLASS}:hover { background-color: #454545; border-color: #666; }\n                #${REGEX_CONTENT_ID} .regex-item-content { flex-grow: 1; overflow: hidden; margin-right: 5px; display: flex; align-items: center; }\n                #${REGEX_CONTENT_ID} .regex-item-name { font-weight: bold; text-overflow: ellipsis; white-space: nowrap; overflow: hidden; }\n                #${REGEX_CONTENT_ID} .regex-item-controls { margin-left: 8px; flex-shrink: 0; min-width: 20px; text-align: right; }\n                #${REGEX_CONTENT_ID} .${REGEX_STAR_ICON_CLASS} { color: #ffcc33; cursor: pointer; font-size: 1.2em; transition: transform 0.1s, color 0.2s; display: inline-block; }\n                #${REGEX_CONTENT_ID} .${REGEX_STAR_ICON_CLASS}:hover { transform: scale(1.2); color: #ffd700; }\n                #${REGEX_CONTENT_ID} .${STARRED_REGEX_CLASS} { border-left: 3px solid #ffcc33; }\n                #${REGEX_CONTENT_ID} .${REGEX_ITEM_DISABLED_CLASS} { opacity: 0.6; background-color: #2a2a2a; border-color: #333; }\n                #${REGEX_CONTENT_ID} .${REGEX_ITEM_DISABLED_CLASS} .regex-item-name { text-decoration: line-through; color: #999; }\n                #${REGEX_CONTENT_ID} .${REGEX_ITEM_DISABLED_CLASS}:hover { background-color: #353535; }\n\n                /* --- Lorebook Specific Styles --- */\n                #${LOREBOOK_CONTENT_ID} .${LOREBOOK_ITEM_CLASS} { padding: 8px 12px; margin-bottom: 5px; border: 1px solid #444; border-radius: 4px; cursor: pointer; transition: background-color 0.2s ease, border-color 0.2s ease; background-color: #333; font-size: 0.95em; user-select: none; display: flex; justify-content: space-between; align-items: center; }\n                #${LOREBOOK_CONTENT_ID} .${LOREBOOK_ITEM_CLASS}:hover { background-color: #454545; border-color: #666; }\n                #${LOREBOOK_CONTENT_ID} .lorebook-item-content { flex-grow: 1; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; margin-right: 5px; }\n                #${LOREBOOK_CONTENT_ID} .lorebook-item-controls { margin-left: 8px; flex-shrink: 0; }\n                #${LOREBOOK_CONTENT_ID} .${LOREBOOK_STAR_ICON_CLASS} { color: #ffcc33; cursor: pointer; font-size: 1.2em; transition: transform 0.1s, color 0.2s; display: inline-block; }\n                #${LOREBOOK_CONTENT_ID} .${LOREBOOK_STAR_ICON_CLASS}:hover { transform: scale(1.2); color: #ffd700; }\n                #${LOREBOOK_CONTENT_ID} .${STARRED_LOREBOOK_CLASS} { border-left: 3px solid #ffcc33; }\n                #${LOREBOOK_CONTENT_ID} .${SELECTED_LOREBOOK_CLASS} { background-color: #4a5d7e; border-color: #7a9dce; font-weight: bold; color: #fff; }\n                #${LOREBOOK_CONTENT_ID} .${SELECTED_LOREBOOK_CLASS}:hover { background-color: #5a6d8e; border-color: #8aaade; }\n                #${LOREBOOK_CONTENT_ID} .${SELECTED_LOREBOOK_CLASS}.${STARRED_LOREBOOK_CLASS} { background-color: #4a5d7e; border-color: #7a9dce; border-left: 3px solid #ffcc33; font-weight: bold; color: #fff; }\n                #${LOREBOOK_CONTENT_ID} .${SELECTED_LOREBOOK_CLASS}.${STARRED_LOREBOOK_CLASS}:hover { background-color: #5a6d8e; border-color: #8aaade; }\n\n                /* --- Combined Button (Styling for when it's in the extensions menu) --- */\n                #${COMBINED_BUTTON_ID} { /* This ID is now on a div.list-group-item */\n                    cursor: pointer;\n                    /* Base styling (padding, font, hover bg) will come from .list-group-item and .interactable classes */\n                }\n                #${COMBINED_BUTTON_ID} i {\n                    /* Icon styling, e.g., font-size, color, can be set here if not handled by FontAwesome defaults or .list-group-item text color */\n                    /* margin-right for spacing between icon and text is handled by .flexGap5 on the parent div */\n                }\n                #${COMBINED_BUTTON_ID}.active {\n                    background-color: #6a4a7e !important; /* Distinct active color */\n                    color: #fff !important; /* Text color for active state */\n                }\n                #${COMBINED_BUTTON_ID}.active i {\n                     color: #fff !important; /* Icon color for active state, to match text */\n                }\n            </style>\n        `;\n        $('head', parentDoc).append(panelStyles);\n    }\n\n    /* 2. Create Panel HTML */\n    let $panel = $(`#${COMBINED_PANEL_ID}`, parentDoc);\n    if ($panel.length === 0) {\n        const panelHtml = `\n            <div id=\"${COMBINED_PANEL_ID}\">\n                <div class=\"panel-header\">\n                    <h4>正则&世界书快速选择</h4>\n                    <button class=\"close-button\" title=\"关闭\">×</button>\n                </div>\n                <div class=\"tab-container\">\n                    <button id=\"${REGEX_TAB_ID}\" class=\"tab-button ${ACTIVE_TAB_CLASS}\">正则</button>\n                    <button id=\"${LOREBOOK_TAB_ID}\" class=\"tab-button\">世界书</button>\n                </div>\n                <div class=\"content-container\">\n                    <div id=\"${REGEX_CONTENT_ID}\" class=\"tab-content ${ACTIVE_CONTENT_CLASS}\">\n                        <div class=\"search-container\">\n                            <input type=\"text\" class=\"search-input ${REGEX_SEARCH_INPUT_CLASS}\" placeholder=\"搜索正则...\">\n                        </div>\n                        <div class=\"list-container ${REGEX_LIST_CLASS}\"></div>\n                    </div>\n                    <div id=\"${LOREBOOK_CONTENT_ID}\" class=\"tab-content\">\n                        <div class=\"search-container\">\n                            <input type=\"text\" class=\"search-input ${LOREBOOK_SEARCH_INPUT_CLASS}\" placeholder=\"搜索世界书...\">\n                        </div>\n                        <div class=\"list-container ${LOREBOOK_LIST_CLASS}\"></div>\n                    </div>\n                </div>\n            </div>\n        `;\n        $('body', parentDoc).append(panelHtml);\n        $panel = $(`#${COMBINED_PANEL_ID}`, parentDoc);\n    }\n\n    /* 3. Create Button HTML & Insert */\n    let $button = $(`#${COMBINED_BUTTON_ID}`, parentDoc);\n    // If button exists but not in extensions menu, remove it to recreate in correct place\n    if ($button.length > 0 && !$button.closest('#extensionsMenu').length) {\n        console.log('Combined Selector: Removing old button instance.');\n        $button.remove();\n        $button = $(`#${COMBINED_BUTTON_ID}`, parentDoc); // Re-check, should be empty now\n    }\n\n    if ($button.length === 0) {\n        const buttonHtml = `\n            <div id=\"${COMBINED_BUTTON_ID}\" class=\"list-group-item flex-container flexGap5 interactable\" title=\"${COMBINED_BUTTON_TOOLTIP}\" tabIndex=\"0\">\n                <i class=\"${COMBINED_BUTTON_ICON}\"></i>\n                <span>${COMBINED_BUTTON_TEXT_IN_MENU}</span>\n            </div>\n        `;\n        const $extensionsMenu = $('#extensionsMenu', parentDoc);\n        let inserted = false;\n\n        if ($extensionsMenu.length) {\n            try {\n                $extensionsMenu.append(buttonHtml);\n                inserted = true;\n                console.log('Combined Selector: Button inserted into extensions menu.');\n            } catch (e) {\n                console.error(\"Combined Selector: Failed to insert button into extensions menu.\", e);\n            }\n        } else {\n            console.warn(\"Combined Selector: Extensions menu (#extensionsMenu) not found. Button cannot be inserted into menu.\");\n        }\n\n        if (inserted) {\n            $button = $(`#${COMBINED_BUTTON_ID}`, parentDoc);\n        } else if (!$extensionsMenu.length) {\n            // Do nothing, warning already logged\n        }\n         else {\n            console.error(\"Combined Selector: Failed to insert button!\");\n        }\n    }\n\n\n    /* 4. Add Event Listeners */\n    $(parentDoc).off(`click.${COMBINED_BUTTON_ID}`).on(`click.${COMBINED_BUTTON_ID}`, `#${COMBINED_BUTTON_ID}`, function(event) {\n        event.preventDefault();\n        toggleCombinedPanel();\n    });\n\n    $panel = $(`#${COMBINED_PANEL_ID}`, parentDoc);\n\n    $panel.off('click.combinedClose').on('click.combinedClose', '.close-button', async function() {\n        try {\n            await applyPendingRegexChanges();\n        } catch (e) {\n            console.error(\"Combined Selector: Error applying regex changes on close:\", e);\n        }\n        const $panelToClose = $(this).closest(`#${COMBINED_PANEL_ID}`);\n        const $buttonToDeactivate = $(`#${COMBINED_BUTTON_ID}`, parentDoc);\n        if ($panelToClose.length) $panelToClose.hide();\n        if ($buttonToDeactivate.length) $buttonToDeactivate.removeClass('active');\n    });\n\n    $panel.off('click.combinedTabs').on('click.combinedTabs', '.tab-button', function() {\n        const tabId = $(this).attr('id');\n        if (tabId && !$(this).hasClass(ACTIVE_TAB_CLASS)) {\n            switchTab(tabId);\n        }\n    });\n\n    $panel.off('input.combinedSearch').on('input.combinedSearch', '.search-input', function() {\n        const $activeContent = $panel.find('.tab-content.active-content');\n        const searchTerm = $(this).val();\n        const $listContainer = $activeContent.find('.list-container');\n\n        if ($listContainer.length) {\n            if ($activeContent.attr('id') === REGEX_CONTENT_ID) {\n                updateRegexListDisplay($listContainer, searchTerm);\n            } else if ($activeContent.attr('id') === LOREBOOK_CONTENT_ID) {\n                updateLorebookListDisplay($listContainer, searchTerm);\n            }\n        }\n    });\n\n    $panel.off('click.combinedItems').on('click.combinedItems', `.${REGEX_ITEM_CLASS}, .${LOREBOOK_ITEM_CLASS}`, function(event) {\n        if ($(event.target).hasClass(REGEX_STAR_ICON_CLASS) || $(event.target).closest(`.${REGEX_STAR_ICON_CLASS}`).length ||\n            $(event.target).hasClass(LOREBOOK_STAR_ICON_CLASS) || $(event.target).closest(`.${LOREBOOK_STAR_ICON_CLASS}`).length) {\n            return;\n        }\n\n        if ($(this).hasClass(REGEX_ITEM_CLASS)) {\n            const regexName = $(this).data('regex-name');\n            if (regexName) {\n                toggleRegexEnableState(regexName, $(this));\n            } else {\n                console.error('Combined Selector (Regex): Clicked item missing data-regex-name.');\n            }\n        } else if ($(this).hasClass(LOREBOOK_ITEM_CLASS)) {\n            const lorebookName = $(this).data('lorebook-name');\n            if (lorebookName) {\n                toggleGlobalLorebook(lorebookName, $(this));\n            } else {\n                console.error('Combined Selector (Lorebook): Clicked item missing data-lorebook-name.');\n            }\n        }\n    });\n\n    $panel.off('click.combinedStars').on('click.combinedStars', `.${REGEX_STAR_ICON_CLASS}, .${LOREBOOK_STAR_ICON_CLASS}`, function(event) {\n        event.stopPropagation();\n\n        if ($(this).hasClass(REGEX_STAR_ICON_CLASS)) {\n            const $item = $(this).closest(`.${REGEX_ITEM_CLASS}`);\n            const regexName = $item.data('regex-name');\n            if (regexName) {\n                toggleStarredRegex(regexName, $(this));\n            } else { console.error('Combined Selector (Regex): Star clicked missing name.'); }\n        } else if ($(this).hasClass(LOREBOOK_STAR_ICON_CLASS)) {\n            const $item = $(this).closest(`.${LOREBOOK_ITEM_CLASS}`);\n            const lorebookName = $item.data('lorebook-name');\n            if (lorebookName) {\n                toggleStarredLorebook(lorebookName, $(this));\n            } else { console.error('Combined Selector (Lorebook): Star clicked missing name.'); }\n        }\n    });\n\n    $(parentDoc).off(`click.${COMBINED_PANEL_ID}-outside`).on(`click.${COMBINED_PANEL_ID}-outside`, async function(event) {\n        const $currentPanel = $(`#${COMBINED_PANEL_ID}`, parentDoc); \n        if ($currentPanel.is(':visible') &&\n            !$(event.target).closest(`#${COMBINED_PANEL_ID}`).length &&\n            !$(event.target).closest(`#${COMBINED_BUTTON_ID}`).length)\n        {\n            try {\n                await applyPendingRegexChanges();\n            } catch (e) {\n                console.error(\"Combined Selector: Error applying regex changes on click outside:\", e);\n            }\n            const $buttonToDeactivate = $(`#${COMBINED_BUTTON_ID}`, parentDoc);\n            $currentPanel.hide();\n            if ($buttonToDeactivate.length) $buttonToDeactivate.removeClass('active');\n        }\n    });\n\n    console.log('Combined Selector: Initialization complete.');\n});",
                        "info": "作者:Aki",
                        "buttons": [],
                        "enabled": true
                    },
                    {
                        "id": "自动开启角色卡局部正则",
                        "name": "自动开启角色卡局部正则",
                        "content": "import 'https://fastly.jsdelivr.net/gh/StageDog/tavern_resource/dist/酒馆助手/自动开启角色卡局部正则/index.js'",
                        "info": "# 自动开启角色卡局部正则\n\n**作者:** 青空莉想做舞台少女的狗\n**版本:** 2025/04/21\n**源文件:** [点此跳转](https://gitgud.io/StageDog/tavern_resource/-/tree/main/src)\n",
                        "buttons": [],
                        "enabled": true
                    },
                    {
                        "id": "自动关闭前端卡不兼容选项",
                        "name": "自动关闭前端卡不兼容选项",
                        "content": "import 'https://fastly.jsdelivr.net/gh/StageDog/tavern_resource/dist/酒馆助手/自动关闭前端卡不兼容选项/index.js'",
                        "info": "# 自动关闭前端卡不兼容选项\n\n**作者:** 青空莉想做舞台少女的狗\n**版本:** 2025/04/21\n**源文件:** [点此跳转](https://gitgud.io/StageDog/tavern_resource/-/tree/main/src)\n\n启用后会执行一次:\n\n- 关闭 \"自动修复Markdown\"\n- 关闭 \"在响应中显示标签\"\n- 关闭 \"修剪不完整的句子\"\n- 关闭 \"禁止外部媒体\"\n",
                        "buttons": [],
                        "enabled": true
                    },
                    {
                        "id": "资源预载",
                        "name": "资源预载: 提前缓存角色卡的插图",
                        "content": "import 'https://fastly.jsdelivr.net/gh/StageDog/tavern_resource/dist/酒馆助手/资源预载/index.js'",
                        "info": "# 资源预载\n\n**作者:** 青空莉想做舞台少女的狗\n**版本:** 2025/04/21\n**原帖:** [点此跳转](https://discord.com/channels/1291925535324110879/1354791063935520898)\n**源文件:** [点此跳转](https://gitgud.io/StageDog/tavern_resource/-/tree/main/src)\n**说明:** 提前缓存\n\n在正则中新建一个 \"预载-xxx\" 正则, 它的`查找正则表达式`部分不必填写, `替换为`部分每行填入一个你要预载的图片链接\n\n```txt\nhttps://gitgud.io/lolodesu/lolobabytutorial/-/raw/master/lologame/角色/水手服/猫爪生气.png&inline=false\nhttps://gitgud.io/lolodesu/lolobabytutorial/-/raw/070ad4237dde7122c64facbd101fc89c9238a767/lologame/角色/水手服/猫爪生气.png?inline=false\nhttps://files.catbox.moe/bhxtss.png\n```\n\n## 注意\n\n这样的预载效果取决于保存图片的网站和浏览器设置，保底效果是图片本身被缓存到浏览器中，但需要加载图片时还会发送网络请求来询问缓存了的图片是否有效\n",
                        "buttons": [],
                        "enabled": true
                    },
                    {
                        "id": "预设防误触",
                        "name": "预设防误触",
                        "content": "import 'https://fastly.jsdelivr.net/gh/StageDog/tavern_resource/dist/酒馆助手/预设防误触/index.js'",
                        "info": "# 预设防误触\n\n**作者:** 青空莉想做舞台少女的狗\n**版本:** 2025/04/29\n**源文件:** [点此跳转](https://gitgud.io/StageDog/tavern_resource/-/tree/main/src)\n**说明:** 启用后将锁定预设除了 '流式传输'、'请求思维链' 和 '具体条目' 以外的选项, 不能通过界面来修改\n",
                        "buttons": [],
                        "enabled": true
                    },
                    {
                        "id": "样式加载",
                        "name": "样式加载: 像酒馆主题自定义 css 一样编写角色卡 css",
                        "content": "import 'https://fastly.jsdelivr.net/gh/StageDog/tavern_resource/dist/酒馆助手/样式加载/index.js'",
                        "info": "# 样式加载\n\n**作者:** 青空莉想做舞台少女的狗\n**版本:** 2025/04/21\n**原帖:** [点此跳转](https://discord.com/channels/1291925535324110879/1354783717910122496)\n**源文件:** [点此跳转](https://gitgud.io/StageDog/tavern_resource/-/tree/main/src)\n**说明:** 像酒馆主题自定义 css 一样编写角色卡 css\n\n在正则中新建一个 \"样式-xxx\" 正则, 它的`查找正则表达式`部分不必填写, `替换为`部分填入你需要加载的 css 内容\n\n例如:\n\n```css\n@import url(\"https://static.zeoseven.com/zsft/510/main/result.css\");\n\n:root {\n  --lolo-font: \"PING FANG SAN SHENG\";\n}\n```\n\n这样, 这个 css 内容将会像酒馆美化的 \"自定义 css\" 一样被加载.\n",
                        "buttons": [],
                        "enabled": true
                    },
                    {
                        "id": "标签化",
                        "name": "标签化: 随世界书、预设或链接配置自动开关正则、提示词条目",
                        "content": "import 'https://fastly.jsdelivr.net/gh/StageDog/tavern_resource/dist/酒馆助手/标签化/index.js'",
                        "info": "# 标签化: 根据预设自动开关正则、根据模型自动切换破限\n\n**作者:** 青空莉想做舞台少女的狗\n**版本:** 2025/05/15\n**原帖:** [点此跳转](https://discord.com/channels/1291925535324110879/1344362686900605043)\n**源文件:** [点此跳转](https://gitgud.io/StageDog/tavern_resource/-/tree/main/src)\n**说明:** 将酒馆标签化, 允许你根据预设自动开关正则、根据模型自动切换破限等\n\n## 演示视频\n\n- [标签化正则演示](https://gitgud.io/StageDog/tavern_resource/-/raw/main/src/酒馆助手/标签化/正则.mp4)\n- [标签化预设提示词演示](https://gitgud.io/StageDog/tavern_resource/-/raw/main/src/酒馆助手/标签化/预设提示词.mp4)\n\n## 使用说明\n\n- 在\"正则\"/\"预设提示词\"/\"酒馆助手脚本\"名称中添加它所属于的一个或多个`【标签】`\n- 在\"预设\"/\"世界书\"/\"API连接配置\"名称中添加对于它你想要启用的一个或多个`【标签】`\n\n这样一来，在使用\"预设\"/\"世界书\"/\"API连接配置\"时，脚本将会\n\n- 自动开启其对应的`【标签】`\"正则\"/\"预设提示词\"/\"酒馆助手脚本\"\n- 自动关闭没有被对应上的`【标签】`\"正则\"/\"预设提示词\"/\"酒馆助手脚本\"\n- 其他没有`【标签】`的\"正则\"/\"预设提示词\"/\"酒馆助手脚本\"不受任何影响\n\n### 当正则、预设提示词、酒馆助手脚本有多个标签\n\n- `【标签1】【标签2】` 表示\"或者\"，只要\"预设\"/\"世界书\"/\"API连接配置\"名称中有`【标签1】`或`【标签2】`就会启用\n- `【标签1&标签2】`表示\"并且\"，只有\"预设\"/\"世界书\"/\"API连接配置\"名称中同时有`【标签1】`和`【标签2】`才会启用\n",
                        "buttons": [],
                        "enabled": true
                    },
                    {
                        "id": "3242b4fd-e9e1-4d5b-adca-dd156a42567b",
                        "name": "输入助手",
                        "content": "\"use strict\";\n$(async () => {\n    // 自定义按钮配置 - 可以按需修改\n    const customButtons = [\n        {\n            name: \"回车\",           // 按钮名称\n            content: \"\\n\",         // 插入的内容\n            cursorPos: \"end\"       // 光标位置: \"start\", \"middle\", \"end\" 或数字\n        },\n        {\n            name: \"引号\",\n            content: \"\\\"\\\"\",\n            cursorPos: \"middle\"\n        },\n        {\n            name: \"括号\",\n            content: \"()\",\n            cursorPos: \"middle\"\n        },\n        {\n            name: \"♡\",\n            content: \"♡\",\n            cursorPos: \"end\"\n        },\n        {\n            name: \"用户\",\n            content: \"\\{\\{user\\}\\}\",\n            cursorPos: \"end\"\n        },\n        {\n            name: \"角色\",\n            content: \"\\{\\{char\\}\\}\",\n            cursorPos: \"end\"\n        },\n        {\n            name: \"hide \",\n            content: \"/hide \",\n            cursorPos: \"end\"\n        }\n        // 您可以按照上面的格式添加更多按钮\n    ];\n    \n    // 创建监听器，等待页面元素加载\n    const bodyObserver = new MutationObserver((mutations) => {\n        if (debounceTimer) {\n            clearTimeout(debounceTimer);\n        }\n        \n        debounceTimer = setTimeout(() => {\n            checkAndAddButtons();\n            debounceTimer = null;\n        }, 300);\n    });\n    \n    let debounceTimer = null;\n    \n    // 开始监听整个document\n    bodyObserver.observe(document, {\n        childList: true,\n        subtree: true,\n        attributes: false,\n        characterData: false\n    });\n    \n    // 初始检查\n    checkAndAddButtons();\n    \n    function checkAndAddButtons() {\n        const $qrBar = $(\"#qr--bar\");\n        \n        if ($qrBar.length > 0) {\n            let $customContainer = $qrBar.find(\"#custom_buttons_container\");\n            \n            if ($customContainer.length === 0) {\n                const $topLevelButtons = $qrBar.children(\".qr--buttons\");\n                const isConsolidatedMode = $topLevelButtons.length === 1;\n                \n                if (isConsolidatedMode) {\n                    // 合并模式：在现有按钮容器中添加\n                    customButtons.forEach(button => {\n                        addCustomButton($topLevelButtons, button);\n                    });\n                } else {\n                    // 非合并模式：创建新的按钮容器\n                    const $newContainer = $(`<div id=\"custom_buttons_container\" class=\"qr--buttons qr--color\" style=\"--qr--color: rgba(0, 0, 0, 0);\"></div>`);\n                    $qrBar.append($newContainer);\n                    \n                    customButtons.forEach(button => {\n                        addCustomButton($newContainer, button);\n                    });\n                }\n            }\n        }\n    }\n    \n    function addCustomButton($container, button) {\n        const buttonId = `input_${button.name.replace(/\\s+/g, '_').toLowerCase()}_btn`;\n        \n        if ($(`#${buttonId}`).length > 0) {\n            return;\n        }\n        \n        const $button = $(`<div id=\"${buttonId}\" class=\"qr--button menu_button interactable\" title=\"${button.name}\" tabindex=\"0\">\n            <div class=\"qr--button-icon fa-solid qr--hidden\"></div>\n            <div class=\"qr--button-label\">${button.name}</div>\n            <div class=\"qr--button-expander\" title=\"Open context menu\">⋮</div>\n        </div>`);\n        \n        $container.append($button);\n        \n        $button.on(\"click\", function() {\n            if (button.name === \"回车\") {\n                insertNewLine();\n            } else {\n                insertContent(button.content, button.cursorPos);\n            }\n        });\n    }\n    \n    function getMessageInput() {\n        return $(\"#send_textarea\");\n    }\n    \n    function insertNewLine() {\n        const textarea = getMessageInput();\n        const text = textarea.val();\n        const cursorPos = textarea.prop(\"selectionStart\");\n        \n        // 查找当前行的末尾位置\n        let lineEnd = text.indexOf(\"\\n\", cursorPos);\n        if (lineEnd === -1) {\n            lineEnd = text.length;\n        }\n        \n        // 在行末插入换行符\n        const newText = text.substring(0, lineEnd) + \"\\n\" + text.substring(lineEnd);\n        textarea.val(newText);\n        \n        // 设置光标位置\n        setTimeout(() => {\n            textarea.prop(\"selectionStart\", lineEnd + 1);\n            textarea.prop(\"selectionEnd\", lineEnd + 1);\n            textarea.focus();\n        }, 0);\n    }\n    \n    function insertContent(content, cursorPos) {\n        const textarea = getMessageInput();\n        const startPos = textarea.prop(\"selectionStart\");\n        const endPos = textarea.prop(\"selectionEnd\");\n        const text = textarea.val();\n        \n        const beforeText = text.substring(0, startPos);\n        const selectedText = text.substring(startPos, endPos);\n        const afterText = text.substring(endPos);\n        \n        // 处理选中文本\n        let newText;\n        if (selectedText && (content === \"\\\"\\\"\" || content === \"()\")) {\n            const openTag = content.charAt(0);\n            const closeTag = content.charAt(1);\n            newText = beforeText + openTag + selectedText + closeTag + afterText;\n        } else {\n            newText = beforeText + content + afterText;\n        }\n        \n        textarea.val(newText);\n        \n        // 计算新的光标位置\n        let newCursorPos = startPos;\n        \n        if (selectedText && (content === \"\\\"\\\"\" || content === \"()\")) {\n            newCursorPos = startPos + selectedText.length + 2;\n        } else {\n            if (cursorPos === \"start\") {\n                newCursorPos = startPos;\n            } else if (cursorPos === \"middle\") {\n                newCursorPos = startPos + Math.floor(content.length / 2);\n            } else if (cursorPos === \"end\") {\n                newCursorPos = startPos + content.length;\n            } else {\n                newCursorPos = startPos + parseInt(cursorPos);\n            }\n        }\n        \n        // 设置光标位置\n        setTimeout(() => {\n            textarea.prop(\"selectionStart\", newCursorPos);\n            textarea.prop(\"selectionEnd\", newCursorPos);\n            textarea.focus();\n        }, 0);\n    }\n    \n    // 定期检查\n    setInterval(checkAndAddButtons, 5000);\n});",
                        "info": "# 输入助手-自定义按钮工具\n\n**作者**: @司马咩咩  \n\n## 简介  \n这是一个为SillyTavern聊天界面添加自定义按钮的简单工具。您可以自由设置按钮名称、插入的内容和光标位置。工具会在聊天输入框旁边创建按钮，点击即可插入预设内容。\n\n---\n\n## 如何自定义按钮  \n在脚本开头的 `customButtons` 数组中，按照以下格式添加/修改按钮：  \n\n```javascript\nconst customButtons = [\n    {\n        name: \"按钮名称\",     // 显示在按钮上的文本\n        content: \"插入内容\",  // 点击按钮后插入的文本\n        cursorPos: \"middle\"  // 插入后光标的位置\n    },\n    // 可添加更多按钮...\n];\n```\n\n---\n\n## 光标位置选项  \n- `\"start\"`: 光标位于插入内容的开始处  \n- `\"middle\"`: 光标位于插入内容的中间位置  \n- `\"end\"`: 光标位于插入内容的末尾  \n- **数字值** (如 `1`): 光标位于插入内容的指定索引位置  \n\n---\n\n## 示例按钮配置  \n\n```javascript\n// 插入Markdown粗体标记，光标在中间\n{\n    name: \"粗体\",\n    content: \"****\",\n    cursorPos: \"middle\"\n},\n\n// 插入Markdown斜体标记，光标在中间\n{\n    name: \"斜体\",\n    content: \"**\",\n    cursorPos: \"middle\"\n},\n\n// 插入方括号，光标在中间\n{\n    name: \"方括号\",\n    content: \"[]\",\n    cursorPos: \"middle\"\n},\n\n// 插入表情符号，光标在末尾\n{\n    name: \"笑脸\",\n    content: \"😊\",\n    cursorPos: \"end\"\n},\n\n// 插入HTML标签，光标在中间\n{\n    name: \"HTML\",\n    content: \"<></>\",\n    cursorPos: 2\n}\n```\n\n---\n\n## 高级功能  \n当选中文本并点击**引号或括号按钮**时，脚本会自动将选中文本包裹在对应符号中（适合快速标记文本）。  ",
                        "buttons": [],
                        "enabled": true
                    },
                    {
                        "id": "aed48ae6-1853-452f-921b-1445fefea9da",
                        "name": "显示区间消息",
                        "content": "import 'https://fastly.jsdelivr.net/gh/StageDog/tavern_resource/dist/酒馆助手/显示区间消息/index.js'",
                        "info": "",
                        "buttons": [
                            {
                                "name": "显示区间",
                                "visible": true
                            },
                            {
                                "name": "恢复默认",
                                "visible": true
                            }
                        ],
                        "enabled": true
                    },
                    {
                        "id": "a6828a71-f31e-494b-8270-bfde9e76dafa",
                        "name": "保存提示词时保存预设",
                        "content": "const handler = () => $('#update_oai_preset').trigger('click');\n\n$(() => {\n  $('#completion_prompt_manager_popup_entry_form_save').on('click', handler);\n});\n\n$(window).on('unload', () => {\n  $('#completion_prompt_manager_popup_entry_form_save').off('click', handler);\n});\n",
                        "info": "",
                        "buttons": [],
                        "enabled": true
                    },
                    {
                        "id": "f7412d63-cd31-49bb-ab27-ed14f77fcd8f",
                        "name": "[UI]正则&脚本自动分组+筛选查看",
                        "content": "const config_CONFIG={STORAGE_KEY_BASE:\"scriptGroupingEnabled\",getStorageKey:function(areaKey){return`${this.STORAGE_KEY_BASE}_${areaKey}`},GROUP_PREFIX_REGEX:/^(?:【([^】]+)】|\\[([^\\]]+)\\]|([^-\\s]+)-)\\s*(.+)$/,AREAS:{\"global-regex\":{titleSelector:\"#global_scripts_block > div:first-child\",listSelector:\"#saved_regex_scripts\",itemSelector:\".regex-script-label\",nameSelector:\".regex_script_name\",dragHandleSelector:\".drag-handle\",sortableId:\"#saved_regex_scripts\",isRegexType:!0},\"scoped-regex\":{titleSelector:\"#scoped_scripts_block .flex-container.alignItemsBaseline strong\",listSelector:\"#saved_scoped_scripts\",itemSelector:\".regex-script-label\",nameSelector:\".regex_script_name\",dragHandleSelector:\".drag-handle\",sortableId:\"#saved_scoped_scripts\",isRegexType:!0},\"global-script\":{titleSelector:'.settings-title-text:contains(\"全局脚本库\")',listSelector:\"#global-script-list\",itemSelector:\".script-item\",nameSelector:\".script-name\",dragHandleSelector:\".drag-handle\",sortableId:\"#global-script-list\",isRegexType:!1},\"scoped-script\":{titleSelector:'.settings-title-text:contains(\"局部脚本库\")',listSelector:\"#scoped-script-list\",itemSelector:\".script-item\",nameSelector:\".script-name\",dragHandleSelector:\".drag-handle\",sortableId:\"#scoped-script-list\",isRegexType:!1}},STYLES:{groupHeaderStyle:\"\\n            padding: 4px 10px;\\n            background: var(--SmartThemeBorderColor, rgba(240, 240, 240, 0.2));\\n            border-radius: 4px;\\n            margin: 4px 0;\\n            cursor: pointer;\\n            display: flex;\\n            justify-content: space-between;\\n            align-items: center;\\n            font-weight: bold;\\n            border-left: 2px solid var(--SmartThemeUnderlineColor, rgba(52, 152, 219, 0.4));\\n            width: 100%;\\n        \",groupContentStyle:\"\\n            padding-left: 6px;\\n            border-left: 1px dashed var(--SmartThemeEmColor, rgba(204, 204, 204, 0.4));\\n            margin-left: 12px;\\n            width: 100%;\\n        \",iconStyle:\"\\n            cursor: pointer;\\n            margin-left: 8px;\\n            font-size: 0.9em;\\n            color: var(--SmartThemeBodyColor, inherit);\\n        \",toggleAllButtonStyle:\"\\n            font-size: 0.9em;\\n            cursor: pointer;\\n            margin-left: 5px;\\n            color: var(--SmartThemeBodyColor, inherit);\\n        \"}};function groupScripts($items,nameSelector,isRegexType){const groups=[];let currentGroup=null,currentGroupItems=[];if(!$items||0===$items.length)return console.error(\"没有提供有效的条目列表进行分组\"),groups;$items.each((function(index){const $item=$(this),scriptName=function extractScriptName($item,nameSelector,isRegexType){try{let $nameElement=$item.find(nameSelector);if(0===$nameElement.length)if(isRegexType){const regexSelectors=[\".regex_script_name\",\".name\",\"div.flexGrow\",\"div:first\"];for(const selector of regexSelectors)if($nameElement=$item.find(selector),$nameElement.length>0)break}else{const scriptSelectors=[\".script-name\",\".name\",\".script-title\",\"div:first\"];for(const selector of scriptSelectors)if($nameElement=$item.find(selector),$nameElement.length>0)break}if($nameElement.length>0)return $nameElement.text().trim()}catch(e){console.error(\"提取脚本名称出错:\",e)}return null}($item,nameSelector,isRegexType);if(!scriptName)return console.warn(`项目 #${index} 无法提取名称，跳过分组`),null!==currentGroup&&currentGroupItems.length>0&&(groups.push({name:currentGroup,items:currentGroupItems.slice()}),currentGroupItems=[]),groups.push({name:null,items:[$item]}),currentGroup=null,!0;const groupName=function detectGroup(scriptName){if(!scriptName||\"string\"!=typeof scriptName)return null;const match=scriptName.match(config_CONFIG.GROUP_PREFIX_REGEX);return match?match[1]||match[2]||match[3]||\"未分组\":null}(scriptName);null===groupName?null===currentGroup?currentGroupItems.push($item):(groups.push({name:currentGroup,items:currentGroupItems.slice()}),currentGroup=null,currentGroupItems=[$item]):currentGroup===groupName?currentGroupItems.push($item):(currentGroupItems.length>0&&groups.push({name:currentGroup,items:currentGroupItems.slice()}),currentGroup=groupName,currentGroupItems=[$item])})),currentGroupItems.length>0&&groups.push({name:currentGroup,items:currentGroupItems.slice()});let groupedItems=0;return groups.forEach((group=>{null!==group.name?0:0,groupedItems+=group.items.length})),groupedItems!==$items.length&&console.warn(`警告：处理的项目数 (${groupedItems}) 与原始项目数 (${$items.length}) 不一致！`),groups}let isDebouncing=!1,operationStartTime=0,debouncedButtons=[];const operationQueue=[];async function debounceUI(callback,options={}){const{minDelay=100,operationName=\"操作\"}=\"number\"==typeof options?{minDelay:options}:options;if(isDebouncing)return null;try{isDebouncing=!0,operationStartTime=performance.now(),function dimAllButtons(){debouncedButtons=[],$('i[id$=\"-filter-icon\"], i[id$=\"-group-icon\"], i[id$=\"-toggle-all\"], i[id$=\"-refresh-icon\"], .group-toggle-icon').each((function(){const $button=$(this),buttonInfo={$button,originalOpacity:\"1\",originalPointerEvents:\"auto\"};$button.css({opacity:\"0.3\",\"pointer-events\":\"none\",transition:\"opacity 0.05s\"}),debouncedButtons.push(buttonInfo)}))}();const result=await callback(),operationDuration=performance.now()-operationStartTime,cooldownTime=Math.max(function calculateCooldownTime(operationDuration){return 100+Math.min(.5*operationDuration,1e3)}(operationDuration),minDelay);return await new Promise((resolve=>setTimeout(resolve,cooldownTime))),result}catch(error){return console.error(`[FilterGroup]${operationName}执行出错:`,error),null}finally{!function restoreAllButtons(){if(!debouncedButtons||0===debouncedButtons.length)return console.debug(\"[FilterGroup]没有需要恢复的按钮\"),void(debouncedButtons=[]);debouncedButtons.forEach(((buttonInfo,index)=>{try{if(!buttonInfo||!buttonInfo.$button||0===buttonInfo.$button.length)return void console.warn(`[FilterGroup]按钮对象无效 [${index}]`);buttonInfo.$button.css({opacity:buttonInfo.originalOpacity||\"1\",\"pointer-events\":buttonInfo.originalPointerEvents||\"auto\",transition:\"opacity 0.05s\"})}catch(error){console.error(`[FilterGroup]恢复按钮[${index}]状态出错:`,error)}})),debouncedButtons.length,debouncedButtons=[]}(),isDebouncing=!1,operationQueue.length>0&&setTimeout(processNextOperation,100)}}function processNextOperation(){if(0===operationQueue.length||isDebouncing)return;const nextOperation=operationQueue.shift();nextOperation.callback().then((result=>{operationQueue.length>0&&setTimeout(processNextOperation,100)})).catch((error=>{console.error(`[FilterGroup]队列操作 ${nextOperation.name} 执行出错:`,error),operationQueue.length>0&&setTimeout(processNextOperation,100)}))}function isUIDebouncing(){return isDebouncing}function addDebouncedClickHandler(selector,callback,options={}){const{stopPropagation=!0,minDelay=100,operationName=null}=options;(\"string\"==typeof selector?$(selector):selector).off(\"click\").on(\"click\",(async function(e){if(stopPropagation&&e.stopPropagation(),isUIDebouncing())return;const $this=$(this),buttonText=$this.attr(\"title\")||$this.text()||\"按钮\",opName=operationName||buttonText;await debounceUI((async()=>await callback.call(this,e,$this)),{minDelay,operationName:opName})}))}function addFilterIcon($titleElem,areaKey,getFilterState,updateFilterIcon,applyUIState,capitalizeFirstLetter){const filterIconId=`${areaKey}-filter-icon`;0===$(`#${filterIconId}`).length&&($titleElem.append(`<i id=\"${filterIconId}\" class=\"fa-solid fa-filter\" style=\"${config_CONFIG.STYLES.iconStyle}\"></i>`),addDebouncedClickHandler(`#${filterIconId}`,(function(e){const newState=(getFilterState(areaKey)+1)%3;return localStorage.setItem(`regexFilter${capitalizeFirstLetter(areaKey)}`,newState),updateFilterIcon(areaKey),applyUIState(areaKey)}),{operationName:`筛选切换(${areaKey})`}),updateFilterIcon(areaKey))}function addGroupIcons($titleElem,areaKey,getGroupingEnabledState,updateGroupIcon,applyUIState){const groupIconId=`${areaKey}-group-icon`;if(0===$(`#${groupIconId}`).length){const isGroupEnabled=getGroupingEnabledState(areaKey);$titleElem.append(`<i id=\"${groupIconId}\" class=\"fa-solid ${isGroupEnabled?\"fa-folder-open\":\"fa-folder\"}\" style=\"${config_CONFIG.STYLES.iconStyle}\" title=\"${isGroupEnabled?\"关闭分组\":\"开启分组\"}\"></i>`),function addToggleAllIcon($titleElem,areaKey,isGroupEnabled){const toggleAllId=`${areaKey}-toggle-all`;0===$(`#${toggleAllId}`).length&&($titleElem.append(`<i id=\"${toggleAllId}\" class=\"fa-solid fa-angle-down\" style=\"${config_CONFIG.STYLES.toggleAllButtonStyle}\" title=\"一键展开/折叠分组\"></i>`),isGroupEnabled?$(`#${toggleAllId}`).css(\"display\",\"\"):$(`#${toggleAllId}`).css(\"display\",\"none\"),function bindToggleAllEvent(toggleAllId,areaKey){addDebouncedClickHandler(`#${toggleAllId}`,(function(e,$this){const isExpand=$this.hasClass(\"fa-angle-down\");return $this.attr(\"class\",\"fa-solid \"+(isExpand?\"fa-angle-up\":\"fa-angle-down\")),$this.attr(\"title\",isExpand?\"一键折叠分组\":\"一键展开分组\"),function toggleAllGroups(areaKey,isExpand){const $area=$(config_CONFIG.AREAS[areaKey].listSelector);$area.find(\".script-group-header\").each((function(){const $header=$(this),$groupContent=$header.next(\".script-group-content\"),$icon=$header.find(\".group-toggle-icon\");isExpand?($groupContent.show(),$icon.attr(\"class\",\"fa-solid fa-angle-up group-toggle-icon\")):($groupContent.hide(),$icon.attr(\"class\",\"fa-solid fa-angle-down group-toggle-icon\"))})),function saveAllGroupFoldStates(areaKey,allFolded){const $area=$(config_CONFIG.AREAS[areaKey].listSelector),foldStates={};$area.find(\".script-group-header\").each((function(){const groupName=$(this).find(\"span\").text().split(\" (\")[0];foldStates[groupName]=allFolded}));const storageKey=`script_group_fold_state_${areaKey}`;localStorage.setItem(storageKey,JSON.stringify(foldStates))}(areaKey,!isExpand)}(areaKey,isExpand)}),{operationName:`一键展开/折叠分组(${areaKey})`})}(toggleAllId,areaKey))}($titleElem,areaKey,isGroupEnabled),addDebouncedClickHandler(`#${groupIconId}`,(function(e){const newState=!getGroupingEnabledState(areaKey);return localStorage.setItem(config_CONFIG.getStorageKey(areaKey),newState),updateGroupIcon(areaKey),applyUIState(areaKey)}),{operationName:`分组切换(${areaKey})`}),updateGroupIcon(areaKey)}}function addRefreshIcon($titleElem,areaKey,applyAllUIStates){const refreshIconId=`${areaKey}-refresh-icon`;0===$(`#${refreshIconId}`).length&&($titleElem.append(`<i id=\"${refreshIconId}\" class=\"fa-solid fa-rotate\" style=\"${config_CONFIG.STYLES.iconStyle}\" title=\"刷新\"></i>`),addDebouncedClickHandler(`#${refreshIconId}`,(function(){return applyAllUIStates()}),{operationName:`刷新UI(${areaKey})`}))}function addGroupHeaderClickHandler($groupHeader,areaKey){addDebouncedClickHandler($groupHeader,(function(){const $header=$(this),$icon=$header.find(\".group-toggle-icon\"),$content=$header.next(\".script-group-content\"),isExpanded=$icon.hasClass(\"fa-angle-up\"),thisGroupName=$header.find(\"span\").text().split(\" (\")[0];$icon.attr(\"class\",`fa-solid fa-angle-${isExpanded?\"down\":\"up\"} group-toggle-icon`),$content[isExpanded?\"hide\":\"show\"](),function saveGroupFoldState(areaKey,groupName,isFolded){const storageKey=`script_group_fold_state_${areaKey}`,foldStates=JSON.parse(localStorage.getItem(storageKey)||\"{}\");foldStates[groupName]=isFolded,localStorage.setItem(storageKey,JSON.stringify(foldStates))}(areaKey,thisGroupName,isExpanded)}),{minDelay:200,operationName:`切换分组(${areaKey})`})}async function batchOperateRegexes($items,action,applyUIState){if(!window.TavernHelper)return console.error(\"[FilterGroup]TavernHelper API不可用\"),!1;window.batchOperationInProgress=!0;try{const regexInfoList=[];return $items.each((function(){const info=function extractRegexInfo($item){return{id:$item.attr(\"id\"),scope:$item.closest(\"#saved_regex_scripts\").length>0?\"global\":\"character\"}}($(this));info.id&&regexInfoList.push(info)})),0===regexInfoList.length?(console.log(\"[FilterGroup]没有找到有效的正则表达式\"),!1):(await window.TavernHelper.updateTavernRegexesWith((regexes=>\"delete\"===action?regexes.filter((regex=>!regexInfoList.some((info=>info.id===regex.id&&info.scope===regex.scope)))):(regexes.forEach((regex=>{regexInfoList.forEach((info=>{info.id===regex.id&&info.scope===regex.scope&&(regex.enabled=\"enable\"===action)}))})),regexes))),console.log(`[FilterGroup]批量${\"enable\"===action?\"开启\":\"disable\"===action?\"关闭\":\"删除\"}操作完成`),!0)}catch(error){return console.error(\"[FilterGroup]批量操作失败:\",error),!1}finally{window.batchOperationInProgress=!1,setTimeout((()=>{eventEmit(tavern_events.SETTINGS_UPDATED)}),100)}}function initializeUnifiedUI(){window.unifiedUIInitialized||(window.unifiedUIInitialized=!0,console.log(\"[FilterGroup]正在初始化统一UI处理模块...\"),function addControlIcons(){for(const[areaKey,config]of Object.entries(config_CONFIG.AREAS)){const $titleElem=$(config.titleSelector);0!==$titleElem.length&&(addFilterIcon($titleElem,areaKey,getFilterState,updateFilterIcon,applyUIState,capitalizeFirstLetter),addGroupIcons($titleElem,areaKey,getGroupingEnabledState,updateGroupIcon,applyUIState),addRefreshIcon($titleElem,areaKey,applyAllUIStates))}}(),function setupEventListeners(){\"function\"==typeof eventMakeFirst&&\"undefined\"!=typeof tavern_events&&tavern_events.SETTINGS_UPDATED&&eventMakeFirst(tavern_events.SETTINGS_UPDATED,(function(){console.log(\"[FilterGroup]设置已更新，正在刷新UI...\"),applyAllUIStates().then((()=>{console.log(\"[FilterGroup]UI刷新完成\")}))}))}(),applyAllUIStates())}function getGroupingEnabledState(areaKey){return\"true\"===localStorage.getItem(config_CONFIG.getStorageKey(areaKey))}function getFilterState(areaKey){return parseInt(localStorage.getItem(`regexFilter${capitalizeFirstLetter(areaKey)}`)||\"0\")}function capitalizeFirstLetter(string){return string.split(\"-\").map((word=>word.charAt(0).toUpperCase()+word.slice(1))).join(\"\")}function resetAreaUI(areaKey){const config=config_CONFIG.AREAS[areaKey],$list=$(config.listSelector);return 0!==$list.length&&(function removeGrouping(areaKey){const config=config_CONFIG.AREAS[areaKey],$list=$(config.listSelector);if(0===$list.length)return!1;const $groupHeaders=$list.find(\".script-group-header\"),$groupContents=$list.find(\".script-group-content\");if(0===$groupHeaders.length||0===$groupContents.length)return!1;const $items=$list.find(config.itemSelector);return $items.each((function(){$(this).css(\"width\",\"\").find(\".drag-handle\").show()})),$list.append($items),$groupHeaders.remove(),$groupContents.remove(),function restoreSortable(areaKey){const config=config_CONFIG.AREAS[areaKey],$list=$(config.listSelector);$list.length&&($list.find(\".drag-handle, \"+config.itemSelector).off(\"mousedown.groupui dragstart.groupui\"),$list.find(\".drag-handle\").show())}(areaKey),!0}(areaKey),$list.find(config.itemSelector).css(\"display\",\"\"),!0)}function updateFilterIcon(areaKey){const $icon=$(`#${areaKey}-filter-icon`);if(0===$icon.length)return;const config=[{class:\"fa-filter\",color:\"\",title:\"显示全部 (点击切换到仅显示开启)\"},{class:\"fa-check-circle\",color:\"\",title:\"仅显示开启 (点击切换到仅显示隐藏)\"},{class:\"fa-times-circle\",color:\"\",title:\"仅显示隐藏 (点击切换到显示全部)\"}][getFilterState(areaKey)];$icon.attr(\"class\",\"\").addClass(\"fa-solid \"+config.class),$icon.attr(\"title\",config.title)}function updateGroupIcon(areaKey){const isGroupEnabled=getGroupingEnabledState(areaKey),$groupIcon=$(`#${areaKey}-group-icon`);$groupIcon.length>0&&($groupIcon.attr(\"class\",\"fa-solid \"+(isGroupEnabled?\"fa-folder-open\":\"fa-folder\")),$groupIcon.attr(\"title\",isGroupEnabled?\"关闭分组\":\"开启分组\"));const $toggleAll=$(`#${areaKey}-toggle-all`);$toggleAll.length>0&&(isGroupEnabled?$toggleAll.css(\"display\",\"\"):$toggleAll.css(\"display\",\"none\"))}function applyUIState(areaKey){if(!config_CONFIG.AREAS[areaKey])return console.log(`[FilterGroup]区域 ${areaKey} 配置不存在，跳过处理`),!1;if(window.batchOperationInProgress)return console.log(\"[FilterGroup]批量操作进行中，暂时跳过UI刷新\"),!1;const config=config_CONFIG.AREAS[areaKey],isGroupEnabled=getGroupingEnabledState(areaKey),filterState=getFilterState(areaKey);resetAreaUI(areaKey);const $list=$(config.listSelector);if(0===$list.length)return!1;return $list.find(config.itemSelector).each((function(){const $item=$(this);let isEnabled;isEnabled=config.isRegexType?!$item.find(\".disable_regex\").prop(\"checked\"):\"none\"!==$item.find(\".script-toggle-on\").css(\"display\"),0===filterState?$item.css(\"display\",\"\"):1===filterState?$item.css(\"display\",isEnabled?\"\":\"none\"):2===filterState&&$item.css(\"display\",isEnabled?\"none\":\"\")})),isGroupEnabled&&function applyGrouping(areaKey){const config=config_CONFIG.AREAS[areaKey],$list=$(config.listSelector);if(0===$list.length)return!1;const $items=$list.find(config.itemSelector);if(0===$items.length)return!1;const groups=groupScripts($items,config.nameSelector,config.isRegexType);if(!groups||0===groups.length)return!1;return!!groups.some((group=>null!==group.name))&&($list.children().detach(),groups.forEach((group=>{const groupName=null===group.name?\"未分组\":group.name,isFolded=function getGroupFoldState(areaKey,groupName,defaultState=!0){const storageKey=`script_group_fold_state_${areaKey}`,foldStates=JSON.parse(localStorage.getItem(storageKey)||\"{}\");return groupName in foldStates?foldStates[groupName]:defaultState}(areaKey,groupName,!0),visibleItems=group.items.filter((item=>\"none\"!==$(item).css(\"display\"))),$groupHeader=$(`\\n            <div class=\"script-group-header\" style=\"${config_CONFIG.STYLES.groupHeaderStyle}${0===visibleItems.length?\"display: none;\":\"\"}\">\\n                <span>${groupName} (${visibleItems.length})</span>\\n                <i class=\"fa-solid ${isFolded?\"fa-angle-down\":\"fa-angle-up\"} group-toggle-icon\"></i>\\n            </div>\\n        `),$groupContent=$(`\\n            <div class=\"script-group-content\" style=\"${config_CONFIG.STYLES.groupContentStyle}${isFolded||0===visibleItems.length?\" display: none;\":\"\"}\">\\n            </div>\\n        `);$list.append($groupHeader),$list.append($groupContent),config.isRegexType&&function createBatchActionButtons($groupHeader,$groupContent){const $actionButtons=$('\\n        <div class=\"group-actions\" style=\"display: inline-flex; margin-left: auto; margin-right: 42px;\">\\n            <i class=\"fa-solid fa-check-circle batch-enable\" style=\"margin-right: 12px; cursor: pointer;\" title=\"批量开启\"></i>\\n            <i class=\"fa-solid fa-times-circle batch-disable\" style=\"margin-right: 12px; cursor: pointer;\" title=\"批量关闭\"></i>\\n            <i class=\"fa-solid fa-trash-alt batch-delete\" style=\"cursor: pointer;\" title=\"批量删除\"></i>\\n        </div>\\n    ');return $groupHeader.find(\"span\").after($actionButtons),$groupHeader.closest(\".regex-scripts-area\").length,addDebouncedClickHandler($actionButtons.find(\".batch-enable\"),(function(){window.confirm(\"确定要批量开启该分组下的所有正则表达式吗？\")&&batchOperateRegexes($groupContent.find(\".regex-script-label:visible\"),\"enable\")}),{operationName:\"批量开启正则表达式\",minDelay:200}),addDebouncedClickHandler($actionButtons.find(\".batch-disable\"),(function(){window.confirm(\"确定要批量关闭该分组下的所有正则表达式吗？\")&&batchOperateRegexes($groupContent.find(\".regex-script-label:visible\"),\"disable\")}),{operationName:\"批量关闭正则表达式\",minDelay:200}),addDebouncedClickHandler($actionButtons.find(\".batch-delete\"),(function(){if(window.confirm(\"确定要批量删除该分组下的所有正则表达式吗？此操作不可撤销！\")){const $items=$groupContent.find(\".regex-script-label:visible\");if(0===$items.length)return;batchOperateRegexes($items,\"delete\")}}),{operationName:\"批量删除正则表达式\",minDelay:200}),$actionButtons}($groupHeader,$groupContent),group.items.forEach(($item=>{$item.css(\"width\",\"97%\").find(\".drag-handle\").hide(),$groupContent.append($item)})),addGroupHeaderClickHandler($groupHeader,areaKey)})),function fixSortableAfterGrouping(areaKey){const config=config_CONFIG.AREAS[areaKey],$list=$(config.listSelector);$list.length&&($list.find(\".drag-handle\").hide(),$list.find(\".drag-handle, .script-group-header, .script-group-content, \"+config.itemSelector).off(\"mousedown.groupui dragstart.groupui\").on(\"mousedown.groupui dragstart.groupui\",(function(e){return e.stopPropagation(),e.preventDefault(),!1})))}(areaKey),!0)}(areaKey),!0}function applyAllUIStates(){return window.batchOperationInProgress?(console.log(\"[FilterGroup]批量操作进行中，暂时跳过UI刷新\"),Promise.resolve(!1)):isUIDebouncing()?(console.log(\"[FilterGroup]UI操作已在进行中，已添加到操作队列\"),function queueOperation(name,callback,options={}){const{priority=10}=options,operation={name,callback,priority,timestamp:Date.now()};let inserted=!1;for(let i=0;i<operationQueue.length;i++)if(operationQueue[i].priority>priority){operationQueue.splice(i,0,operation),inserted=!0;break}return inserted||operationQueue.push(operation),isDebouncing||processNextOperation(),Promise.resolve(!1)}(\"刷新UI\",(()=>refreshAllAreas().then((()=>(console.log(\"[FilterGroup]队列刷新完成\"),!0)))),{priority:5})):debounceUI((async()=>await refreshAllAreas()),{operationName:\"应用所有UI状态\",minDelay:500})}async function refreshAllAreas(){await new Promise((resolve=>setTimeout(resolve,100)));const promises=[];for(const areaKey in config_CONFIG.AREAS){applyUIState(areaKey)||promises.push(new Promise((resolve=>{setTimeout((()=>{resolve(applyUIState(areaKey))}),500)})))}return await Promise.all(promises),console.log(\"[FilterGroup]所有区域UI刷新完成\"),!0}const unifiedUI={initialize:initializeUnifiedUI,applyState:applyUIState,applyAllStates:applyAllUIStates,resetUI:resetAreaUI,isDebouncing:isUIDebouncing};$((function(){setTimeout((function(){!function initializeAllUI(){console.log(\"[FilterGroup]正在初始化统一UI组件...\"),initializeUnifiedUI()}()}),500)})),window.unifiedUI=unifiedUI,$((function(){console.log(\"正则脚本统一UI管理已初始化\")}));",
                        "info": "**作者**：Lai\n**版本**：250510\n**脚本说明：** 根据正则/酒馆助手脚本开关状态筛选条目，快速切换显示，并支持分组视图与管理。\n\n## 功能简介\n\n此脚本在全局和局部正则/酒馆助手脚本库标题旁添加了筛选、分组与刷新图标，点击图标即可切换视图。\n\n在分组标题栏上有批量开启、关闭、删除图标，点击图标即可批量管理分组条目。\n\n## ！！非常重要！！\n**如果在【开启分组视图】的情况下拖动了条目/分组，可能会【丢失所有正则】！虽然脚本【已经禁用】了分组视图下的拖拽功能，但是如果你依然发现自己~~（不知为何）~~拖动了条目，请【不要松手按 F5/cmd+R 直接刷新网页或者直接锁屏手机】打断这个过程。**\n\n上述情况应该【极其少见】，如果你发现自己依然能够拖拽，请回帖 at 我。\n\n在没有打开分组视图（也就是条目左边有三个小横杠）的时候是能够正常拖拽改变顺序的。\n\n## 筛选功能\n\n各部条目开关状态筛选条目，支持循环切换三种显示模式：\n\n- :clipboard: **显示全部** - 显示所有可用正则/酒馆助手脚本\n- :white_check_mark: **仅显示已开启** - 筛选出当前已激活的正则/酒馆助手脚本（打勾图标）\n- :x: **仅显示已隐藏** - 筛选出当前已关闭的正则/酒馆助手脚本（打叉图标）\n\n## 分组功能\n\n脚本会根据名称前缀自动为**连续的**条目建立分组，从而得到美观的分组视图。分组支持多种命名格式：\n\n- **【分组名】脚本名称** - 使用中文方括号\n- **[分组名]脚本名称** - 使用英文方括号\n- **分组名-脚本名称** - 使用短横线分隔\n\n如需支持更多格式，欢迎回帖提出。\n\n### 分组特性：\n\n- **根据前缀分组**：根据脚本名称中的前缀自动分组\n- **顺序保持**：保持条目的原始排序\n- **折叠/展开**：可一键展开或折叠所有分组，提高界面整洁度\n- **分组统计**：显示每个分组内包含的条目数量\n- **分组管理**：批量开启、关闭、删除分组下的条目，使用此功能请务必谨慎，一旦操作无法撤回！\n\n通过标题旁的文件夹图标可以随时切换启用/禁用分组功能。\n\n## 使用提示\n\n- 使用分组功能，需要编辑好前缀与条目顺序。\n- 分组和筛选功能可以同时使用。\n- 分组状态（包括折叠状态）和筛选设置会记录在浏览器本地存储中，刷新了也能保持。\n- 支持与 https://discord.com/channels/1291925535324110879/1344362686900605043 等脚本共同使用，不会冲突。\n- 更改条目设置（比如开关状态）后，稍等一小下，视图**会自动刷新**。\n- 具有防快速点击延迟，避免过快地操作出现问题。\n- 注意：某些情况视图可能会出错/按钮点击了没效果，请试试点击“刷新”小图标，或者刷新酒馆网页。",
                        "buttons": [],
                        "enabled": true
                    },
                    {
                        "id": "f745e1db-3bbc-47b7-8778-e0353f7f0016",
                        "name": "自动补全标签",
                        "content": "$(() => {\n  // 在收到消息后触发标签修复功能\n  eventOn(tavern_events.MESSAGE_RECEIVED, () => {\n    // 获取最新的一条消息\n    const lastMessage = SillyTavern.chat[SillyTavern.chat.length - 1];\n    \n    // 检查消息是否存在\n    if (lastMessage && lastMessage.mes) {\n      // 修复消息中的标签\n      lastMessage.mes = fixMissingTags(lastMessage.mes);\n    }\n  });\n  \n  /**\n   * 简单修复HTML中缺失的闭合标签\n   * @param {string} html - 包含可能缺失闭合标签的HTML字符串\n   * @return {string} - 修复后的HTML字符串\n   */\n  function fixMissingTags(html) {\n    if (!html || typeof html !== 'string') {\n      return html;\n    }\n    \n    // 使用正则表达式找出所有的开标签和闭标签\n    const tagRegex = /<\\/?([^\\s>/]+)[^>]*>/g;\n    const tags = [];\n    let match;\n    \n    // 收集所有标签信息\n    while ((match = tagRegex.exec(html)) !== null) {\n      const fullTag = match[0];\n      const tagName = match[1];\n      const isClosingTag = fullTag.startsWith('</');\n      const position = match.index;\n      const endPosition = position + fullTag.length;\n      \n      tags.push({\n        fullTag,\n        tagName,\n        isClosingTag,\n        position,\n        endPosition\n      });\n    }\n    \n    // 计算每种标签的开闭标签数量\n    const tagCounts = {};\n    tags.forEach(tag => {\n      if (!tagCounts[tag.tagName]) {\n        tagCounts[tag.tagName] = { open: 0, close: 0 };\n      }\n      \n      if (tag.isClosingTag) {\n        tagCounts[tag.tagName].close++;\n      } else {\n        tagCounts[tag.tagName].open++;\n      }\n    });\n    \n    // 找出缺少闭合标签的标签\n    const unclosedTags = {};\n    for (const [tagName, count] of Object.entries(tagCounts)) {\n      if (count.open > count.close) {\n        unclosedTags[tagName] = count.open - count.close;\n      }\n    }\n    \n    // 如果没有未闭合的标签，直接返回原始HTML\n    if (Object.keys(unclosedTags).length === 0) {\n      return html;\n    }\n    \n    // 为每个未闭合的标签找到合适的插入位置\n    const insertions = [];\n    \n    // 按照标签出现顺序处理\n    for (let i = 0; i < tags.length; i++) {\n      const tag = tags[i];\n      \n      // 只处理开标签\n      if (tag.isClosingTag) continue;\n      \n      // 检查这个标签是否缺少闭合标签\n      if (unclosedTags[tag.tagName] && unclosedTags[tag.tagName] > 0) {\n        // 默认在下一个标签之前插入\n        let insertPos = html.length;\n        let foundNextTag = false;\n        \n        // 查找下一个标签\n        for (let j = i + 1; j < tags.length; j++) {\n          if (tags[j].position > tag.endPosition) {\n            insertPos = tags[j].position;\n            foundNextTag = true;\n            break;\n          }\n        }\n        \n        // 尝试找到上一行末尾\n        if (foundNextTag) {\n          const textBetween = html.substring(tag.endPosition, insertPos);\n          const lastNewlinePos = textBetween.lastIndexOf('\\n');\n          \n          if (lastNewlinePos !== -1) {\n            insertPos = tag.endPosition + lastNewlinePos;\n          }\n        }\n        \n        // 记录插入位置\n        insertions.push({\n          position: insertPos,\n          tag: `</${tag.tagName}>`\n        });\n        \n        // 减少需要闭合的标签数量\n        unclosedTags[tag.tagName]--;\n        \n        // 如果这个标签已经全部修复，从未闭合标签列表中移除\n        if (unclosedTags[tag.tagName] <= 0) {\n          delete unclosedTags[tag.tagName];\n        }\n      }\n    }\n    \n    // 按位置从后往前排序，避免位置变化\n    insertions.sort((a, b) => b.position - a.position);\n    \n    // 执行插入\n    let result = html;\n    insertions.forEach(insertion => {\n      result = result.substring(0, insertion.position) + \n               insertion.tag + \n               result.substring(insertion.position);\n    });\n    \n    return result;\n  }\n});\n",
                        "info": "自动HTML标签闭合修复工具\n\n版本: 1.0.0\n日期: 2025年4月27日\n\n作者:\n司马咩咩 (原理构思与实现)\n十四行诗 (代码优化与调试)\n\n描述:\n这个脚本可以自动检测并修复HTML中缺失的闭合标签。它会智能地在适当位置\n添加缺失的闭合标签，使HTML结构完整。特别适用于角色扮演或模板化内容中\n的标签自动补全。",
                        "buttons": [],
                        "enabled": true
                    },
                    {
                        "id": "009e8347-ab5e-42a7-a7c1-784a446a99e4",
                        "name": "绑定主要世界书添加搜索栏",
                        "content": "/**\n * 功能：用一个支持搜索的自定义组件替换角色编辑界面的主要世界书选择框。\n * - 点击时展开搜索框和结果列表。\n * - 实时过滤选项，结果直接显示在下方，向下延伸。\n * - 应用深色主题 (背景 rgb(37,50,51))。\n * - 搜索框和结果列表文字颜色改为 rgb(171, 171, 171)。\n * - 使用选择器：'.character_world_info_selector' (V8)\n */\nfunction replaceSelectWithSearchComponent_V8() {\n    // --- 目标元素的选择器 ---\n    const targetSelectSelector = '.character_world_info_selector';\n    // --- ---\n\n    const doc = window.parent?.document || window.document;\n    let originalSelectElement = null;\n\n    try {\n        originalSelectElement = doc.querySelector(targetSelectSelector);\n    } catch (e) {\n        console.error(`[SearchComponentV8] 查找原始 select 时出错 (${targetSelectSelector}):`, e);\n        return;\n    }\n\n    if (!originalSelectElement) {\n        console.warn(`[SearchComponentV8] 未找到原始 select 元素: ${targetSelectSelector}.`);\n        return;\n    }\n\n    if (originalSelectElement.dataset.searchV8Replaced === 'true') { // V8\n        console.log('[SearchComponentV8] 该 select 已被替换。');\n        return;\n    }\n\n    console.log('[SearchComponentV8] 找到原始 select，准备替换为搜索组件...');\n\n    // --- 1. 备份原始选项数据 ---\n    const originalOptionsData = Array.from(originalSelectElement.options).map(option => ({\n        value: option.value,\n        text: option.text,\n        disabled: option.disabled,\n    }));\n    let currentSelectedValue = originalSelectElement.value;\n    let currentSelectedText = originalSelectElement.options[originalSelectElement.selectedIndex]?.text || '--- 请选择 ---';\n\n    // --- 2. 创建自定义组件结构 ---\n    const container = doc.createElement('div');\n    container.className = 'search-select-container-v8'; // V8\n    container.style.position = 'relative';\n\n    const displayArea = doc.createElement('div');\n    displayArea.className = 'search-select-display-v8'; // V8\n    displayArea.textContent = currentSelectedText;\n    // 显示区域样式 (与原版一致)\n    displayArea.style.cssText = `\n        padding: 6px 25px 6px 10px;\n        border: 1px solid #666;\n        border-radius: 4px;\n        background-color: rgb(37, 50, 51); /* 深色背景 */\n        color: #ffffff; /* 白色文字 */\n        font-weight: 600;\n        cursor: pointer;\n        user-select: none;\n        position: relative;\n        min-height: 20px;\n        line-height: 1.5;\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n    `;\n    displayArea.style.setProperty('--arrow-v8', '\"▼\"'); // V8\n    displayArea.style.cssText += `\n        &::after {\n            content: var(--arrow-v8);\n            position: absolute;\n            right: 10px;\n            top: 50%;\n            transform: translateY(-50%);\n            pointer-events: none;\n            color: #ccc; /* 浅灰色箭头 */\n        }\n    `;\n\n    const searchInput = doc.createElement('input');\n    searchInput.type = 'text';\n    searchInput.className = 'search-select-input-v8'; // V8\n    searchInput.placeholder = '搜索...';\n    searchInput.setAttribute('autocomplete', 'off');\n    // 搜索框样式 (与原版一致)\n    searchInput.style.cssText = `\n        display: none;\n        width: 100%;\n        padding: 6px 8px;\n        border: 1px solid #666;\n        border-bottom: 1px solid #555;\n        border-radius: 4px 4px 0 0;\n        background-color: rgb(37, 50, 51); /* 深色背景 */\n        color: rgb(171, 171, 171); /* 修改文字颜色 */\n        box-sizing: border-box;\n        font-size: 14px;\n        margin: 0;\n        outline: none;\n    `;\n    // 尝试设置 placeholder 颜色 (与原版一致)\n    searchInput.style.setProperty('::placeholder', 'rgb(150, 150, 150)', '!important');\n\n\n    const resultsList = doc.createElement('div');\n    resultsList.className = 'search-select-results-v8'; // V8\n    // 结果列表样式 (与原版一致)\n    resultsList.style.cssText = `\n        display: none;\n        position: absolute;\n        top: 100%;\n        left: 0;\n        right: 0;\n        background-color: rgb(37, 50, 51); /* 深色背景 */\n        border: 1px solid #666;\n        border-top: none;\n        border-radius: 0 0 4px 4px;\n        z-index: 1050;\n        box-shadow: 0 4px 8px rgba(0,0,0,0.15);\n        /* 移除 max-height 和 overflow-y */\n    `;\n\n    container.appendChild(displayArea);\n    container.appendChild(searchInput);\n    container.appendChild(resultsList);\n\n    // --- 3. 隐藏原始 select 并插入新组件 ---\n    originalSelectElement.style.display = 'none';\n    originalSelectElement.dataset.searchV8Replaced = 'true'; // V8 标记\n    if (originalSelectElement.parentNode) {\n        originalSelectElement.parentNode.insertBefore(container, originalSelectElement);\n    } else {\n        console.error(\"[SearchComponentV8] 无法找到父节点来插入自定义组件。\");\n        originalSelectElement.style.display = '';\n        originalSelectElement.dataset.searchV8Replaced = 'false';\n        return;\n    }\n\n    // --- 4. 事件处理 ---\n\n    displayArea.addEventListener('click', (event) => {\n        event.stopPropagation();\n        if (searchInput.style.display === 'block') {\n            closeSearch_V8(); // V8\n        } else {\n            openSearch_V8(); // V8\n        }\n    });\n\n    searchInput.addEventListener('input', () => {\n        populateResults_V8(searchInput.value); // V8\n    });\n\n    const clickOutsideHandler_V8 = (event) => { // V8\n        if (!container.contains(event.target)) {\n            closeSearch_V8(); // V8\n        }\n    };\n\n    function openSearch_V8() { // V8\n        displayArea.style.display = 'none';\n        searchInput.style.display = 'block';\n        resultsList.style.display = 'block';\n        searchInput.value = '';\n        populateResults_V8(''); // V8\n        searchInput.focus();\n        // Use capture phase for click outside to catch clicks inside other components potentially stopping propagation\n        setTimeout(() => {\n             doc.addEventListener('click', clickOutsideHandler_V8, true); // V8\n        }, 0); // setTimeout ensures this runs after the current click event finishes\n    }\n\n    function closeSearch_V8() { // V8\n        // Update display text based on the current value of the original select\n        currentSelectedValue = originalSelectElement.value;\n        const selectedOption = originalOptionsData.find(opt => opt.value === currentSelectedValue);\n        displayArea.textContent = selectedOption ? selectedOption.text : '--- 请选择 ---';\n\n        searchInput.style.display = 'none';\n        resultsList.style.display = 'none';\n        displayArea.style.display = 'block';\n        doc.removeEventListener('click', clickOutsideHandler_V8, true); // V8\n    }\n\n    // --- Performance Optimization: Use DocumentFragment ---\n    function populateResults_V8(searchTerm) { // V8\n        const term = searchTerm.toLowerCase().trim();\n        let hasResults = false;\n        // Create a DocumentFragment to hold results before appending to the DOM\n        const fragment = doc.createDocumentFragment(); // <<< OPTIMIZATION\n\n        originalOptionsData.forEach(data => {\n            const isMatch = data.disabled || term === '' || data.text.toLowerCase().includes(term);\n\n            if (isMatch) {\n                const item = doc.createElement('div');\n                item.className = 'search-select-result-item-v8'; // V8\n                item.textContent = data.text;\n                item.dataset.value = data.value;\n                // 结果项样式 (与原版一致)\n                item.style.cssText = `\n                    padding: 8px 10px;\n                    cursor: ${data.disabled ? 'default' : 'pointer'};\n                    white-space: nowrap;\n                    overflow: hidden;\n                    text-overflow: ellipsis;\n                    background-color: ${data.disabled ? 'rgba(50, 65, 66, 0.5)' : 'rgb(37, 50, 51)'};\n                    color: ${data.disabled ? 'rgb(140, 140, 140)' : 'rgb(171, 171, 171)'}; /* 修改文字颜色 */\n                    font-style: ${data.disabled ? 'italic' : 'normal'};\n                    pointer-events: ${data.disabled ? 'none' : 'auto'};\n                `;\n\n                if (!data.disabled) {\n                    const hoverBgColor = 'rgb(50, 65, 66)';\n                    const originalBgColor = 'rgb(37, 50, 51)';\n                    item.addEventListener('mouseenter', () => item.style.backgroundColor = hoverBgColor);\n                    item.addEventListener('mouseleave', () => item.style.backgroundColor = originalBgColor);\n\n                    item.addEventListener('click', (event) => {\n                        event.stopPropagation();\n                        originalSelectElement.value = item.dataset.value;\n                        // No need to update currentSelectedValue/Text here, closeSearch_V8 reads from select\n                        originalSelectElement.dispatchEvent(new Event('change', { bubbles: true }));\n                        closeSearch_V8(); // V8\n                    });\n                }\n                fragment.appendChild(item); // <<< OPTIMIZATION: Append to fragment\n                hasResults = true;\n            }\n        });\n\n        // Clear previous results\n        resultsList.innerHTML = '';\n\n        if (!hasResults && term !== '') {\n            const noResultItem = doc.createElement('div');\n            noResultItem.textContent = '无匹配结果';\n            noResultItem.style.cssText = `padding: 8px 10px; color: rgb(171, 171, 171); font-style: italic; background-color: rgb(37, 50, 51);`;\n            fragment.appendChild(noResultItem); // <<< OPTIMIZATION: Append to fragment\n        }\n\n        // Append the fragment to the results list in one go\n        resultsList.appendChild(fragment); // <<< OPTIMIZATION\n    }\n\n    console.log('[SearchComponentV8] 自定义搜索组件已成功替换 (点击展开, 深色主题, 指定文字颜色, 向下延伸)。');\n}\n\n\n// --- 触发逻辑 (V8, 无延迟) ---\nfunction tryReplaceSelectWithRetry_V8(retries = 3) {\n    console.log(`[SearchComponentV8] 尝试替换 select (剩余次数: ${retries})...`);\n    const targetSelectSelector = '.character_world_info_selector';\n    const doc = window.parent?.document || window.document;\n    let selectElement = null;\n    try {\n        selectElement = doc.querySelector(targetSelectSelector);\n    } catch(e) { /*忽略*/ }\n\n    if (selectElement && selectElement.dataset.searchV8Replaced !== 'true') {\n        replaceSelectWithSearchComponent_V8(); // V8\n    } else if (selectElement && selectElement.dataset.searchV8Replaced === 'true') {\n        console.log('[SearchComponentV8] 已替换，无需重试。');\n    } else if (retries > 0) {\n        console.log(`[SearchComponentV8] 未找到元素，立即重试...`);\n        // Using requestAnimationFrame for a micro-delay might be slightly better than immediate recursion\n        // if the element appears just slightly after the initial check, but immediate retry is simpler.\n        // requestAnimationFrame(() => tryReplaceSelectWithRetry_V8(retries - 1));\n         tryReplaceSelectWithRetry_V8(retries - 1); // V8 - Keeping immediate retry as per original\n    } else {\n        console.error(`[SearchComponentV8] 重试 ${retries} 次后仍未找到或替换失败: ${targetSelectSelector}`);\n    }\n}\n\n// --- 绑定到事件 (V8, 无延迟触发) ---\nif (typeof eventOn !== 'undefined' && typeof tavern_events !== 'undefined') {\n    // Debounce the initializer slightly in case events fire rapidly\n    let initReplaceV8TimeoutId = null;\n    const initializeSearchComponentV8 = () => { // V8\n        clearTimeout(initReplaceV8TimeoutId); // Clear previous scheduled attempts\n        initReplaceV8TimeoutId = setTimeout(() => { // Schedule the attempt\n             console.log('[SearchComponentV8] 事件触发，准备初始化替换...');\n             tryReplaceSelectWithRetry_V8(); // V8\n        }, 50); // Small delay (50ms) to debounce rapid events\n    };\n\n    console.log('[SearchComponentV8] 正在监听 CHARACTER_PAGE_LOADED 和 CHARACTER_EDITED 事件...');\n    eventOn(tavern_events.CHARACTER_PAGE_LOADED, initializeSearchComponentV8);\n    eventOn(tavern_events.CHARACTER_EDITED, initializeSearchComponentV8);\n\n} else {\n    console.warn('[SearchComponentV8] 未检测到 Tavern Helper 事件系统。将尝试立即直接替换。');\n    // Add a slight delay even for direct call, in case the script runs before the element fully renders\n    setTimeout(() => tryReplaceSelectWithRetry_V8(), 100); // V8 - Small delay\n}\n\n// --- 手动调用 (V8) ---\n// 在角色编辑页面加载后执行 (如果事件系统不可用):\n// setTimeout(() => tryReplaceSelectWithRetry_V8(), 100);",
                        "info": "**功能名称：** 角色卡绑定主要世界书搜索栏\n\n**目标：** 改进 SillyTavern 角色编辑页面中“主要世界书”选择的操作体验。\n\n**核心功能：**\n\n1.  **替换原生下拉框：** 该脚本会自动查找角色编辑页面中用于选择“主要世界书”的原生 HTML 下拉列表 (`<select>`)。\n2.  **注入自定义组件：** 找到原始下拉框后，脚本会将其隐藏，并在相同位置插入一个自定义的、交互更友好的组件。\n3.  **外观：**\n    *   该组件采用**深色主题**，背景色为 `rgb(37, 50, 51)`。\n    *   初始状态下，它显示当前选定的世界书名称，文字为**白色、加粗**，背景为深灰色，右侧有一个下拉箭头图标。\n    *   搜索框和弹出的结果列表也采用**深灰色背景**。\n    *   搜索框和结果列表中的**文字颜色**被设定为特定的灰色 `rgb(171, 171, 171)`。\n4.  **交互方式：**\n    *   **点击展开：** 用户点击显示当前选择的区域时，该区域会隐藏，并显示一个文本**搜索框**和下方的**结果列表**。\n    *   **实时搜索：** 用户在搜索框中输入关键词时，下方的结果列表会**实时过滤**，只显示名称中包含这些关键词的世界书选项。\n    *   **结果列表显示：** 结果列表会从搜索框正下方弹出，并且其高度会根据匹配结果的数量**自动延伸**（不会出现内部滚动条，而是覆盖页面下方内容）。\n    *   **选择与关闭：** 用户点击结果列表中的某一项时，该项会被选中（后台更新原始隐藏的 `<select>` 值），然后搜索框和结果列表会自动关闭，组件恢复到显示选中项的状态。\n    *   **点击外部关闭：** 如果在搜索状态下点击页面上该组件以外的任何区域，搜索框和结果列表也会自动关闭。\n5.  **自动应用：** 脚本设计为在检测到 SillyTavern 加载角色编辑页面 (`CHARACTER_PAGE_LOADED` 事件) 或进行编辑 (`CHARACTER_EDITED` 事件) 时自动运行并应用替换。\n\n**用户体验改进：**\n\n*   对于拥有大量世界书的用户，不再需要在一个长长的原生下拉列表中费力地滚动查找，可以直接通过输入关键词快速定位。\n*   提供了更现代、统一的外观（深色主题）。\n\n**说明：**\n\n不懂代码，社区找功能没找到，全是折磨gemini写出来的\n也有可能是在折磨我自己，主打一个能用就行",
                        "buttons": [],
                        "enabled": true
                    },
                    {
                        "id": "9bfc0d64-3a0c-4a17-a9ae-01b5c6f2fe84",
                        "name": "脚本-世界书自定义真实排序(性能优化)",
                        "content": "async function modifyLorebookEntries() {\n  try {\n    // 获取当前选择的世界书\n    const lorebook = $('#world_editor_select', window.parent.document).find(':selected').text();\n    if (lorebook == '--- 选择以编辑 ---') {\n      return { success: false, error: '请选择世界书' };\n    }\n    \n    // 获取当前世界书的元素\n    const entries = await getLorebookEntries(lorebook);\n    \n    // 获取实际存在的所有UID，并按顺序排列\n    const actualUids = entries.map(entry => entry.uid).sort((a, b) => a - b);\n    // console.log('实际存在的UID:', actualUids);\n    \n    // 构建原始UID到新索引的映射表（从0开始）\n    const uidToNewIndexMap = new Map();\n    actualUids.forEach((uid, index) => {\n      uidToNewIndexMap.set(uid, index); // 从0开始的索引\n    });\n    // console.log('UID到新索引的映射:', Object.fromEntries([...uidToNewIndexMap.entries()]));\n    \n    // 重新映射原始条目的UID\n    const originalEntries = entries.map(entry => {\n      const newEntry = { ...entry };\n      newEntry.uid = uidToNewIndexMap.get(entry.uid);\n      return newEntry;\n    });\n    \n    // 记录排序前的状态（调试信息）\n    // console.log('排序前状态(使用新UID):', originalEntries.map(e => ({\n    //   uid: e.uid,\n    //   display_index: e.display_index,\n    //   position: e.position,\n    //   depth: e.depth,\n    //   order: e.order,\n    //   enabled: e.enabled\n    // })));\n    \n    // 预定义位置映射常量\n    const NORMAL_POSITIONS = {\n      'before_character_definition': 1,    // 角色定义之前\n      'after_character_definition': 2,     // 角色定义之后\n      'before_example_messages': 3,        // 示例消息之前\n      'after_example_messages': 4,         // 示例消息之后\n      'before_author_note': 5,             // 作者注释之前\n      'after_author_note': 6               // 作者注释之后\n    };\n    \n    // 深度相同时，排序为助手，用户，系统\n    const DEPTH_POSITIONS = {\n      'at_depth_as_assistant': 1, // @D🤖\n      'at_depth_as_user': 2,      // @D👤\n      'at_depth_as_system': 3     // @D⚙\n    };\n    \n    // 预计算排序键值\n    const sortKeys = new Map();\n    \n    for (let i = 0; i < originalEntries.length; i++) {\n      const entry = originalEntries[i];\n      const enabled = entry.enabled ? 0 : 1;\n      const position = entry.position;\n      \n      // 计算位置类型和排名\n      let posType, posRank;\n      if (position in NORMAL_POSITIONS) {\n        posType = 0; // 正常位置\n        posRank = NORMAL_POSITIONS[position];\n      } else if (position in DEPTH_POSITIONS) {\n        posType = 1; // 深度位置\n        posRank = DEPTH_POSITIONS[position];\n      } else {\n        posType = 2; // 其他位置，基本不存在\n        posRank = 999;\n      }\n      \n      // 深度值（仅深度位置使用）\n      const depth = posType === 1 ? -(entry.depth || 0) : 0;\n      \n      // 存储排序键值\n      sortKeys.set(entry.uid, [\n        enabled,    // 启用状态\n        posType,    // 位置类型（0=正常，1=深度，2=其他）\n        depth,      // 深度值（仅深度位置有效）\n        posRank,    // 位置排名\n        entry.order || 0, // 顺序\n        entry.uid   // 已映射的UID\n      ]);\n    }\n    \n    // 创建优化的排序函数\n    originalEntries.sort((a, b) => {\n      const aKeys = sortKeys.get(a.uid);\n      const bKeys = sortKeys.get(b.uid);\n      \n      // 依次比较每个排序键\n      for (let i = 0; i < 6; i++) {\n        const diff = aKeys[i] - bKeys[i];\n        if (diff !== 0) return diff;\n      }\n      \n      return 0; // 不应该达到这里，因为uid总是不同的\n    });\n    \n    // 记录排序算法的结果（调试信息）\n    // console.log('排序算法计算结果(使用新UID):', originalEntries.map(e => ({\n    //   uid: e.uid,\n    //   display_index: e.display_index,\n    //   position: e.position,\n    //   depth: e.depth,\n    //   order: e.order,\n    //   enabled: e.enabled\n    // })));\n    \n    // 检查是否需要更新\n    const originalIndexMap = new Map();\n    originalEntries.forEach(entry => {\n      originalIndexMap.set(entry.uid, entry.display_index);\n    });\n    \n    // 记录display_index映射（调试信息）\n    // console.log('原始 display_index 映射(使用新UID):', Object.fromEntries([...originalIndexMap.entries()]));\n    \n    // 需不需要更新\n    let needsUpdate = false;\n    const modifiedEntries = [];\n    \n    for (let i = 0; i < originalEntries.length; i++) {\n      const entry = originalEntries[i];\n      const newUid = entry.uid; // 已映射的UID\n      const expectedDisplayIndex = i + 1; // 期望的display_index (从1开始)\n      const originalDisplayIndex = originalIndexMap.get(newUid);\n      \n      // 记录每个条目的比较结果（调试信息）\n      // console.log(`比较条目 UID=${newUid}: 新位置=${expectedDisplayIndex}, 原display_index=${originalDisplayIndex}`);\n      \n      if (originalDisplayIndex !== expectedDisplayIndex) {\n        needsUpdate = true;\n        // 直接使用映射后的UID\n        modifiedEntries.push({\n          uid: newUid,\n          display_index: expectedDisplayIndex\n        });\n      }\n    }\n    \n    // 记录需要更新的条目（调试信息）\n    // console.log('需要更新的条目:', modifiedEntries);\n    \n    if (needsUpdate) {\n      console.log('进行更新操作...');\n      try {\n        await setLorebookEntries(lorebook, modifiedEntries);\n        console.log('世界书已根据实际顺序排序，自定义排序为真实排序');\n      } catch (error) {\n        console.error('设置世界书条目时出错:', error);\n        return { success: false, error: `设置世界书条目时出错: ${error.message}` };\n      }\n      return { success: true, message: '自定义真实排序完成' };\n    }\n    \n    console.log('无需更新，已是真实排序');\n    return { success: true, message: '已真实排序' };\n  } catch (error) {\n    console.error('排序当前世界书出错:', error);\n    return { success: false, error: error.message };\n  }\n}\neventOn(tavern_events.WORLDINFO_UPDATED, modifyLorebookEntries);",
                        "info": "# 作者：JoeZhangYN\n## 版本日期:2025/5/6\n## 作用:\n\n- 依赖酒馆原生的自定义排序字段实现对世界书的顺序重排\n- 5/6 更新修复?->适配酒馆助手的调用逻辑。 解决一直置顶和重复触发更新世界书问题。\n\n### 吐槽:\n很多人反馈下拉置顶，重复触发问题。\n用删除很多条目的世界书问题复现成功了。\n## 为什么呢？\n是因为await setLorebookEntries(lorebook, modifiedEntries);（青空莉想做舞台少女的狗的插件特性...）\n调用这个函数实际上会将UID 重新映射为从 0 开始、步长为 1 的顺序。\n也就是如果一共有100个条目，从0开始，0,1,2,3...99。\n但不正常的世界书因为删减的问题，导致错位，比如多次新增删除条目,出现不连续的100,105,109。\n假如uid顺序就是真实顺序。display_index为从 1 开始、步长为 1 的顺序。\n获取到uid为100，排序display_index为98；uid为105，排序display_index为99；uid为109，排序display_index为100。\n但实际上函数不支持uid大于99的调用，因为重排序了。实际上uid97,排序display_index为98;uid98,排序display_index为99;uid99,排序display_index为100.\n所以要首先排序获取的原始UID，随后再根据规则排序。",
                        "buttons": [],
                        "enabled": true
                    },
                    {
                        "id": "99166cde-9ec2-4a25-8444-4fb11e95a0f5",
                        "name": "世界书排序",
                        "content": "'use strict';\n\n$(async () => {\n  async function sortLorebookOrderByDisplayIndex() {\n    try {\n      // 弹出输入框获取最大顺序数字\n      const maxOrderInput = await triggerSlashWithResult('/input default=100 请输入最大的顺序数字：');\n\n      // 检查用户是否取消或输入无效\n      if (maxOrderInput === undefined || maxOrderInput === false || maxOrderInput.trim() === '') {\n        // /input 在取消时可能返回 false 或 undefined，具体行为取决于酒馆版本，这里做兼容处理\n        console.log('用户取消输入。');\n        return; // 用户取消，静默退出\n      }\n\n      const maxOrder = parseInt(maxOrderInput, 10);\n\n      if (isNaN(maxOrder) || maxOrder <= 0) {\n        await triggerSlash(`/echo severity=error 输入无效，请输入一个正整数。 输入值为: ${maxOrderInput}`);\n        return;\n      }\n\n      // 获取当前角色卡绑定的主要世界书名称\n      const primaryLorebookName = await getCurrentCharPrimaryLorebook();\n\n      if (!primaryLorebookName) {\n        await triggerSlash('/echo severity=warning 当前角色卡未绑定主要世界书。');\n        return;\n      }\n\n      // 获取世界书中的所有条目\n      const entries = await getLorebookEntries(primaryLorebookName);\n\n      if (!entries || entries.length === 0) {\n        await triggerSlash('/echo severity=info 世界书中没有条目。');\n        return;\n      }\n\n      // 根据 display_index 升序排序条目 (display_index 越小越靠前)\n      const sortedEntries = [...entries].sort((a, b) => a.display_index - b.display_index);\n\n      // 分配 order 值，从小到大排列，最大值为用户输入的 maxOrder\n      const totalEntries = sortedEntries.length;\n      const minOrder = maxOrder - totalEntries + 1; // 计算最小的 order 值\n      const entriesToUpdate = sortedEntries.map((entry, index) => ({\n        uid: entry.uid,\n        order: minOrder + index, // 最上面的条目 order 最小，最下面的为 maxOrder\n      }));\n\n      // 更新世界书条目\n      await setLorebookEntries(primaryLorebookName, entriesToUpdate);\n\n      // 使用 triggerSlash 和 /echo 显示成功消息\n      await triggerSlash(`/echo severity=success 世界书 \\\"${primaryLorebookName}\\\" 条目顺序已更新。`);\n    } catch (error) {\n      console.error('更新世界书顺序时出错:', error);\n      // 使用 triggerSlash 和 /echo 显示错误消息\n      // 注意：如果 triggerSlashWithResult 或 triggerSlash 本身出错，这里的 catch 可能捕获到\n      try {\n        await triggerSlash(`/echo severity=error 更新世界书顺序失败: ${error.message}`);\n      } catch (echoError) {\n        console.error('显示错误消息时也发生错误:', echoError);\n      }\n    }\n  }\n\n  // 将函数绑定到按钮 '世界书排序'\n  eventOnButton('世界书排序', sortLorebookOrderByDisplayIndex);\n\n  console.log(\"顺序脚本已加载，等待 '世界书排序' 按钮点击。\");\n});\n",
                        "info": "",
                        "buttons": [
                            {
                                "name": "世界书排序",
                                "visible": true
                            }
                        ],
                        "enabled": true
                    },
                    {
                        "id": "70c0bab7-c2a2-46f1-a0b9-21835bc4566e",
                        "name": "一种批量更新覆盖支持压缩包的上传正则方式",
                        "content": "const e=window.getTavernRegexes,n=window.replaceTavernRegexes,o=window.toastr,t=\"upload-regex-button\";let r=null;const i=\"https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js\";function s(e){const n=(e||\"\").toLowerCase();return n.startsWith(\"替换\")?2:n.startsWith(\"删除\")?3:n.startsWith(\"消除\")?4:1}async function c(e){const n=[],t=[];if(Array.from(e).some((e=>e.name.toLowerCase().endsWith(\".zip\"))))try{await async function(){return\"function\"==typeof JSZip?(console.log(\"JSZip 已加载。\"),Promise.resolve()):r?(console.log(\"JSZip 正在加载中...\"),r):(console.log(`尝试从 CDN 加载 JSZip: ${i}`),o&&\"function\"==typeof o.info&&o.info(\"首次上传ZIP，正在尝试加载 JSZip 库...\",\"请稍候\",{timeOut:3e3}),r=new Promise(((e,n)=>{const t=document.createElement(\"script\");t.src=i,t.async=!0,t.onload=()=>{\"function\"==typeof JSZip?(console.log(\"JSZip 从 CDN 加载成功。\"),o&&\"function\"==typeof o.success&&o.success(\"JSZip 库加载成功！\",\"成功\",{timeOut:2e3}),e()):(console.error(\"JSZip CDN 脚本已加载，但 JSZip 对象未定义。\"),o&&\"function\"==typeof o.error&&o.error(\"JSZip 库加载异常。\",\"错误\"),n(new Error(\"JSZip loaded but not defined.\")))},t.onerror=e=>{console.error(\"从 CDN 加载 JSZip 失败:\",e),o&&\"function\"==typeof o.error&&o.error(\"JSZip 库加载失败，无法处理ZIP文件。请检查网络连接或浏览器控制台。\",\"错误\"),r=null,n(e)},document.head.appendChild(t)})),r)}()}catch(e){console.error(\"JSZip 加载失败，部分ZIP文件可能无法处理。\",e)}for(const r of Array.from(e)){const e=r.name.toLowerCase();if(e.endsWith(\".json\"))try{const e=await r.text();n.push({originalFileName:r.name,content:e})}catch(e){t.push(`读取JSON文件 ${r.name} 失败: ${e.message}`)}else if(e.endsWith(\".zip\")){if(\"function\"!=typeof JSZip){const e=`JSZip 库未能加载或不可用，无法处理 ZIP 文件: ${r.name}。`;o&&\"function\"==typeof o.error?o.error(e.replace(/\\n/g,\"<br>\")):alert(e),console.error(e),t.push(`跳过ZIP ${r.name}: JSZip 未加载/不可用。`);continue}try{const e=new JSZip,o=await e.loadAsync(r),i=[];o.forEach(((e,o)=>{o.name.toLowerCase().endsWith(\".json\")&&!o.dir&&i.push(o.async(\"string\").then((e=>{n.push({originalFileName:o.name,content:e,sourceArchiveName:r.name})})).catch((e=>{t.push(`从ZIP ${r.name} 提取 ${o.name} 失败: ${e.message}`)})))})),await Promise.all(i)}catch(e){t.push(`处理 ZIP 文件 ${r.name} 失败: ${e.message}`)}}else t.push(`跳过不支持的文件类型: ${r.name}`)}return{jsonDataSources:n,processingErrors:t}}function a(e,n,o,t){let r=0,i=0,s=0;const c=e.filter((e=>n.some((n=>n.scope===e.scope&&(n.script_name===e.script_name||n.id===e.id)))));let a;c.length>0&&(a=c.map((e=>{let o=`脚本 \"${e.script_name}\" (ID: ${e.id}, 来自: ${e._sourceFile}`;e._sourceArchive&&(o+=` [ZIP: ${e._sourceArchive}]`),o+=\") 与现有正则冲突原因: \";const t=new Set;return n.forEach((n=>{if(n.scope===e.scope){const o=n.id===e.id,r=n.script_name===e.script_name;o&&r?t.add(`名称与ID均匹配现有 \"${n.script_name}\" (ID: ${n.id})`):o?t.add(`ID匹配现有 \"${n.script_name}\" (ID: ${n.id})`):r&&t.add(`名称匹配现有 \"${n.script_name}\" (ID: ${n.id})`)}})),o+=t.size>0?Array.from(t).join(\"; \"):\"未知冲突\",o})).join(\"\\n\"));let l=[...n];const p=[];for(const n of e){const{_sourceFile:e,_sourceArchive:o,...a}=n,u=c.some((e=>e.id===n.id&&e.script_name===n.script_name&&e.scope===n.scope));if(u&&!t){s++;continue}let f=!1;l.length;l=l.filter((e=>e.id!==a.id||e.scope!==a.scope||(f=!0,!1))),l=l.filter((e=>{if(e.script_name===a.script_name&&e.scope===a.scope&&e.id!==a.id){if(c.some((e=>e.script_name===a.script_name&&e.scope===a.scope&&e.id!==a.id&&(e.id===n.id||e.script_name===n.script_name)))||u&&t)return f=!0,!1}return!0})),p.push(a),f?i++:u&&t||r++}return l.push(...p),{finalRegexList:l,addedCount:r,overwrittenCount:i,skippedDueToDuplicateCount:s,conflictDetailsForPrompt:a}}$((()=>{const r=window.parent.document;console.log(\"上传正则扩展: 初始化中...\");const i=$(\"#extensionsMenu\",r);if(i.length)if(0===$(`#${t}`,r).length){const l=`\\n                <div id=\"${t}\" class=\"list-group-item flex-container flexGap5 interactable\" title=\"上传正则JSON文件或包含JSON的ZIP包(可多选)\" tabIndex=\"0\">\\n                    <i class=\"fa-solid fa-upload\"></i>\\n                    <span>上传正则</span>\\n            </div>\\n        `;try{i.append(l),console.log(\"上传正则扩展: 按钮已成功添加到扩展菜单。\");$(`#${t}`,r).on(\"click\",(()=>{if(console.log('\"上传正则\"按钮被点击。'),\"function\"!=typeof e||\"function\"!=typeof n){const e=\"SillyTavern 正则管理功能不可用。\";return o&&\"function\"==typeof o.error?o.error(e):alert(e),void console.error(\"getTavernRegexes or replaceTavernRegexes is not a function.\")}\"object\"==typeof o&&\"function\"==typeof o.error||console.warn(\"Toastr 通知系统不完全可用，某些消息将回退到使用 alert。\");const t=document.createElement(\"input\");t.type=\"file\",t.accept=\".json,.zip\",t.multiple=!0,t.style.display=\"none\",t.onchange=async r=>{const i=r.target.files;let l=t;if(!i||0===i.length)return o&&\"function\"==typeof o.warning?o.warning(\"没有选择文件。\"):alert(\"没有选择文件。\"),void(l.parentNode&&l.parentNode.removeChild(l));const{jsonDataSources:p,processingErrors:u}=await c(i);if(l.parentNode&&l.parentNode.removeChild(l),u.length>0){const e=`在文件读取/ZIP提取阶段出现以下问题:\\n${u.join(\"\\n\")}`;o&&\"function\"==typeof o.warning?o.warning(e.replace(/\\n/g,\"<br>\"),\"文件处理问题\",{timeOut:15e3,extendedTimeOut:7e3,escapeHtml:!1}):alert(e),console.warn(\"文件处理问题:\",u)}if(0===p.length){const e=\"未找到可供处理的 JSON 内容。\";return void(o&&\"function\"==typeof o.info?o.info(e):alert(e))}let f=null;if(window.confirm(`要将提取到的 ${p.length} 个正则条目全部上传为【全局】正则吗？\\n(点击\"取消\"将询问是否设为【局部】正则)`)?f=\"global\":window.confirm(`要将提取到的 ${p.length} 个正则条目全部上传为【局部】正则 (当前角色) 吗？`)&&(f=\"character\"),!f)return void(o&&\"function\"==typeof o.info?o.info(\"批量上传已取消：未选择作用域。\"):alert(\"批量上传已取消：未选择作用域。\"));console.log(`批量上传作用域选定为: ${f}`);const{tavernRegexObjects:d,parsingErrors:m}=function(e,n){const o=[],t=[];return e.forEach((e=>{try{const r=JSON.parse(e.content);if(!r.scriptName||!r.findRegex)return void t.push(`${e.originalFileName}${e.sourceArchiveName?` (来自ZIP: ${e.sourceArchiveName})`:\"\"}: 文件格式无效 (缺少 scriptName 或 findRegex)。`);const i={user_input:!1,ai_output:!1,slash_command:!1,world_info:!1},s=Array.isArray(r.placement)?r.placement:[];s.includes(1)&&(i.user_input=!0),s.includes(2)&&(i.ai_output=!0),s.includes(3)&&(i.slash_command=!0),s.includes(5)&&(i.world_info=!0);const c={display:\"boolean\"==typeof r.markdownOnly&&r.markdownOnly,prompt:\"boolean\"==typeof r.promptOnly&&r.promptOnly};o.push({id:r.id||window.crypto.randomUUID(),script_name:r.scriptName,find_regex:r.findRegex,replace_string:r.replaceString||\"\",enabled:\"boolean\"!=typeof r.disabled||!r.disabled,run_on_edit:\"boolean\"==typeof r.runOnEdit&&r.runOnEdit,scope:n,source:i,destination:c,min_depth:void 0===r.minDepth||null===r.minDepth?null:Number(r.minDepth),max_depth:void 0===r.maxDepth||null===r.maxDepth?null:Number(r.maxDepth),_sourceFile:e.originalFileName,_sourceArchive:e.sourceArchiveName})}catch(n){t.push(`${e.originalFileName}${e.sourceArchiveName?` (来自ZIP: ${e.sourceArchiveName})`:\"\"}: 解析JSON失败 (${n.message})。`)}})),o.sort(((e,n)=>{const o=s(e.script_name),t=s(n.script_name);if(o!==t)return o-t;const r=e.script_name||\"\",i=n.script_name||\"\";return r.localeCompare(i)})),{tavernRegexObjects:o,parsingErrors:t}}(p,f);if(m.length>0){const e=`在JSON内容解析/验证阶段出现以下问题:\\n${m.join(\"\\n\")}`;o&&\"function\"==typeof o.warning?o.warning(e.replace(/\\n/g,\"<br>\"),\"JSON 处理警告\",{timeOut:15e3,extendedTimeOut:7e3,escapeHtml:!1}):alert(e),console.warn(\"JSON 内容解析/验证问题:\",m)}if(0!==d.length)try{const t=await e({scope:\"all\"})||[],r=a(d,t,0,!0);let i=!0;r.conflictDetailsForPrompt&&(i=window.confirm(`以下 ${r.conflictDetailsForPrompt.split(\"\\n\").length} 个待上传正则与系统中现有正则 (作用域 \"${f}\") 存在名称或ID冲突：\\n${r.conflictDetailsForPrompt}\\n\\n是否要覆盖它们？\\n(点击\"取消\"将跳过这些冲突的正则)`));const{finalRegexList:c,addedCount:l,overwrittenCount:p,skippedDueToDuplicateCount:h}=a(d,t,0,i);let g=l>0||p>0;if(g){await n(c,{scope:\"all\"});let e=`批量上传完成 (作用域: ${f}):\\n`;l>0&&(e+=`- ${l} 个新正则已添加。\\n`),p>0&&(e+=`- ${p} 个正则已覆盖。\\n`),h>0&&(e+=`- ${h} 个冲突正则已跳过。\\n`);const t=u.length+m.length;t>0&&(e+=`\\n(注意: 有 ${t} 个文件/条目在处理早期阶段失败)`),o&&\"function\"==typeof o.success?o.success(e.replace(/\\n/g,\"<br>\"),\"批量上传结果\",{timeOut:15e3,extendedTimeOut:7e3,escapeHtml:!1}):alert(e),console.log(\"批量上传成功:\",{addedCount:l,overwrittenCount:p,skippedDueToDuplicateCount:h})}else{let e=\"没有正则被添加或更新。\";h>0?e=`${h} 个冲突正则均被跳过。`:d.length>0&&(e=\"所有待上传正则均无变化或被跳过。\");(0===u.length+m.length||e&&d.length>0)&&(o&&\"function\"==typeof o.info?o.info(e):alert(e))}if(g||h>0||d.length>0){const t=g?c:await e({scope:\"all\"})||[];if(window.confirm(`导入操作完成。\\n是否需要对当前所有的正则 (共 ${t.length} 个) 进行一次整体自定义排序？`))try{let t=await e({scope:\"all\"})||[];t.sort(((e,n)=>{const o=s(e.script_name),t=s(n.script_name);if(o!==t)return o-t;const r=e.script_name||\"\",i=n.script_name||\"\";return r.localeCompare(i)})),await n(t,{scope:\"all\"}),o&&\"function\"==typeof o.success?o.success(\"所有正则已按自定义优先级重新排序！\"):alert(\"所有正则已按自定义优先级重新排序！\"),console.log(\"全局正则自定义排序完成。\")}catch(e){const n=`全局自定义排序时发生错误: ${e.message}`;o&&\"function\"==typeof o.error?o.error(n):alert(n),console.error(\"全局自定义排序错误:\",e)}}}catch(e){const n=`处理或保存正则时发生严重错误: ${e.message}`;o&&\"function\"==typeof o.error?o.error(n):alert(n),console.error(\"批量上传正则处理/保存错误:\",e)}else{const e=\"没有有效的正则数据可供上传。\";o&&\"function\"==typeof o.info?o.info(e):alert(e)}},document.body.appendChild(t),t.click()}))}catch(e){console.error(\"上传正则扩展: 添加按钮到扩展菜单失败。\",e)}}else console.log(\"上传正则扩展: 按钮已经存在，无需重复添加。\");else console.warn(\"上传正则扩展: 未找到扩展菜单 (#extensionsMenu)。按钮无法添加。\");console.log(\"上传正则扩展: 初始化完成。\")}));",
                        "info": "作者：糕\n功能：\n1.批量/zip压缩包上传正则;\n2.自动选择覆盖重复正则（名称/ID相同）；\n3.可选对所上传或者全局正则进行排序。",
                        "buttons": [],
                        "enabled": true
                    }
                ],
                "characters_with_scripts": []
            },
            "audio": {
                "audio_enabled": true,
                "bgm_enabled": true,
                "ambient_enabled": true,
                "bgm_mode": "repeat",
                "bgm_muted": false,
                "bgm_volume": 50,
                "bgm_selected": null,
                "bgm_current_time": 0,
                "ambient_mode": "stop",
                "ambient_muted": false,
                "ambient_volume": 50,
                "ambient_selected": null,
                "ambient_current_time": 0,
                "audio_cooldown": 0
            },
            "listener": {
                "enabled": false,
                "enable_echo": true,
                "url": "http://localhost:6621",
                "duration": 1000
            }
        }
    },
    "tags": [
        {
            "id": "1345561466591",
            "name": "ST Default",
            "color": "rgba(108, 32, 32, 1)"
        }
    ],
    "tag_map": {
        "default_Seraphina.png": [
            "1345561466591"
        ],
        "null": [],
        "[前端]调教状态栏+选项.png": [],
        "「系统Z-09」.png": [],
        "【高度美化】游戏界面.png": [],
        "露出世界.png": [],
        "24H1.png": [],
        "白化蓝染的日记本.png": [],
        "被GM之神选中的我们的无尽冒险谭.png": [],
        "卜卜.png": [],
        "岑芷.png": [],
        "穿越修真界被四个天命之子当炉鼎.png": [],
        "地图导航模块3.0.png": [],
        "堕落吧，魔法少女.png": [],
        "凡人修仙传之又起天南·我的内门弟子母亲.png": [],
        "高达00模拟器.png": [],
        "哥谭模拟器.png": [],
        "顾云汐.png": [],
        "霍格兰德大陆.png": [],
        "机动战士高达-SEED V1.2.png": [],
        "机动战士高达-SEED V1.2_1.png": [],
        "机动战士高达-UC纪元.png": [],
        "绝望黎明：未知命运.png": [],
        "看看他或她怎么想吧~.png": [],
        "可视化地图导航.png": [],
        "流式传输.png": [],
        "罗落大陆.png": [],
        "妙妙小剧场2.3.png": [],
        "上野花.png": [],
        "实时修改css.png": [],
        "霜影剑歌行.png": [],
        "万界聊天群“真语阁”.png": [],
        "小魅穿书系统.png": [],
        "修仙玄幻世界.png": [],
        "异世界冒险模拟器.png": [],
        "异世界冒险模拟器1.png": [],
        "欲望天际.png": [],
        "正则加世界书，按向上箭头将局部正则全部移到全局，并将世界书改为全局.png": [],
        "总结.png": [],
        "Character Builder v1.3.png": [],
        "fuhufox的亚种圣杯战争.png": [],
        "infinite.png": [],
        "infinite2.png": [],
        "infinite3-贝露.png": [],
        "Mori.png": [],
        "test.png": [],
        "test1.png": [],
        "vrmmo.png": [],
        "World Builder V1.4.png": [],
        "WorldofHorror.png": []
    },
    "nai_settings": {
        "temperature": 1.5,
        "repetition_penalty": 2.25,
        "repetition_penalty_range": 2048,
        "repetition_penalty_slope": 0.09,
        "repetition_penalty_frequency": 0,
        "repetition_penalty_presence": 0.005,
        "tail_free_sampling": 0.975,
        "top_k": 10,
        "top_p": 0.75,
        "top_a": 0.08,
        "typical_p": 0.975,
        "min_p": 0,
        "math1_temp": 1,
        "math1_quad": 0,
        "math1_quad_entropy_scale": 0,
        "min_length": 1,
        "model_novel": "clio-v1",
        "preset_settings_novel": "Talker-Chat-Clio",
        "streaming_novel": true,
        "preamble": "[ Style: chat, complex, sensory, visceral ]",
        "banned_tokens": "",
        "order": [
            1,
            5,
            0,
            2,
            3,
            4
        ],
        "logit_bias": []
    },
    "kai_settings": {
        "temp": 1.15,
        "rep_pen": 1.05,
        "rep_pen_range": 2048,
        "top_p": 0.95,
        "min_p": 0,
        "top_a": 0,
        "top_k": 0,
        "typical": 1,
        "tfs": 0.8,
        "rep_pen_slope": 7,
        "streaming_kobold": false,
        "sampler_order": [
            6,
            3,
            2,
            0,
            5,
            1,
            4
        ],
        "mirostat": 0,
        "mirostat_tau": 5,
        "mirostat_eta": 0.1,
        "use_default_badwordsids": false,
        "grammar": "",
        "seed": -1
    },
    "oai_settings": {
        "preset_settings_openai": "Default",
        "temp_openai": 1,
        "freq_pen_openai": 0,
        "pres_pen_openai": 0,
        "top_p_openai": 1,
        "top_k_openai": 0,
        "min_p_openai": 0,
        "top_a_openai": 0,
        "repetition_penalty_openai": 1,
        "stream_openai": true,
        "openai_max_context": 4095,
        "openai_max_tokens": 300,
        "wrap_in_quotes": false,
        "prompts": [
            {
                "name": "Main Prompt",
                "system_prompt": true,
                "role": "system",
                "content": "Write {{char}}'s next reply in a fictional chat between {{char}} and {{user}}.",
                "identifier": "main"
            },
            {
                "name": "Auxiliary Prompt",
                "system_prompt": true,
                "role": "system",
                "content": "",
                "identifier": "nsfw"
            },
            {
                "identifier": "dialogueExamples",
                "name": "Chat Examples",
                "system_prompt": true,
                "marker": true
            },
            {
                "name": "Post-History Instructions",
                "system_prompt": true,
                "role": "system",
                "content": "",
                "identifier": "jailbreak"
            },
            {
                "identifier": "chatHistory",
                "name": "Chat History",
                "system_prompt": true,
                "marker": true
            },
            {
                "identifier": "worldInfoAfter",
                "name": "World Info (after)",
                "system_prompt": true,
                "marker": true
            },
            {
                "identifier": "worldInfoBefore",
                "name": "World Info (before)",
                "system_prompt": true,
                "marker": true
            },
            {
                "identifier": "enhanceDefinitions",
                "role": "system",
                "name": "Enhance Definitions",
                "content": "If you have more knowledge of {{char}}, add to the character's lore and personality to enhance them but keep the Character Sheet's definitions absolute.",
                "system_prompt": true,
                "marker": false
            },
            {
                "identifier": "charDescription",
                "name": "Char Description",
                "system_prompt": true,
                "marker": true
            },
            {
                "identifier": "charPersonality",
                "name": "Char Personality",
                "system_prompt": true,
                "marker": true
            },
            {
                "identifier": "scenario",
                "name": "Scenario",
                "system_prompt": true,
                "marker": true
            },
            {
                "identifier": "personaDescription",
                "name": "Persona Description",
                "system_prompt": true,
                "marker": true
            }
        ],
        "prompt_order": [
            {
                "character_id": 100000,
                "order": [
                    {
                        "identifier": "main",
                        "enabled": true
                    },
                    {
                        "identifier": "worldInfoBefore",
                        "enabled": true
                    },
                    {
                        "identifier": "charDescription",
                        "enabled": true
                    },
                    {
                        "identifier": "charPersonality",
                        "enabled": true
                    },
                    {
                        "identifier": "scenario",
                        "enabled": true
                    },
                    {
                        "identifier": "enhanceDefinitions",
                        "enabled": false
                    },
                    {
                        "identifier": "nsfw",
                        "enabled": true
                    },
                    {
                        "identifier": "worldInfoAfter",
                        "enabled": true
                    },
                    {
                        "identifier": "dialogueExamples",
                        "enabled": true
                    },
                    {
                        "identifier": "chatHistory",
                        "enabled": true
                    },
                    {
                        "identifier": "jailbreak",
                        "enabled": true
                    }
                ]
            },
            {
                "character_id": 100001,
                "order": [
                    {
                        "identifier": "main",
                        "enabled": true
                    },
                    {
                        "identifier": "worldInfoBefore",
                        "enabled": true
                    },
                    {
                        "identifier": "personaDescription",
                        "enabled": true
                    },
                    {
                        "identifier": "charDescription",
                        "enabled": true
                    },
                    {
                        "identifier": "charPersonality",
                        "enabled": true
                    },
                    {
                        "identifier": "scenario",
                        "enabled": true
                    },
                    {
                        "identifier": "enhanceDefinitions",
                        "enabled": false
                    },
                    {
                        "identifier": "nsfw",
                        "enabled": true
                    },
                    {
                        "identifier": "worldInfoAfter",
                        "enabled": true
                    },
                    {
                        "identifier": "dialogueExamples",
                        "enabled": true
                    },
                    {
                        "identifier": "chatHistory",
                        "enabled": true
                    },
                    {
                        "identifier": "jailbreak",
                        "enabled": true
                    }
                ]
            }
        ],
        "send_if_empty": "",
        "impersonation_prompt": "[Write your next reply from the point of view of {{user}}, using the chat history so far as a guideline for the writing style of {{user}}. Write 1 reply only in internet RP style. Don't write as {{char}} or system. Don't describe actions of {{char}}.]",
        "new_chat_prompt": "[Start a new Chat]",
        "new_group_chat_prompt": "[Start a new group chat. Group members: {{group}}]",
        "new_example_chat_prompt": "[Example Chat]",
        "continue_nudge_prompt": "[Continue your last message without repeating its original content.]",
        "bias_preset_selected": "Default (none)",
        "bias_presets": {
            "Default (none)": [],
            "Anti-bond": [
                {
                    "id": "22154f79-dd98-41bc-8e34-87015d6a0eaf",
                    "text": " bond",
                    "value": -50
                },
                {
                    "id": "8ad2d5c4-d8ef-49e4-bc5e-13e7f4690e0f",
                    "text": " future",
                    "value": -50
                },
                {
                    "id": "52a4b280-0956-4940-ac52-4111f83e4046",
                    "text": " bonding",
                    "value": -50
                },
                {
                    "id": "e63037c7-c9d1-4724-ab2d-7756008b433b",
                    "text": " connection",
                    "value": -25
                }
            ]
        },
        "wi_format": "{0}",
        "group_nudge_prompt": "[Write the next reply only as {{char}}.]",
        "scenario_format": "{{scenario}}",
        "personality_format": "{{personality}}",
        "openai_model": "gpt-4-turbo",
        "claude_model": "claude-3-5-sonnet-20240620",
        "google_model": "gemini-1.5-pro",
        "ai21_model": "jamba-1.5-large",
        "mistralai_model": "mistral-large-latest",
        "cohere_model": "command-r-plus",
        "perplexity_model": "sonar-pro",
        "groq_model": "llama-3.3-70b-versatile",
        "nanogpt_model": "gpt-4o-mini",
        "zerooneai_model": "yi-large",
        "deepseek_model": "deepseek-chat",
        "xai_model": "grok-3-beta",
        "pollinations_model": "openai",
        "custom_model": "gemini-2.5-flash-preview-05-20",
        "custom_url": "https://apisk.kfcvivo50.ggff.net/v1",
        "custom_include_body": "",
        "custom_exclude_body": "",
        "custom_include_headers": "",
        "windowai_model": "",
        "openrouter_model": "OR_Website",
        "openrouter_use_fallback": false,
        "openrouter_group_models": false,
        "openrouter_sort_models": "alphabetically",
        "openrouter_providers": [],
        "openrouter_allow_fallbacks": true,
        "openrouter_middleout": "on",
        "reverse_proxy": "",
        "chat_completion_source": "custom",
        "max_context_unlocked": false,
        "api_url_scale": "",
        "show_external_models": false,
        "proxy_password": "",
        "assistant_prefill": "",
        "assistant_impersonation": "",
        "claude_use_sysprompt": false,
        "use_makersuite_sysprompt": true,
        "use_alt_scale": false,
        "squash_system_messages": false,
        "image_inlining": false,
        "inline_image_quality": "low",
        "bypass_status_check": false,
        "continue_prefill": false,
        "function_calling": false,
        "names_behavior": 0,
        "continue_postfix": " ",
        "custom_prompt_post_processing": "merge",
        "show_thoughts": true,
        "reasoning_effort": "auto",
        "enable_web_search": false,
        "request_images": false,
        "seed": -1,
        "n": 1,
        "bind_preset_to_connection": true
    },
    "background": {
        "name": "cityscape medieval night.jpg",
        "url": "url(\"backgrounds/cityscape%20medieval%20night.jpg\")",
        "fitting": "classic"
    },
    "proxies": [
        {
            "name": "None",
            "url": "",
            "password": ""
        }
    ],
    "selected_proxy": {
        "name": "None",
        "url": "",
        "password": ""
    }
}